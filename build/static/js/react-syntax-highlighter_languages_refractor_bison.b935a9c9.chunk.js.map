{"version":3,"file":"static/js/react-syntax-highlighter_languages_refractor_bison.b935a9c9.chunk.js","mappings":"8FACA,IAAIA,EAAaC,EAAQ,KAIzB,SAASC,EAAMC,GACbA,EAAMC,SAASJ,GACfG,EAAME,UAAUH,MAAQC,EAAME,UAAUC,OAAO,IAAK,CAAC,GACrDH,EAAME,UAAUE,aAAa,QAAS,UAAW,CAC/CL,MAAO,CAILM,QAAS,gCACTC,OAAQ,CACNC,EAAG,CAEDF,QAAS,0CACTC,OAAQ,CACNE,UAAW,CACTH,QAAS,cACTI,MAAO,eAET,iBAAkB,CAChBJ,QAAS,2BACTI,MAAO,WACPH,OAAQ,CACNI,YAAa,QAGjBC,KAAMX,EAAME,UAAUK,IAG1BK,QAASZ,EAAME,UAAUK,EAAEK,QAC3BC,OAAQb,EAAME,UAAUK,EAAEM,OAC1BC,SAAU,WACVC,QAAS,OACTC,OAAQ,CACNX,QAAS,gCACTY,YAAY,GAEdP,YAAa,uBAIrB,CA3CAQ,EAAOC,QAAUpB,EACjBA,EAAMqB,YAAc,QACpBrB,EAAMsB,QAAU,E,UCChB,SAASd,EAAEP,GACTA,EAAME,UAAUK,EAAIP,EAAME,UAAUC,OAAO,QAAS,CAClDS,QAAS,CACPP,QACE,sEACFiB,QAAQ,GAEVT,OAAQ,CAENR,QAAS,sCACTiB,QAAQ,GAEV,aAAc,CACZjB,QACE,mFACFY,YAAY,GAEdF,QACE,oVACFQ,SAAU,wBACVP,OACE,oHACFQ,SAAU,oDAEZxB,EAAME,UAAUE,aAAa,IAAK,SAAU,CAC1CqB,KAAM,CAEJpB,QAAS,2CACTiB,QAAQ,KAGZtB,EAAME,UAAUE,aAAa,IAAK,SAAU,CAC1CsB,MAAO,CAGLrB,QACE,4FACFY,YAAY,EACZK,QAAQ,EACRb,MAAO,WACPH,OAAQ,CACNO,OAAQ,CACN,CAEER,QAAS,2BACTY,YAAY,GAEdjB,EAAME,UAAUK,EAAU,QAE5BkB,KAAMzB,EAAME,UAAUK,EAAQ,KAC9BK,QAASZ,EAAME,UAAUK,EAAW,QACpC,aAAc,CACZ,CACEF,QAAS,+BACTY,YAAY,GAEd,CACEZ,QAAS,+BACTY,YAAY,EACZR,MAAO,aAIXkB,UAAW,CACTtB,QAAS,gBACTY,YAAY,EACZR,MAAO,WAET,iBAAkB,KAClBC,YAAa,kBACbkB,WAAY,CACVvB,QAAS,YACTC,OAAQN,EAAME,UAAUK,OAKhCP,EAAME,UAAUE,aAAa,IAAK,WAAY,CAE5CyB,SACE,sIAEG7B,EAAME,UAAUK,EAAW,OACpC,CAtFAW,EAAOC,QAAUZ,EACjBA,EAAEa,YAAc,IAChBb,EAAEc,QAAU,E","sources":["../node_modules/refractor/lang/bison.js","../node_modules/refractor/lang/c.js"],"sourcesContent":["'use strict'\nvar refractorC = require('./c.js')\nmodule.exports = bison\nbison.displayName = 'bison'\nbison.aliases = []\nfunction bison(Prism) {\n  Prism.register(refractorC)\n  Prism.languages.bison = Prism.languages.extend('c', {})\n  Prism.languages.insertBefore('bison', 'comment', {\n    bison: {\n      // This should match all the beginning of the file\n      // including the prologue(s), the bison declarations and\n      // the grammar rules.\n      pattern: /^(?:[^%]|%(?!%))*%%[\\s\\S]*?%%/,\n      inside: {\n        c: {\n          // Allow for one level of nested braces\n          pattern: /%\\{[\\s\\S]*?%\\}|\\{(?:\\{[^}]*\\}|[^{}])*\\}/,\n          inside: {\n            delimiter: {\n              pattern: /^%?\\{|%?\\}$/,\n              alias: 'punctuation'\n            },\n            'bison-variable': {\n              pattern: /[$@](?:<[^\\s>]+>)?[\\w$]+/,\n              alias: 'variable',\n              inside: {\n                punctuation: /<|>/\n              }\n            },\n            rest: Prism.languages.c\n          }\n        },\n        comment: Prism.languages.c.comment,\n        string: Prism.languages.c.string,\n        property: /\\S+(?=:)/,\n        keyword: /%\\w+/,\n        number: {\n          pattern: /(^|[^@])\\b(?:0x[\\da-f]+|\\d+)/i,\n          lookbehind: true\n        },\n        punctuation: /%[%?]|[|:;\\[\\]<>]/\n      }\n    }\n  })\n}\n","'use strict'\n\nmodule.exports = c\nc.displayName = 'c'\nc.aliases = []\nfunction c(Prism) {\n  Prism.languages.c = Prism.languages.extend('clike', {\n    comment: {\n      pattern:\n        /\\/\\/(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n?|\\n|(?![\\r\\n])))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n      greedy: true\n    },\n    string: {\n      // https://en.cppreference.com/w/c/language/string_literal\n      pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n      greedy: true\n    },\n    'class-name': {\n      pattern:\n        /(\\b(?:enum|struct)\\s+(?:__attribute__\\s*\\(\\([\\s\\S]*?\\)\\)\\s*)?)\\w+|\\b[a-z]\\w*_t\\b/,\n      lookbehind: true\n    },\n    keyword:\n      /\\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|__attribute__|asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|inline|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|typeof|union|unsigned|void|volatile|while)\\b/,\n    function: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n    number:\n      /(?:\\b0x(?:[\\da-f]+(?:\\.[\\da-f]*)?|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]{0,4}/i,\n    operator: />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?/\n  })\n  Prism.languages.insertBefore('c', 'string', {\n    char: {\n      // https://en.cppreference.com/w/c/language/character_constant\n      pattern: /'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n]){0,32}'/,\n      greedy: true\n    }\n  })\n  Prism.languages.insertBefore('c', 'string', {\n    macro: {\n      // allow for multiline macro definitions\n      // spaces after the # character compile fine with gcc\n      pattern:\n        /(^[\\t ]*)#\\s*[a-z](?:[^\\r\\n\\\\/]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\\\\(?:\\r\\n|[\\s\\S]))*/im,\n      lookbehind: true,\n      greedy: true,\n      alias: 'property',\n      inside: {\n        string: [\n          {\n            // highlight the path of the include statement as a string\n            pattern: /^(#\\s*include\\s*)<[^>]+>/,\n            lookbehind: true\n          },\n          Prism.languages.c['string']\n        ],\n        char: Prism.languages.c['char'],\n        comment: Prism.languages.c['comment'],\n        'macro-name': [\n          {\n            pattern: /(^#\\s*define\\s+)\\w+\\b(?!\\()/i,\n            lookbehind: true\n          },\n          {\n            pattern: /(^#\\s*define\\s+)\\w+\\b(?=\\()/i,\n            lookbehind: true,\n            alias: 'function'\n          }\n        ],\n        // highlight macro directives as keywords\n        directive: {\n          pattern: /^(#\\s*)[a-z]+/,\n          lookbehind: true,\n          alias: 'keyword'\n        },\n        'directive-hash': /^#/,\n        punctuation: /##|\\\\(?=[\\r\\n])/,\n        expression: {\n          pattern: /\\S[\\s\\S]*/,\n          inside: Prism.languages.c\n        }\n      }\n    }\n  })\n  Prism.languages.insertBefore('c', 'function', {\n    // highlight predefined macros as constants\n    constant:\n      /\\b(?:EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|__DATE__|__FILE__|__LINE__|__TIMESTAMP__|__TIME__|__func__|stderr|stdin|stdout)\\b/\n  })\n  delete Prism.languages.c['boolean']\n}\n"],"names":["refractorC","require","bison","Prism","register","languages","extend","insertBefore","pattern","inside","c","delimiter","alias","punctuation","rest","comment","string","property","keyword","number","lookbehind","module","exports","displayName","aliases","greedy","function","operator","char","macro","directive","expression","constant"],"sourceRoot":""}