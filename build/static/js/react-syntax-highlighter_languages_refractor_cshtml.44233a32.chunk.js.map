{"version":3,"file":"static/js/react-syntax-highlighter_languages_refractor_cshtml.44233a32.chunk.js","mappings":"yFAKA,SAASA,EAAOC,IACb,SAAWA,GAWV,SAASC,EAAQC,EAASC,GACxB,OAAOD,EAAQD,QAAQ,cAAc,SAAUG,EAAGC,GAChD,MAAO,MAAQF,GAAcE,GAAS,GACxC,GACF,CAOA,SAASC,EAAGJ,EAASC,EAAcI,GACjC,OAAOC,OAAOP,EAAQC,EAASC,GAAeI,GAAS,GACzD,CAQA,SAASE,EAAOP,EAASQ,GACvB,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAWC,IAC7BT,EAAUA,EAAQD,QAAQ,aAAa,WACrC,MAAO,MAAQC,EAAU,GAC3B,IAEF,OAAOA,EAAQD,QAAQ,YAAa,YACtC,CACA,IAAIW,EAEI,4GAFJA,EAIe,qCAJfA,EAQA,2NARAA,EAWA,uXAEJ,SAASC,EAAkBC,GACzB,MAAO,SAAWA,EAAMC,OAAOd,QAAQ,KAAM,KAAO,MACtD,CACA,IAAIe,EAA0BH,EAC5BD,GAEEK,EAAWT,OACbK,EACED,EACE,IACAA,EACA,IACAA,EACA,IACAA,IAGFM,EAAkBL,EACpBD,EACE,IACAA,EACA,IACAA,GAEAO,EAAwBN,EAC1BD,EACE,IACAA,EACA,IACAA,GAEAQ,EAAUX,EAAO,mCAAmCY,OAAQ,GAC5DC,EAAcb,EAAO,0BAA0BY,OAAQ,GACvDE,EAAO,qBAAqBF,OAC5BG,EAAcvB,EAAQ,qBAAqBoB,OAAQ,CAACE,EAAMH,IAC1DK,EAAaxB,EAAQ,mCAAmCoB,OAAQ,CAClEH,EACAM,IAEEE,EAAQ,mBAAmBL,OAC3BM,EAA6B1B,EAC/B,yCAAyCoB,OACzC,CAACI,EAAYC,IAEXE,EAAe3B,EACjB,2CAA2CoB,OAC3C,CAACD,EAASE,EAAaI,IAErBG,EAAQ5B,EAAQ,yBAAyBoB,OAAQ,CAACO,IAClDE,EAAiB7B,EACnB,mDAAmDoB,OACnD,CAACQ,EAAOJ,EAAYC,IAElBK,EAAa,CACfC,QAASf,EACTgB,YAAa,iBAIXC,EAAY,8CAA8Cb,OAC1Dc,EAAgB,wBAAwBd,OACxCe,EAAiB,kCAAkCf,OACvDrB,EAAMqC,UAAUtC,OAASC,EAAMqC,UAAUC,OAAO,QAAS,CACvDC,OAAQ,CACN,CACErC,QAASI,EAAG,kBAAkBe,OAAQ,CAACe,IACvCI,YAAY,EACZC,QAAQ,GAEV,CACEvC,QAASI,EAAG,mBAAmBe,OAAQ,CAACc,IACxCK,YAAY,EACZC,QAAQ,IAGZ,aAAc,CACZ,CAGEvC,QAASI,EAAG,qCAAqCe,OAAQ,CACvDI,IAEFe,YAAY,EACZE,OAAQX,GAEV,CAGE7B,QAASI,EAAG,wCAAwCe,OAAQ,CAC1DE,EACAO,IAEFU,YAAY,EACZE,OAAQX,GAEV,CAGE7B,QAASI,EAAG,4BAA4Be,OAAQ,CAACE,IACjDiB,YAAY,GAEd,CAIEtC,QAASI,EAAG,oBAAoBe,OAAQ,CACtCL,EACAQ,IAEFgB,YAAY,EACZE,OAAQX,GAEV,CAIE7B,QAASI,EAAG,yBAAyBe,OAAQ,CAACI,IAC9Ce,YAAY,EACZE,OAAQX,GAEV,CAGE7B,QAASI,EAAG,oBAAoBe,OAAQ,CAACE,IACzCiB,YAAY,GAEd,CAIEtC,QAASI,EAAG,mCAAmCe,OAAQ,CACrDM,IAEFa,YAAY,EACZE,OAAQX,GAEV,CAGE7B,QAASI,EACP,2EACGe,OACH,CAACS,EAAgBX,EAAuBI,IAE1CmB,OAAQX,IAGZC,QAASf,EAET0B,OACE,kJACFC,SAAU,uDACVX,YAAa,2BAEfjC,EAAMqC,UAAUQ,aAAa,SAAU,SAAU,CAC/CC,MAAO,CACL5C,QAAS,OACT6C,MAAO,cAGX/C,EAAMqC,UAAUQ,aAAa,SAAU,cAAe,CACpD,kBAAmB,CACjB3C,QAASI,EAAG,yBAAyBe,OAAQ,CAACE,IAC9CiB,YAAY,EACZO,MAAO,iBAGX/C,EAAMqC,UAAUQ,aAAa,SAAU,aAAc,CACnDG,UAAW,CAGT9C,QAASI,EACP,+DAA+De,OAC/D,CAACE,IAEHiB,YAAY,EACZE,OAAQ,CACNT,YAAa,OAGjB,kBAAmB,CAEjB/B,QAASI,EACP,kFACGe,OACH,CAACC,IAEHkB,YAAY,EACZO,MAAO,aACPL,OAAQX,GAEV,cAAe,CAIb7B,QAASI,EACP,+DAA+De,OAC/D,CAACS,EAAgBL,IAEnBiB,OAAQX,EACRgB,MAAO,cAET,yBAA0B,CAExB7C,QAASI,EAAG,8BAA8Be,OAAQ,CAACS,IACnDU,YAAY,EACZE,OAAQX,EACRgB,MAAO,cAQT,iBAAkB,CAEhB7C,QAASI,EAAG,yBAAyBe,OAAQ,CAACE,EAAMH,IACpDsB,OAAQ,CACNO,SAAU3C,EAAG,SAASe,OAAQ,CAACE,IAC/BH,QAAS,CACPlB,QAASM,OAAOY,GAChB2B,MAAO,aACPL,OAAQX,KAId,YAAa,CAIX7B,QAASI,EACP,kKACGe,OACH,CACEL,EACAQ,EACAD,EACAO,EACAb,EAASI,OACTC,EACA,kBAAkBD,SAGtBmB,YAAY,EACZE,OAAQ,CACN,mBAAoB,CAClBxC,QAASI,EAAG,+BAA+Be,OAAQ,CACjDG,EACAF,IAEFkB,YAAY,EACZC,QAAQ,EACRC,OAAQ1C,EAAMqC,UAAUtC,QAE1BiC,QAASf,EACT,aAAc,CACZf,QAASM,OAAOsB,GAChBW,QAAQ,EACRC,OAAQX,GAEVE,YAAa,UAGjBiB,aAAc,CACZhD,QAAS,gBACTsC,YAAY,EACZO,MAAO,WACPL,OAAQ,CAENS,UAAW,CACTjD,QACE,iGACFsC,YAAY,EACZO,MAAO,eAKf,IAAIK,EAA2BjB,EAAgB,IAAMD,EACjDmB,EAAkCpD,EACpC,iEAAiEoB,OACjE,CAAC+B,IAECE,EAAkB7C,EACpBR,EAAQ,+BAA+BoB,OAAQ,CAC7CgC,IAEF,GAEEE,EACF,wEACGlC,OACDmC,EAAOvD,EAAQ,0BAA0BoB,OAAQ,CACnDI,EACA6B,IAEFtD,EAAMqC,UAAUQ,aAAa,SAAU,aAAc,CACnDY,UAAW,CAGTvD,QAASI,EACP,6EACGe,OACH,CAACkC,EAAYC,IAEfhB,YAAY,EACZC,QAAQ,EACRC,OAAQ,CACNgB,OAAQ,CACNxD,QAASI,EAAG,iBAAiBe,OAAQ,CAACkC,IACtCR,MAAO,WAET,sBAAuB,CACrB7C,QAASI,EAAG,aAAae,OAAQ,CAACiC,IAClCZ,OAAQ1C,EAAMqC,UAAUtC,QAE1B,aAAc,CACZG,QAASM,OAAOiB,GAChBiB,OAAQ,CACNT,YAAa,OAGjBA,YAAa,WAInB,IAAI0B,EAAe,aAAatC,OAC5BuC,EAAsBnD,EACxBR,EAAQ,+BAA+BoB,OAAQ,CAC7CgC,IAEF,GAEEQ,EAAiB5D,EAAQ,qCAAqCoB,OAAQ,CACxEuC,EACAD,IAEEG,EAAsBrD,EACxBR,EACE,mEACGoB,OACH,CAAC+B,IAEH,GAEEW,EAAiB9D,EAAQ,qCAAqCoB,OAAQ,CACxEyC,EACAH,IAEF,SAASK,EAA0BC,EAAeC,GAChD,MAAO,CACLD,cAAe,CACb/D,QAASI,EAAG,6BAA6Be,OAAQ,CAAC4C,IAClDzB,YAAY,EACZE,OAAQ,CACN,gBAAiB,CACfxC,QAASI,EAAG,sCAAsCe,OAAQ,CACxD6C,EACAP,IAEFnB,YAAY,EACZE,OAAQ,CACNT,YAAa,OAGjBA,YAAa,UACbkC,WAAY,CACVjE,QAAS,UACT6C,MAAO,kBACPL,OAAQ1C,EAAMqC,UAAUtC,UAI9BwC,OAAQ,UAEZ,CACAvC,EAAMqC,UAAUQ,aAAa,SAAU,SAAU,CAC/C,uBAAwB,CACtB,CACE3C,QAASI,EACP,4DAA4De,OAC5D,CAACwC,IAEHrB,YAAY,EACZC,QAAQ,EACRC,OAAQsB,EAA0BH,EAAgBD,IAEpD,CACE1D,QAASI,EAAG,4CAA4Ce,OAAQ,CAC9D0C,IAEFvB,YAAY,EACZC,QAAQ,EACRC,OAAQsB,EAA0BD,EAAgBD,KAGtDM,KAAM,CACJlE,QAASM,OAAO0B,GAChBO,QAAQ,KAGZzC,EAAMqC,UAAUgC,OAASrE,EAAMqC,UAAUiC,GAAKtE,EAAMqC,UAAUtC,MAC/D,CAxcA,CAwcEC,EACL,CA7cAuE,EAAOC,QAAUzE,EACjBA,EAAO0E,YAAc,SACrB1E,EAAO2E,QAAU,CAAC,SAAU,K,iBCH5B,IAAIC,EAAkBC,EAAQ,MAI9B,SAASC,EAAO7E,GACdA,EAAM8E,SAASH,GAId,SAAW3E,GACV,IAAI+E,EAAc,0DACf1D,OACC2D,EACF,+DAA+D3D,OAC/D,IACA,iEAAiEA,OAQnE,SAASZ,EAAOP,EAASQ,GACvB,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAWC,IAC7BT,EAAUA,EAAQD,QAAQ,WAAW,WACnC,MAAO,MAAQC,EAAU,GAC3B,IAEF,OAAOA,EACJD,QAAQ,UAAW,aACnBA,QAAQ,SAAU,MAAQ+E,EAAa,KACvC/E,QAAQ,aAAc,MAAQ8E,EAAc,IACjD,CACA,IAAIE,EAAQxE,EAAO,4CAA4CY,OAAQ,GACnE6D,EAASzE,EAAO,8CAA8CY,OAAQ,GACtE8D,EAAQ1E,EAAO,4CAA4CY,OAAQ,GACnE+D,EAAQ3E,EAAO,0CAA0CY,OAAQ,GAWjEgE,EACF,yFACGhE,OACDiE,EAAa,sBAAsBjE,OAASgE,EAAW,UAAUhE,OACjEkE,EACF,OAAOlE,OACP,MACA,oBAAoBA,OACpBgE,EACA,OAAOhE,OACP,MACC,OAAOA,OACN,IAEA,eAAeA,OACfiE,EACA,IACA7E,EAEE,MAAMY,OACJgE,EACA,OAAOhE,OACP,MACC,OAAOA,OACN,IAEA,eAAeA,OACfiE,EARJ,YAYE,YAAYjE,OACd,GAEJ,KACA,YAAYA,OACZ,IACA,IAAIA,OACJiE,EACA,IAQFtF,EAAMqC,UAAUwC,OAAS7E,EAAMqC,UAAUC,OAAO,SAAU,CAAC,GAC3D,IAcIgC,EAAK,CACPpE,QAAS,YACT6C,MAAO,kBACPL,OAjBmB1C,EAAMqC,UAAUQ,aACnC,SACA,SACA,CACE2C,KAAM,CACJtF,QAASM,OAAO+E,GAChB9C,QAAQ,EACRC,OAAQ1C,EAAMqC,UAAUwC,SAG5B,CACE9E,OAAQC,EAAMqC,UAAUC,OAAO,SAAU,CAAC,MAQ9CtC,EAAMqC,UAAUQ,aAAa,SAAU,SAAU,CAC/C,gBAAiB,CACf3C,QAAS,iBACTuC,QAAQ,EACRM,MAAO,WAET0C,MAAO,CACLvF,QAASM,OACP,YAAYa,OACV,MACA,CAEE8D,EACA,wBAAwB9D,OAAS8D,EACjC,6CAA6C9D,OAC3C4D,EACA,MAAM5D,OACN8D,EACF,QAAQ9D,OACN8D,EACA,cAAc9D,OACd4D,EACA,YAAY5D,OACd,SAASA,OACP8D,EACA,cAAc9D,OACd4D,EACA,MAAM5D,OACN8D,EACA,gBAAgB9D,OAChB8D,EACF,QAAQ9D,OACN4D,EACA,MAAM5D,OACN8D,EACA,MACA,UAAU9D,OACV,MACA,WAAWA,OACX4D,EACA,KACA,MAAM5D,OACN8D,EACA,MACFO,KAAK,KACP,KAEJlD,YAAY,EACZC,QAAQ,EACRC,OAAQ,CACNV,QAAS,QACTjC,OAAQuE,IAGZnB,UAAW,CACTjD,QACE,wKACFsC,YAAY,EACZC,QAAQ,EACRC,OAAQ,CACNV,QAAS,QACTjC,OAAQuE,IAGZqB,MAAO,CACLzF,QAASM,OACP,YAAYa,OACV,kBAAkBA,OAClB,MACA,QAAQA,OACR,IACA4D,EALF,OAQE,eAAe5D,OACf,IACA4D,EACA,IACAC,EACA,IACAE,EACAH,EACA,MAEJzC,YAAY,EACZC,QAAQ,EACRM,MAAO,WACPL,OAAQ,CACNV,QAAS,KACTjC,OAAQuE,IAGZ,oBAAqB,CACnBpE,QAAS,iBACTsC,YAAY,EACZO,MAAO,cAGX/C,EAAMqC,UAAUuD,MAAQ5F,EAAMqC,UAAUwC,MACzC,CA7MA,CA6ME7E,EACL,CAtNAuE,EAAOC,QAAUK,EACjBA,EAAOJ,YAAc,SACrBI,EAAOH,QAAU,CAAC,Q","sources":["../node_modules/refractor/lang/csharp.js","../node_modules/refractor/lang/cshtml.js"],"sourcesContent":["'use strict'\n\nmodule.exports = csharp\ncsharp.displayName = 'csharp'\ncsharp.aliases = ['dotnet', 'cs']\nfunction csharp(Prism) {\n  ;(function (Prism) {\n    /**\n     * Replaces all placeholders \"<<n>>\" of given pattern with the n-th replacement (zero based).\n     *\n     * Note: This is a simple text based replacement. Be careful when using backreferences!\n     *\n     * @param {string} pattern the given pattern.\n     * @param {string[]} replacements a list of replacement which can be inserted into the given pattern.\n     * @returns {string} the pattern with all placeholders replaced with their corresponding replacements.\n     * @example replace(/a<<0>>a/.source, [/b+/.source]) === /a(?:b+)a/.source\n     */\n    function replace(pattern, replacements) {\n      return pattern.replace(/<<(\\d+)>>/g, function (m, index) {\n        return '(?:' + replacements[+index] + ')'\n      })\n    }\n    /**\n     * @param {string} pattern\n     * @param {string[]} replacements\n     * @param {string} [flags]\n     * @returns {RegExp}\n     */\n    function re(pattern, replacements, flags) {\n      return RegExp(replace(pattern, replacements), flags || '')\n    }\n    /**\n     * Creates a nested pattern where all occurrences of the string `<<self>>` are replaced with the pattern itself.\n     *\n     * @param {string} pattern\n     * @param {number} depthLog2\n     * @returns {string}\n     */\n    function nested(pattern, depthLog2) {\n      for (var i = 0; i < depthLog2; i++) {\n        pattern = pattern.replace(/<<self>>/g, function () {\n          return '(?:' + pattern + ')'\n        })\n      }\n      return pattern.replace(/<<self>>/g, '[^\\\\s\\\\S]')\n    } // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/\n    var keywordKinds = {\n      // keywords which represent a return or variable type\n      type: 'bool byte char decimal double dynamic float int long object sbyte short string uint ulong ushort var void',\n      // keywords which are used to declare a type\n      typeDeclaration: 'class enum interface record struct',\n      // contextual keywords\n      // (\"var\" and \"dynamic\" are missing because they are used like types)\n      contextual:\n        'add alias and ascending async await by descending from(?=\\\\s*(?:\\\\w|$)) get global group into init(?=\\\\s*;) join let nameof not notnull on or orderby partial remove select set unmanaged value when where with(?=\\\\s*{)',\n      // all other keywords\n      other:\n        'abstract as base break case catch checked const continue default delegate do else event explicit extern finally fixed for foreach goto if implicit in internal is lock namespace new null operator out override params private protected public readonly ref return sealed sizeof stackalloc static switch this throw try typeof unchecked unsafe using virtual volatile while yield'\n    } // keywords\n    function keywordsToPattern(words) {\n      return '\\\\b(?:' + words.trim().replace(/ /g, '|') + ')\\\\b'\n    }\n    var typeDeclarationKeywords = keywordsToPattern(\n      keywordKinds.typeDeclaration\n    )\n    var keywords = RegExp(\n      keywordsToPattern(\n        keywordKinds.type +\n          ' ' +\n          keywordKinds.typeDeclaration +\n          ' ' +\n          keywordKinds.contextual +\n          ' ' +\n          keywordKinds.other\n      )\n    )\n    var nonTypeKeywords = keywordsToPattern(\n      keywordKinds.typeDeclaration +\n        ' ' +\n        keywordKinds.contextual +\n        ' ' +\n        keywordKinds.other\n    )\n    var nonContextualKeywords = keywordsToPattern(\n      keywordKinds.type +\n        ' ' +\n        keywordKinds.typeDeclaration +\n        ' ' +\n        keywordKinds.other\n    ) // types\n    var generic = nested(/<(?:[^<>;=+\\-*/%&|^]|<<self>>)*>/.source, 2) // the idea behind the other forbidden characters is to prevent false positives. Same for tupleElement.\n    var nestedRound = nested(/\\((?:[^()]|<<self>>)*\\)/.source, 2)\n    var name = /@?\\b[A-Za-z_]\\w*\\b/.source\n    var genericName = replace(/<<0>>(?:\\s*<<1>>)?/.source, [name, generic])\n    var identifier = replace(/(?!<<0>>)<<1>>(?:\\s*\\.\\s*<<1>>)*/.source, [\n      nonTypeKeywords,\n      genericName\n    ])\n    var array = /\\[\\s*(?:,\\s*)*\\]/.source\n    var typeExpressionWithoutTuple = replace(\n      /<<0>>(?:\\s*(?:\\?\\s*)?<<1>>)*(?:\\s*\\?)?/.source,\n      [identifier, array]\n    )\n    var tupleElement = replace(\n      /[^,()<>[\\];=+\\-*/%&|^]|<<0>>|<<1>>|<<2>>/.source,\n      [generic, nestedRound, array]\n    )\n    var tuple = replace(/\\(<<0>>+(?:,<<0>>+)+\\)/.source, [tupleElement])\n    var typeExpression = replace(\n      /(?:<<0>>|<<1>>)(?:\\s*(?:\\?\\s*)?<<2>>)*(?:\\s*\\?)?/.source,\n      [tuple, identifier, array]\n    )\n    var typeInside = {\n      keyword: keywords,\n      punctuation: /[<>()?,.:[\\]]/\n    } // strings & characters\n    // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#character-literals\n    // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#string-literals\n    var character = /'(?:[^\\r\\n'\\\\]|\\\\.|\\\\[Uux][\\da-fA-F]{1,8})'/.source // simplified pattern\n    var regularString = /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/.source\n    var verbatimString = /@\"(?:\"\"|\\\\[\\s\\S]|[^\\\\\"])*\"(?!\")/.source\n    Prism.languages.csharp = Prism.languages.extend('clike', {\n      string: [\n        {\n          pattern: re(/(^|[^$\\\\])<<0>>/.source, [verbatimString]),\n          lookbehind: true,\n          greedy: true\n        },\n        {\n          pattern: re(/(^|[^@$\\\\])<<0>>/.source, [regularString]),\n          lookbehind: true,\n          greedy: true\n        }\n      ],\n      'class-name': [\n        {\n          // Using static\n          // using static System.Math;\n          pattern: re(/(\\busing\\s+static\\s+)<<0>>(?=\\s*;)/.source, [\n            identifier\n          ]),\n          lookbehind: true,\n          inside: typeInside\n        },\n        {\n          // Using alias (type)\n          // using Project = PC.MyCompany.Project;\n          pattern: re(/(\\busing\\s+<<0>>\\s*=\\s*)<<1>>(?=\\s*;)/.source, [\n            name,\n            typeExpression\n          ]),\n          lookbehind: true,\n          inside: typeInside\n        },\n        {\n          // Using alias (alias)\n          // using Project = PC.MyCompany.Project;\n          pattern: re(/(\\busing\\s+)<<0>>(?=\\s*=)/.source, [name]),\n          lookbehind: true\n        },\n        {\n          // Type declarations\n          // class Foo<A, B>\n          // interface Foo<out A, B>\n          pattern: re(/(\\b<<0>>\\s+)<<1>>/.source, [\n            typeDeclarationKeywords,\n            genericName\n          ]),\n          lookbehind: true,\n          inside: typeInside\n        },\n        {\n          // Single catch exception declaration\n          // catch(Foo)\n          // (things like catch(Foo e) is covered by variable declaration)\n          pattern: re(/(\\bcatch\\s*\\(\\s*)<<0>>/.source, [identifier]),\n          lookbehind: true,\n          inside: typeInside\n        },\n        {\n          // Name of the type parameter of generic constraints\n          // where Foo : class\n          pattern: re(/(\\bwhere\\s+)<<0>>/.source, [name]),\n          lookbehind: true\n        },\n        {\n          // Casts and checks via as and is.\n          // as Foo<A>, is Bar<B>\n          // (things like if(a is Foo b) is covered by variable declaration)\n          pattern: re(/(\\b(?:is(?:\\s+not)?|as)\\s+)<<0>>/.source, [\n            typeExpressionWithoutTuple\n          ]),\n          lookbehind: true,\n          inside: typeInside\n        },\n        {\n          // Variable, field and parameter declaration\n          // (Foo bar, Bar baz, Foo[,,] bay, Foo<Bar, FooBar<Bar>> bax)\n          pattern: re(\n            /\\b<<0>>(?=\\s+(?!<<1>>|with\\s*\\{)<<2>>(?:\\s*[=,;:{)\\]]|\\s+(?:in|when)\\b))/\n              .source,\n            [typeExpression, nonContextualKeywords, name]\n          ),\n          inside: typeInside\n        }\n      ],\n      keyword: keywords,\n      // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#literals\n      number:\n        /(?:\\b0(?:x[\\da-f_]*[\\da-f]|b[01_]*[01])|(?:\\B\\.\\d+(?:_+\\d+)*|\\b\\d+(?:_+\\d+)*(?:\\.\\d+(?:_+\\d+)*)?)(?:e[-+]?\\d+(?:_+\\d+)*)?)(?:[dflmu]|lu|ul)?\\b/i,\n      operator: />>=?|<<=?|[-=]>|([-+&|])\\1|~|\\?\\?=?|[-+*/%&|^!=<>]=?/,\n      punctuation: /\\?\\.?|::|[{}[\\];(),.:]/\n    })\n    Prism.languages.insertBefore('csharp', 'number', {\n      range: {\n        pattern: /\\.\\./,\n        alias: 'operator'\n      }\n    })\n    Prism.languages.insertBefore('csharp', 'punctuation', {\n      'named-parameter': {\n        pattern: re(/([(,]\\s*)<<0>>(?=\\s*:)/.source, [name]),\n        lookbehind: true,\n        alias: 'punctuation'\n      }\n    })\n    Prism.languages.insertBefore('csharp', 'class-name', {\n      namespace: {\n        // namespace Foo.Bar {}\n        // using Foo.Bar;\n        pattern: re(\n          /(\\b(?:namespace|using)\\s+)<<0>>(?:\\s*\\.\\s*<<0>>)*(?=\\s*[;{])/.source,\n          [name]\n        ),\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      'type-expression': {\n        // default(Foo), typeof(Foo<Bar>), sizeof(int)\n        pattern: re(\n          /(\\b(?:default|sizeof|typeof)\\s*\\(\\s*(?!\\s))(?:[^()\\s]|\\s(?!\\s)|<<0>>)*(?=\\s*\\))/\n            .source,\n          [nestedRound]\n        ),\n        lookbehind: true,\n        alias: 'class-name',\n        inside: typeInside\n      },\n      'return-type': {\n        // Foo<Bar> ForBar(); Foo IFoo.Bar() => 0\n        // int this[int index] => 0; T IReadOnlyList<T>.this[int index] => this[index];\n        // int Foo => 0; int Foo { get; set } = 0;\n        pattern: re(\n          /<<0>>(?=\\s+(?:<<1>>\\s*(?:=>|[({]|\\.\\s*this\\s*\\[)|this\\s*\\[))/.source,\n          [typeExpression, identifier]\n        ),\n        inside: typeInside,\n        alias: 'class-name'\n      },\n      'constructor-invocation': {\n        // new List<Foo<Bar[]>> { }\n        pattern: re(/(\\bnew\\s+)<<0>>(?=\\s*[[({])/.source, [typeExpression]),\n        lookbehind: true,\n        inside: typeInside,\n        alias: 'class-name'\n      },\n      /*'explicit-implementation': {\n// int IFoo<Foo>.Bar => 0; void IFoo<Foo<Foo>>.Foo<T>();\npattern: replace(/\\b<<0>>(?=\\.<<1>>)/, className, methodOrPropertyDeclaration),\ninside: classNameInside,\nalias: 'class-name'\n},*/\n      'generic-method': {\n        // foo<Bar>()\n        pattern: re(/<<0>>\\s*<<1>>(?=\\s*\\()/.source, [name, generic]),\n        inside: {\n          function: re(/^<<0>>/.source, [name]),\n          generic: {\n            pattern: RegExp(generic),\n            alias: 'class-name',\n            inside: typeInside\n          }\n        }\n      },\n      'type-list': {\n        // The list of types inherited or of generic constraints\n        // class Foo<F> : Bar, IList<FooBar>\n        // where F : Bar, IList<int>\n        pattern: re(\n          /\\b((?:<<0>>\\s+<<1>>|record\\s+<<1>>\\s*<<5>>|where\\s+<<2>>)\\s*:\\s*)(?:<<3>>|<<4>>|<<1>>\\s*<<5>>|<<6>>)(?:\\s*,\\s*(?:<<3>>|<<4>>|<<6>>))*(?=\\s*(?:where|[{;]|=>|$))/\n            .source,\n          [\n            typeDeclarationKeywords,\n            genericName,\n            name,\n            typeExpression,\n            keywords.source,\n            nestedRound,\n            /\\bnew\\s*\\(\\s*\\)/.source\n          ]\n        ),\n        lookbehind: true,\n        inside: {\n          'record-arguments': {\n            pattern: re(/(^(?!new\\s*\\()<<0>>\\s*)<<1>>/.source, [\n              genericName,\n              nestedRound\n            ]),\n            lookbehind: true,\n            greedy: true,\n            inside: Prism.languages.csharp\n          },\n          keyword: keywords,\n          'class-name': {\n            pattern: RegExp(typeExpression),\n            greedy: true,\n            inside: typeInside\n          },\n          punctuation: /[,()]/\n        }\n      },\n      preprocessor: {\n        pattern: /(^[\\t ]*)#.*/m,\n        lookbehind: true,\n        alias: 'property',\n        inside: {\n          // highlight preprocessor directives as keywords\n          directive: {\n            pattern:\n              /(#)\\b(?:define|elif|else|endif|endregion|error|if|line|nullable|pragma|region|undef|warning)\\b/,\n            lookbehind: true,\n            alias: 'keyword'\n          }\n        }\n      }\n    }) // attributes\n    var regularStringOrCharacter = regularString + '|' + character\n    var regularStringCharacterOrComment = replace(\n      /\\/(?![*/])|\\/\\/[^\\r\\n]*[\\r\\n]|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|<<0>>/.source,\n      [regularStringOrCharacter]\n    )\n    var roundExpression = nested(\n      replace(/[^\"'/()]|<<0>>|\\(<<self>>*\\)/.source, [\n        regularStringCharacterOrComment\n      ]),\n      2\n    ) // https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/attributes/#attribute-targets\n    var attrTarget =\n      /\\b(?:assembly|event|field|method|module|param|property|return|type)\\b/\n        .source\n    var attr = replace(/<<0>>(?:\\s*\\(<<1>>*\\))?/.source, [\n      identifier,\n      roundExpression\n    ])\n    Prism.languages.insertBefore('csharp', 'class-name', {\n      attribute: {\n        // Attributes\n        // [Foo], [Foo(1), Bar(2, Prop = \"foo\")], [return: Foo(1), Bar(2)], [assembly: Foo(Bar)]\n        pattern: re(\n          /((?:^|[^\\s\\w>)?])\\s*\\[\\s*)(?:<<0>>\\s*:\\s*)?<<1>>(?:\\s*,\\s*<<1>>)*(?=\\s*\\])/\n            .source,\n          [attrTarget, attr]\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          target: {\n            pattern: re(/^<<0>>(?=\\s*:)/.source, [attrTarget]),\n            alias: 'keyword'\n          },\n          'attribute-arguments': {\n            pattern: re(/\\(<<0>>*\\)/.source, [roundExpression]),\n            inside: Prism.languages.csharp\n          },\n          'class-name': {\n            pattern: RegExp(identifier),\n            inside: {\n              punctuation: /\\./\n            }\n          },\n          punctuation: /[:,]/\n        }\n      }\n    }) // string interpolation\n    var formatString = /:[^}\\r\\n]+/.source // multi line\n    var mInterpolationRound = nested(\n      replace(/[^\"'/()]|<<0>>|\\(<<self>>*\\)/.source, [\n        regularStringCharacterOrComment\n      ]),\n      2\n    )\n    var mInterpolation = replace(/\\{(?!\\{)(?:(?![}:])<<0>>)*<<1>>?\\}/.source, [\n      mInterpolationRound,\n      formatString\n    ]) // single line\n    var sInterpolationRound = nested(\n      replace(\n        /[^\"'/()]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|<<0>>|\\(<<self>>*\\)/\n          .source,\n        [regularStringOrCharacter]\n      ),\n      2\n    )\n    var sInterpolation = replace(/\\{(?!\\{)(?:(?![}:])<<0>>)*<<1>>?\\}/.source, [\n      sInterpolationRound,\n      formatString\n    ])\n    function createInterpolationInside(interpolation, interpolationRound) {\n      return {\n        interpolation: {\n          pattern: re(/((?:^|[^{])(?:\\{\\{)*)<<0>>/.source, [interpolation]),\n          lookbehind: true,\n          inside: {\n            'format-string': {\n              pattern: re(/(^\\{(?:(?![}:])<<0>>)*)<<1>>(?=\\}$)/.source, [\n                interpolationRound,\n                formatString\n              ]),\n              lookbehind: true,\n              inside: {\n                punctuation: /^:/\n              }\n            },\n            punctuation: /^\\{|\\}$/,\n            expression: {\n              pattern: /[\\s\\S]+/,\n              alias: 'language-csharp',\n              inside: Prism.languages.csharp\n            }\n          }\n        },\n        string: /[\\s\\S]+/\n      }\n    }\n    Prism.languages.insertBefore('csharp', 'string', {\n      'interpolation-string': [\n        {\n          pattern: re(\n            /(^|[^\\\\])(?:\\$@|@\\$)\"(?:\"\"|\\\\[\\s\\S]|\\{\\{|<<0>>|[^\\\\{\"])*\"/.source,\n            [mInterpolation]\n          ),\n          lookbehind: true,\n          greedy: true,\n          inside: createInterpolationInside(mInterpolation, mInterpolationRound)\n        },\n        {\n          pattern: re(/(^|[^@\\\\])\\$\"(?:\\\\.|\\{\\{|<<0>>|[^\\\\\"{])*\"/.source, [\n            sInterpolation\n          ]),\n          lookbehind: true,\n          greedy: true,\n          inside: createInterpolationInside(sInterpolation, sInterpolationRound)\n        }\n      ],\n      char: {\n        pattern: RegExp(character),\n        greedy: true\n      }\n    })\n    Prism.languages.dotnet = Prism.languages.cs = Prism.languages.csharp\n  })(Prism)\n}\n","'use strict'\nvar refractorCsharp = require('./csharp.js')\nmodule.exports = cshtml\ncshtml.displayName = 'cshtml'\ncshtml.aliases = ['razor']\nfunction cshtml(Prism) {\n  Prism.register(refractorCsharp)\n  // Docs:\n  // https://docs.microsoft.com/en-us/aspnet/core/razor-pages/?view=aspnetcore-5.0&tabs=visual-studio\n  // https://docs.microsoft.com/en-us/aspnet/core/mvc/views/razor?view=aspnetcore-5.0\n  ;(function (Prism) {\n    var commentLike = /\\/(?![/*])|\\/\\/.*[\\r\\n]|\\/\\*[^*]*(?:\\*(?!\\/)[^*]*)*\\*\\//\n      .source\n    var stringLike =\n      /@(?!\")|\"(?:[^\\r\\n\\\\\"]|\\\\.)*\"|@\"(?:[^\\\\\"]|\"\"|\\\\[\\s\\S])*\"(?!\")/.source +\n      '|' +\n      /'(?:(?:[^\\r\\n'\\\\]|\\\\.|\\\\[Uux][\\da-fA-F]{1,8})'|(?=[^\\\\](?!')))/.source\n    /**\n     * Creates a nested pattern where all occurrences of the string `<<self>>` are replaced with the pattern itself.\n     *\n     * @param {string} pattern\n     * @param {number} depthLog2\n     * @returns {string}\n     */\n    function nested(pattern, depthLog2) {\n      for (var i = 0; i < depthLog2; i++) {\n        pattern = pattern.replace(/<self>/g, function () {\n          return '(?:' + pattern + ')'\n        })\n      }\n      return pattern\n        .replace(/<self>/g, '[^\\\\s\\\\S]')\n        .replace(/<str>/g, '(?:' + stringLike + ')')\n        .replace(/<comment>/g, '(?:' + commentLike + ')')\n    }\n    var round = nested(/\\((?:[^()'\"@/]|<str>|<comment>|<self>)*\\)/.source, 2)\n    var square = nested(/\\[(?:[^\\[\\]'\"@/]|<str>|<comment>|<self>)*\\]/.source, 2)\n    var curly = nested(/\\{(?:[^{}'\"@/]|<str>|<comment>|<self>)*\\}/.source, 2)\n    var angle = nested(/<(?:[^<>'\"@/]|<str>|<comment>|<self>)*>/.source, 2) // Note about the above bracket patterns:\n    // They all ignore HTML expressions that might be in the C# code. This is a problem because HTML (like strings and\n    // comments) is parsed differently. This is a huge problem because HTML might contain brackets and quotes which\n    // messes up the bracket and string counting implemented by the above patterns.\n    //\n    // This problem is not fixable because 1) HTML expression are highly context sensitive and very difficult to detect\n    // and 2) they require one capturing group at every nested level. See the `tagRegion` pattern to admire the\n    // complexity of an HTML expression.\n    //\n    // To somewhat alleviate the problem a bit, the patterns for characters (e.g. 'a') is very permissive, it also\n    // allows invalid characters to support HTML expressions like this: <p>That's it!</p>.\n    var tagAttrs =\n      /(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?/\n        .source\n    var tagContent = /(?!\\d)[^\\s>\\/=$<%]+/.source + tagAttrs + /\\s*\\/?>/.source\n    var tagRegion =\n      /\\B@?/.source +\n      '(?:' +\n      /<([a-zA-Z][\\w:]*)/.source +\n      tagAttrs +\n      /\\s*>/.source +\n      '(?:' +\n      (/[^<]/.source +\n        '|' + // all tags that are not the start tag\n        // eslint-disable-next-line regexp/strict\n        /<\\/?(?!\\1\\b)/.source +\n        tagContent +\n        '|' + // nested start tag\n        nested(\n          // eslint-disable-next-line regexp/strict\n          /<\\1/.source +\n            tagAttrs +\n            /\\s*>/.source +\n            '(?:' +\n            (/[^<]/.source +\n              '|' + // all tags that are not the start tag\n              // eslint-disable-next-line regexp/strict\n              /<\\/?(?!\\1\\b)/.source +\n              tagContent +\n              '|' +\n              '<self>') +\n            ')*' + // eslint-disable-next-line regexp/strict\n            /<\\/\\1\\s*>/.source,\n          2\n        )) +\n      ')*' + // eslint-disable-next-line regexp/strict\n      /<\\/\\1\\s*>/.source +\n      '|' +\n      /</.source +\n      tagContent +\n      ')' // Now for the actual language definition(s):\n    //\n    // Razor as a language has 2 parts:\n    //  1) CSHTML: A markup-like language that has been extended with inline C# code expressions and blocks.\n    //  2) C#+HTML: A variant of C# that can contain CSHTML tags as expressions.\n    //\n    // In the below code, both CSHTML and C#+HTML will be create as separate language definitions that reference each\n    // other. However, only CSHTML will be exported via `Prism.languages`.\n    Prism.languages.cshtml = Prism.languages.extend('markup', {})\n    var csharpWithHtml = Prism.languages.insertBefore(\n      'csharp',\n      'string',\n      {\n        html: {\n          pattern: RegExp(tagRegion),\n          greedy: true,\n          inside: Prism.languages.cshtml\n        }\n      },\n      {\n        csharp: Prism.languages.extend('csharp', {})\n      }\n    )\n    var cs = {\n      pattern: /\\S[\\s\\S]*/,\n      alias: 'language-csharp',\n      inside: csharpWithHtml\n    }\n    Prism.languages.insertBefore('cshtml', 'prolog', {\n      'razor-comment': {\n        pattern: /@\\*[\\s\\S]*?\\*@/,\n        greedy: true,\n        alias: 'comment'\n      },\n      block: {\n        pattern: RegExp(\n          /(^|[^@])@/.source +\n            '(?:' +\n            [\n              // @{ ... }\n              curly, // @code{ ... }\n              /(?:code|functions)\\s*/.source + curly, // @for (...) { ... }\n              /(?:for|foreach|lock|switch|using|while)\\s*/.source +\n                round +\n                /\\s*/.source +\n                curly, // @do { ... } while (...);\n              /do\\s*/.source +\n                curly +\n                /\\s*while\\s*/.source +\n                round +\n                /(?:\\s*;)?/.source, // @try { ... } catch (...) { ... } finally { ... }\n              /try\\s*/.source +\n                curly +\n                /\\s*catch\\s*/.source +\n                round +\n                /\\s*/.source +\n                curly +\n                /\\s*finally\\s*/.source +\n                curly, // @if (...) {...} else if (...) {...} else {...}\n              /if\\s*/.source +\n                round +\n                /\\s*/.source +\n                curly +\n                '(?:' +\n                /\\s*else/.source +\n                '(?:' +\n                /\\s+if\\s*/.source +\n                round +\n                ')?' +\n                /\\s*/.source +\n                curly +\n                ')*'\n            ].join('|') +\n            ')'\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          keyword: /^@\\w*/,\n          csharp: cs\n        }\n      },\n      directive: {\n        pattern:\n          /^([ \\t]*)@(?:addTagHelper|attribute|implements|inherits|inject|layout|model|namespace|page|preservewhitespace|removeTagHelper|section|tagHelperPrefix|using)(?=\\s).*/m,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          keyword: /^@\\w+/,\n          csharp: cs\n        }\n      },\n      value: {\n        pattern: RegExp(\n          /(^|[^@])@/.source +\n            /(?:await\\b\\s*)?/.source +\n            '(?:' +\n            /\\w+\\b/.source +\n            '|' +\n            round +\n            ')' +\n            '(?:' +\n            /[?!]?\\.\\w+\\b/.source +\n            '|' +\n            round +\n            '|' +\n            square +\n            '|' +\n            angle +\n            round +\n            ')*'\n        ),\n        lookbehind: true,\n        greedy: true,\n        alias: 'variable',\n        inside: {\n          keyword: /^@/,\n          csharp: cs\n        }\n      },\n      'delegate-operator': {\n        pattern: /(^|[^@])@(?=<)/,\n        lookbehind: true,\n        alias: 'operator'\n      }\n    })\n    Prism.languages.razor = Prism.languages.cshtml\n  })(Prism)\n}\n"],"names":["csharp","Prism","replace","pattern","replacements","m","index","re","flags","RegExp","nested","depthLog2","i","keywordKinds","keywordsToPattern","words","trim","typeDeclarationKeywords","keywords","nonTypeKeywords","nonContextualKeywords","generic","source","nestedRound","name","genericName","identifier","array","typeExpressionWithoutTuple","tupleElement","tuple","typeExpression","typeInside","keyword","punctuation","character","regularString","verbatimString","languages","extend","string","lookbehind","greedy","inside","number","operator","insertBefore","range","alias","namespace","function","preprocessor","directive","regularStringOrCharacter","regularStringCharacterOrComment","roundExpression","attrTarget","attr","attribute","target","formatString","mInterpolationRound","mInterpolation","sInterpolationRound","sInterpolation","createInterpolationInside","interpolation","interpolationRound","expression","char","dotnet","cs","module","exports","displayName","aliases","refractorCsharp","require","cshtml","register","commentLike","stringLike","round","square","curly","angle","tagAttrs","tagContent","tagRegion","html","block","join","value","razor"],"sourceRoot":""}