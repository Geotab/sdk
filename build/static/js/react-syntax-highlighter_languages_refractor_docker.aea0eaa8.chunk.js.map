{"version":3,"file":"static/js/react-syntax-highlighter_languages_refractor_docker.aea0eaa8.chunk.js","mappings":"oFAKA,SAASA,EAAOC,IACb,SAAWA,GAGV,IAAIC,EACF,sDAAsDC,OACpDC,EAAQ,0CAA0CD,OAAOE,QAC3D,YACA,WACE,OAAOH,CACT,IAEEI,EACF,0EACGH,OACDI,EAAS,8CAA8CJ,OAAOE,QAChE,UACA,WACE,OAAOC,CACT,IAEEE,EAAa,CACfC,QAASC,OAAOJ,GAChBK,QAAQ,GAENC,EAAc,CAChBH,QAAS,gBACTI,YAAY,EACZF,QAAQ,GAOV,SAASG,EAAGX,EAAQY,GAQlB,OAPAZ,EAASA,EACNE,QAAQ,UAAU,WACjB,OAAOE,CACT,IACCF,QAAQ,SAAS,WAChB,OAAOD,CACT,IACKM,OAAOP,EAAQY,EACxB,CACAd,EAAMe,UAAUhB,OAAS,CACvBiB,YAAa,CACXR,QACE,kNACFI,YAAY,EACZF,QAAQ,EACRO,OAAQ,CACNC,QAAS,CACPV,QAASK,EACP,gDAAgDX,OAChD,KAEFU,YAAY,EACZF,QAAQ,EACRO,OAAQ,CACNE,SAAU,CACRX,QAAS,iBACTI,YAAY,GAEdP,OAAQ,CACNE,EACA,CACEC,QAAS,8BACTI,YAAY,IAGhBQ,SAAU,OACVC,YAAa,MAGjBC,QAAS,CACP,CAEEd,QAASK,EACP,iEACGX,OACH,KAEFU,YAAY,EACZF,QAAQ,GAEV,CAEEF,QAASK,EACP,iEACGX,OACH,KAEFU,YAAY,EACZF,QAAQ,GAEV,CAEEF,QAASK,EAAG,oBAAoBX,OAAQ,KACxCU,YAAY,EACZF,QAAQ,GAEV,CACEF,QAAS,OACTE,QAAQ,IAGZa,QAASZ,EACTN,OAAQE,EACRiB,SAAU,2BACVJ,SAAU,SAGdG,QAASZ,GAEXX,EAAMe,UAAUU,WAAazB,EAAMe,UAAUhB,MAC9C,CAnHA,CAmHEC,EACL,CAxHA0B,EAAOC,QAAU5B,EACjBA,EAAO6B,YAAc,SACrB7B,EAAO8B,QAAU,CAAC,a","sources":["../node_modules/refractor/lang/docker.js"],"sourcesContent":["'use strict'\n\nmodule.exports = docker\ndocker.displayName = 'docker'\ndocker.aliases = ['dockerfile']\nfunction docker(Prism) {\n  ;(function (Prism) {\n    // Many of the following regexes will contain negated lookaheads like `[ \\t]+(?![ \\t])`. This is a trick to ensure\n    // that quantifiers behave *atomically*. Atomic quantifiers are necessary to prevent exponential backtracking.\n    var spaceAfterBackSlash =\n      /\\\\[\\r\\n](?:\\s|\\\\[\\r\\n]|#.*(?!.))*(?![\\s#]|\\\\[\\r\\n])/.source // At least one space, comment, or line break\n    var space = /(?:[ \\t]+(?![ \\t])(?:<SP_BS>)?|<SP_BS>)/.source.replace(\n      /<SP_BS>/g,\n      function () {\n        return spaceAfterBackSlash\n      }\n    )\n    var string =\n      /\"(?:[^\"\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\"|'(?:[^'\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*'/\n        .source\n    var option = /--[\\w-]+=(?:<STR>|(?![\"'])(?:[^\\s\\\\]|\\\\.)+)/.source.replace(\n      /<STR>/g,\n      function () {\n        return string\n      }\n    )\n    var stringRule = {\n      pattern: RegExp(string),\n      greedy: true\n    }\n    var commentRule = {\n      pattern: /(^[ \\t]*)#.*/m,\n      lookbehind: true,\n      greedy: true\n    }\n    /**\n     * @param {string} source\n     * @param {string} flags\n     * @returns {RegExp}\n     */\n    function re(source, flags) {\n      source = source\n        .replace(/<OPT>/g, function () {\n          return option\n        })\n        .replace(/<SP>/g, function () {\n          return space\n        })\n      return RegExp(source, flags)\n    }\n    Prism.languages.docker = {\n      instruction: {\n        pattern:\n          /(^[ \\t]*)(?:ADD|ARG|CMD|COPY|ENTRYPOINT|ENV|EXPOSE|FROM|HEALTHCHECK|LABEL|MAINTAINER|ONBUILD|RUN|SHELL|STOPSIGNAL|USER|VOLUME|WORKDIR)(?=\\s)(?:\\\\.|[^\\r\\n\\\\])*(?:\\\\$(?:\\s|#.*$)*(?![\\s#])(?:\\\\.|[^\\r\\n\\\\])*)*/im,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          options: {\n            pattern: re(\n              /(^(?:ONBUILD<SP>)?\\w+<SP>)<OPT>(?:<SP><OPT>)*/.source,\n              'i'\n            ),\n            lookbehind: true,\n            greedy: true,\n            inside: {\n              property: {\n                pattern: /(^|\\s)--[\\w-]+/,\n                lookbehind: true\n              },\n              string: [\n                stringRule,\n                {\n                  pattern: /(=)(?![\"'])(?:[^\\s\\\\]|\\\\.)+/,\n                  lookbehind: true\n                }\n              ],\n              operator: /\\\\$/m,\n              punctuation: /=/\n            }\n          },\n          keyword: [\n            {\n              // https://docs.docker.com/engine/reference/builder/#healthcheck\n              pattern: re(\n                /(^(?:ONBUILD<SP>)?HEALTHCHECK<SP>(?:<OPT><SP>)*)(?:CMD|NONE)\\b/\n                  .source,\n                'i'\n              ),\n              lookbehind: true,\n              greedy: true\n            },\n            {\n              // https://docs.docker.com/engine/reference/builder/#from\n              pattern: re(\n                /(^(?:ONBUILD<SP>)?FROM<SP>(?:<OPT><SP>)*(?!--)[^ \\t\\\\]+<SP>)AS/\n                  .source,\n                'i'\n              ),\n              lookbehind: true,\n              greedy: true\n            },\n            {\n              // https://docs.docker.com/engine/reference/builder/#onbuild\n              pattern: re(/(^ONBUILD<SP>)\\w+/.source, 'i'),\n              lookbehind: true,\n              greedy: true\n            },\n            {\n              pattern: /^\\w+/,\n              greedy: true\n            }\n          ],\n          comment: commentRule,\n          string: stringRule,\n          variable: /\\$(?:\\w+|\\{[^{}\"'\\\\]*\\})/,\n          operator: /\\\\$/m\n        }\n      },\n      comment: commentRule\n    }\n    Prism.languages.dockerfile = Prism.languages.docker\n  })(Prism)\n}\n"],"names":["docker","Prism","spaceAfterBackSlash","source","space","replace","string","option","stringRule","pattern","RegExp","greedy","commentRule","lookbehind","re","flags","languages","instruction","inside","options","property","operator","punctuation","keyword","comment","variable","dockerfile","module","exports","displayName","aliases"],"sourceRoot":""}