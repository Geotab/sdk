{"version":3,"file":"static/js/react-syntax-highlighter_languages_refractor_elixir.02570cf1.chunk.js","mappings":"4FAKA,SAASA,EAAOC,GACdA,EAAMC,UAAUF,OAAS,CACvBG,IAAK,CACHC,QACE,6FACFC,OAAQ,CACNC,UAAW,QACXC,OAAQ,gBAGZC,QAAS,CACPJ,QAAS,MACTK,QAAQ,GAGVC,MAAO,CACLN,QACE,6LACFK,QAAQ,GAEVF,OAAQ,CACN,CAEEH,QACE,iNACFK,QAAQ,EACRJ,OAAQ,CACN,GAGJ,CACED,QAAS,sBACTK,QAAQ,EACRJ,OAAQ,CACN,GAGJ,CAEED,QAAS,gDACTK,QAAQ,EACRJ,OAAQ,CACN,IAINM,KAAM,CAEJP,QAAS,eACTQ,YAAY,EACZC,MAAO,UAETC,OAAQ,CACNV,QAAS,eACTS,MAAO,cAGT,YAAa,iBACbE,SAAU,CAERX,QAAS,eACTQ,YAAY,EACZC,MAAO,YAETP,UAAW,CACTF,QAAS,OACTS,MAAO,YAETG,SAAU,sDACVC,OAAQ,kEACRC,QACE,kNACFC,QAAS,yBACTC,SAAU,CACR,2FACA,CAEEhB,QAAS,eACTQ,YAAY,GAEd,CAEER,QAAS,eACTQ,YAAY,IAGhBS,YAAa,uBAEfpB,EAAMC,UAAUF,OAAOO,OAAOe,SAAQ,SAAUC,GAC9CA,EAAElB,OAAS,CACTmB,cAAe,CACbpB,QAAS,aACTC,OAAQ,CACNoB,UAAW,CACTrB,QAAS,WACTS,MAAO,eAETa,KAAMzB,EAAMC,UAAUF,SAI9B,GACF,CAzGAc,EAAOa,QAAU3B,EACjBA,EAAO4B,YAAc,SACrB5B,EAAO6B,QAAU,E","sources":["../node_modules/refractor/lang/elixir.js"],"sourcesContent":["'use strict'\n\nmodule.exports = elixir\nelixir.displayName = 'elixir'\nelixir.aliases = []\nfunction elixir(Prism) {\n  Prism.languages.elixir = {\n    doc: {\n      pattern:\n        /@(?:doc|moduledoc)\\s+(?:(\"\"\"|''')[\\s\\S]*?\\1|(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\2)[^\\\\\\r\\n])*\\2)/,\n      inside: {\n        attribute: /^@\\w+/,\n        string: /['\"][\\s\\S]+/\n      }\n    },\n    comment: {\n      pattern: /#.*/,\n      greedy: true\n    },\n    // ~r\"\"\"foo\"\"\" (multi-line), ~r'''foo''' (multi-line), ~r/foo/, ~r|foo|, ~r\"foo\", ~r'foo', ~r(foo), ~r[foo], ~r{foo}, ~r<foo>\n    regex: {\n      pattern:\n        /~[rR](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|[^\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[uismxfr]*/,\n      greedy: true\n    },\n    string: [\n      {\n        // ~s\"\"\"foo\"\"\" (multi-line), ~s'''foo''' (multi-line), ~s/foo/, ~s|foo|, ~s\"foo\", ~s'foo', ~s(foo), ~s[foo], ~s{foo} (with interpolation care), ~s<foo>\n        pattern:\n          /~[cCsSwW](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|#\\{[^}]+\\}|#(?!\\{)|[^#\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[csa]?/,\n        greedy: true,\n        inside: {\n          // See interpolation below\n        }\n      },\n      {\n        pattern: /(\"\"\"|''')[\\s\\S]*?\\1/,\n        greedy: true,\n        inside: {\n          // See interpolation below\n        }\n      },\n      {\n        // Multi-line strings are allowed\n        pattern: /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: true,\n        inside: {\n          // See interpolation below\n        }\n      }\n    ],\n    atom: {\n      // Look-behind prevents bad highlighting of the :: operator\n      pattern: /(^|[^:]):\\w+/,\n      lookbehind: true,\n      alias: 'symbol'\n    },\n    module: {\n      pattern: /\\b[A-Z]\\w*\\b/,\n      alias: 'class-name'\n    },\n    // Look-ahead prevents bad highlighting of the :: operator\n    'attr-name': /\\b\\w+\\??:(?!:)/,\n    argument: {\n      // Look-behind prevents bad highlighting of the && operator\n      pattern: /(^|[^&])&\\d+/,\n      lookbehind: true,\n      alias: 'variable'\n    },\n    attribute: {\n      pattern: /@\\w+/,\n      alias: 'variable'\n    },\n    function: /\\b[_a-zA-Z]\\w*[?!]?(?:(?=\\s*(?:\\.\\s*)?\\()|(?=\\/\\d))/,\n    number: /\\b(?:0[box][a-f\\d_]+|\\d[\\d_]*)(?:\\.[\\d_]+)?(?:e[+-]?[\\d_]+)?\\b/i,\n    keyword:\n      /\\b(?:after|alias|and|case|catch|cond|def(?:callback|delegate|exception|impl|macro|module|n|np|p|protocol|struct)?|do|else|end|fn|for|if|import|not|or|quote|raise|require|rescue|try|unless|unquote|use|when)\\b/,\n    boolean: /\\b(?:false|nil|true)\\b/,\n    operator: [\n      /\\bin\\b|&&?|\\|[|>]?|\\\\\\\\|::|\\.\\.\\.?|\\+\\+?|-[->]?|<[-=>]|>=|!==?|\\B!|=(?:==?|[>~])?|[*\\/^]/,\n      {\n        // We don't want to match <<\n        pattern: /([^<])<(?!<)/,\n        lookbehind: true\n      },\n      {\n        // We don't want to match >>\n        pattern: /([^>])>(?!>)/,\n        lookbehind: true\n      }\n    ],\n    punctuation: /<<|>>|[.,%\\[\\]{}()]/\n  }\n  Prism.languages.elixir.string.forEach(function (o) {\n    o.inside = {\n      interpolation: {\n        pattern: /#\\{[^}]+\\}/,\n        inside: {\n          delimiter: {\n            pattern: /^#\\{|\\}$/,\n            alias: 'punctuation'\n          },\n          rest: Prism.languages.elixir\n        }\n      }\n    }\n  })\n}\n"],"names":["elixir","Prism","languages","doc","pattern","inside","attribute","string","comment","greedy","regex","atom","lookbehind","alias","module","argument","function","number","keyword","boolean","operator","punctuation","forEach","o","interpolation","delimiter","rest","exports","displayName","aliases"],"sourceRoot":""}