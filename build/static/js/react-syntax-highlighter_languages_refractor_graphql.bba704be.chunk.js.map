{"version":3,"file":"static/js/react-syntax-highlighter_languages_refractor_graphql.bba704be.chunk.js","mappings":"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","sources":["../node_modules/refractor/lang/graphql.js"],"sourcesContent":["'use strict'\n\nmodule.exports = graphql\ngraphql.displayName = 'graphql'\ngraphql.aliases = []\nfunction graphql(Prism) {\n  Prism.languages.graphql = {\n    comment: /#.*/,\n    description: {\n      pattern:\n        /(?:\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")(?=\\s*[a-z_])/i,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        'language-markdown': {\n          pattern: /(^\"(?:\"\")?)(?!\\1)[\\s\\S]+(?=\\1$)/,\n          lookbehind: true,\n          inside: Prism.languages.markdown\n        }\n      }\n    },\n    string: {\n      pattern: /\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n      greedy: true\n    },\n    number: /(?:\\B-|\\b)\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n    boolean: /\\b(?:false|true)\\b/,\n    variable: /\\$[a-z_]\\w*/i,\n    directive: {\n      pattern: /@[a-z_]\\w*/i,\n      alias: 'function'\n    },\n    'attr-name': {\n      pattern: /\\b[a-z_]\\w*(?=\\s*(?:\\((?:[^()\"]|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")*\\))?:)/i,\n      greedy: true\n    },\n    'atom-input': {\n      pattern: /\\b[A-Z]\\w*Input\\b/,\n      alias: 'class-name'\n    },\n    scalar: /\\b(?:Boolean|Float|ID|Int|String)\\b/,\n    constant: /\\b[A-Z][A-Z_\\d]*\\b/,\n    'class-name': {\n      pattern:\n        /(\\b(?:enum|implements|interface|on|scalar|type|union)\\s+|&\\s*|:\\s*|\\[)[A-Z_]\\w*/,\n      lookbehind: true\n    },\n    fragment: {\n      pattern: /(\\bfragment\\s+|\\.{3}\\s*(?!on\\b))[a-zA-Z_]\\w*/,\n      lookbehind: true,\n      alias: 'function'\n    },\n    'definition-mutation': {\n      pattern: /(\\bmutation\\s+)[a-zA-Z_]\\w*/,\n      lookbehind: true,\n      alias: 'function'\n    },\n    'definition-query': {\n      pattern: /(\\bquery\\s+)[a-zA-Z_]\\w*/,\n      lookbehind: true,\n      alias: 'function'\n    },\n    keyword:\n      /\\b(?:directive|enum|extend|fragment|implements|input|interface|mutation|on|query|repeatable|scalar|schema|subscription|type|union)\\b/,\n    operator: /[!=|&]|\\.{3}/,\n    'property-query': /\\w+(?=\\s*\\()/,\n    object: /\\w+(?=\\s*\\{)/,\n    punctuation: /[!(){}\\[\\]:=,]/,\n    property: /\\w+/\n  }\n  Prism.hooks.add('after-tokenize', function afterTokenizeGraphql(env) {\n    if (env.language !== 'graphql') {\n      return\n    }\n    /**\n     * get the graphql token stream that we want to customize\n     *\n     * @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token\n     * @type {Token[]}\n     */\n    var validTokens = env.tokens.filter(function (token) {\n      return (\n        typeof token !== 'string' &&\n        token.type !== 'comment' &&\n        token.type !== 'scalar'\n      )\n    })\n    var currentIndex = 0\n    /**\n     * Returns whether the token relative to the current index has the given type.\n     *\n     * @param {number} offset\n     * @returns {Token | undefined}\n     */\n    function getToken(offset) {\n      return validTokens[currentIndex + offset]\n    }\n    /**\n     * Returns whether the token relative to the current index has the given type.\n     *\n     * @param {readonly string[]} types\n     * @param {number} [offset=0]\n     * @returns {boolean}\n     */\n    function isTokenType(types, offset) {\n      offset = offset || 0\n      for (var i = 0; i < types.length; i++) {\n        var token = getToken(i + offset)\n        if (!token || token.type !== types[i]) {\n          return false\n        }\n      }\n      return true\n    }\n    /**\n     * Returns the index of the closing bracket to an opening bracket.\n     *\n     * It is assumed that `token[currentIndex - 1]` is an opening bracket.\n     *\n     * If no closing bracket could be found, `-1` will be returned.\n     *\n     * @param {RegExp} open\n     * @param {RegExp} close\n     * @returns {number}\n     */\n    function findClosingBracket(open, close) {\n      var stackHeight = 1\n      for (var i = currentIndex; i < validTokens.length; i++) {\n        var token = validTokens[i]\n        var content = token.content\n        if (token.type === 'punctuation' && typeof content === 'string') {\n          if (open.test(content)) {\n            stackHeight++\n          } else if (close.test(content)) {\n            stackHeight--\n            if (stackHeight === 0) {\n              return i\n            }\n          }\n        }\n      }\n      return -1\n    }\n    /**\n     * Adds an alias to the given token.\n     *\n     * @param {Token} token\n     * @param {string} alias\n     * @returns {void}\n     */\n    function addAlias(token, alias) {\n      var aliases = token.alias\n      if (!aliases) {\n        token.alias = aliases = []\n      } else if (!Array.isArray(aliases)) {\n        token.alias = aliases = [aliases]\n      }\n      aliases.push(alias)\n    }\n    for (; currentIndex < validTokens.length; ) {\n      var startToken = validTokens[currentIndex++] // add special aliases for mutation tokens\n      if (startToken.type === 'keyword' && startToken.content === 'mutation') {\n        // any array of the names of all input variables (if any)\n        var inputVariables = []\n        if (\n          isTokenType(['definition-mutation', 'punctuation']) &&\n          getToken(1).content === '('\n        ) {\n          // definition\n          currentIndex += 2 // skip 'definition-mutation' and 'punctuation'\n          var definitionEnd = findClosingBracket(/^\\($/, /^\\)$/)\n          if (definitionEnd === -1) {\n            continue\n          } // find all input variables\n          for (; currentIndex < definitionEnd; currentIndex++) {\n            var t = getToken(0)\n            if (t.type === 'variable') {\n              addAlias(t, 'variable-input')\n              inputVariables.push(t.content)\n            }\n          }\n          currentIndex = definitionEnd + 1\n        }\n        if (\n          isTokenType(['punctuation', 'property-query']) &&\n          getToken(0).content === '{'\n        ) {\n          currentIndex++ // skip opening bracket\n          addAlias(getToken(0), 'property-mutation')\n          if (inputVariables.length > 0) {\n            var mutationEnd = findClosingBracket(/^\\{$/, /^\\}$/)\n            if (mutationEnd === -1) {\n              continue\n            } // give references to input variables a special alias\n            for (var i = currentIndex; i < mutationEnd; i++) {\n              var varToken = validTokens[i]\n              if (\n                varToken.type === 'variable' &&\n                inputVariables.indexOf(varToken.content) >= 0\n              ) {\n                addAlias(varToken, 'variable-input')\n              }\n            }\n          }\n        }\n      }\n    }\n  })\n}\n"],"names":["graphql","Prism","languages","comment","description","pattern","greedy","alias","inside","lookbehind","markdown","string","number","boolean","variable","directive","scalar","constant","fragment","keyword","operator","object","punctuation","property","hooks","add","env","language","validTokens","tokens","filter","token","type","currentIndex","length","startToken","content","inputVariables","isTokenType","getToken","definitionEnd","findClosingBracket","t","addAlias","push","mutationEnd","i","varToken","indexOf","offset","types","open","close","stackHeight","test","aliases","Array","isArray","module","exports","displayName"],"sourceRoot":""}