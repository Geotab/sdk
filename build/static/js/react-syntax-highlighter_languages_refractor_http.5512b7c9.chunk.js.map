{"version":3,"file":"static/js/react-syntax-highlighter_languages_refractor_http.5512b7c9.chunk.js","mappings":"4FAKA,SAASA,EAAKC,IACX,SAAWA,GAKV,SAASC,EAAcC,GACrB,OAAOC,OAAO,QAAUD,EAAO,yBAA0B,IAC3D,CACAF,EAAMI,UAAUL,KAAO,CACrB,eAAgB,CACdM,QACE,6GACFC,OAAQ,CAENC,OAAQ,CACNF,QAAS,YACTG,MAAO,YAGT,iBAAkB,CAChBH,QAAS,mCACTI,YAAY,EACZD,MAAO,MACPF,OAAQN,EAAMI,UAAUM,KAG1B,eAAgB,CACdL,QAAS,oBACTI,YAAY,EACZD,MAAO,cAIb,kBAAmB,CACjBH,QAAS,wBACTC,OAAQ,CAEN,eAAgB,CACdD,QAAS,gBACTG,MAAO,YAGT,cAAe,CACbH,QAAS,iBACTI,YAAY,EACZD,MAAO,UAGT,gBAAiB,CACfH,QAAS,UACTI,YAAY,EACZD,MAAO,YAIbG,OAAQ,CACNN,QAAS,sCACTC,OAAQ,CACN,eAAgB,CACd,CACED,QAASJ,EAAc,0BAA0BW,QACjDH,YAAY,EACZD,MAAO,CAAC,MAAO,iBACfF,OAAQN,EAAMI,UAAUS,KAE1B,CACER,QAASJ,EAAc,mCAAmCW,QAC1DH,YAAY,EACZD,MAAO,CAAC,OAAQ,kBAChBF,OAAQN,EAAMI,UAAUU,MAE1B,CACET,QAASJ,EAAc,4BAA4BW,QACnDH,YAAY,EACZD,MAAO,CAAC,OAAQ,kBAChBF,OAAQN,EAAMI,UAAUW,MAE1B,CACEV,QAASJ,EAAc,QAAQW,QAC/BH,YAAY,IAGhB,cAAe,CACbJ,QAAS,SACTG,MAAO,WAETQ,YAAa,QAInB,IA0BIC,EA1BAC,EAAQlB,EAAMI,UACde,EAAgB,CAClB,yBAA0BD,EAAME,WAChC,mBAAoBF,EAAMG,MAAQH,EAAME,WACxC,kBAAmBF,EAAMI,IACzB,WAAYJ,EAAMI,IAClB,YAAaJ,EAAMK,KACnB,WAAYL,EAAMM,IAClB,aAAcN,EAAMO,OAElBC,EAAc,CAChB,oBAAoB,EACpB,mBAAmB,GAQrB,SAASC,EAAiBC,GACxB,IAAIC,EAASD,EAAYE,QAAQ,YAAa,IAE9C,MAAO,MAAQF,EAAc,KADT,wBAA0BC,EAAS,gBACJ,GACrD,CAGA,IAAK,IAAID,KAAeT,EACtB,GAAIA,EAAcS,GAAc,CAC9BX,EAAUA,GAAW,CAAC,EACtB,IAAIZ,EAAUqB,EAAYE,GACtBD,EAAiBC,GACjBA,EACJX,EAAQW,EAAYE,QAAQ,MAAO,MAAQ,CACzCzB,QAASF,OACP,IACE,mBAAmBS,OACnBP,EACA,iDAAiDO,OACjD,IAKA,mBAAmBA,OACrB,KAEFH,YAAY,EACZH,OAAQa,EAAcS,GAE1B,CAEEX,GACFjB,EAAMI,UAAU2B,aAAa,OAAQ,SAAUd,EAElD,CAjJA,CAiJEjB,EACL,CAtJAgC,EAAOC,QAAUlC,EACjBA,EAAKmC,YAAc,OACnBnC,EAAKoC,QAAU,E","sources":["../node_modules/refractor/lang/http.js"],"sourcesContent":["'use strict'\n\nmodule.exports = http\nhttp.displayName = 'http'\nhttp.aliases = []\nfunction http(Prism) {\n  ;(function (Prism) {\n    /**\n     * @param {string} name\n     * @returns {RegExp}\n     */\n    function headerValueOf(name) {\n      return RegExp('(^(?:' + name + '):[ \\t]*(?![ \\t]))[^]+', 'i')\n    }\n    Prism.languages.http = {\n      'request-line': {\n        pattern:\n          /^(?:CONNECT|DELETE|GET|HEAD|OPTIONS|PATCH|POST|PRI|PUT|SEARCH|TRACE)\\s(?:https?:\\/\\/|\\/)\\S*\\sHTTP\\/[\\d.]+/m,\n        inside: {\n          // HTTP Method\n          method: {\n            pattern: /^[A-Z]+\\b/,\n            alias: 'property'\n          },\n          // Request Target e.g. http://example.com, /path/to/file\n          'request-target': {\n            pattern: /^(\\s)(?:https?:\\/\\/|\\/)\\S*(?=\\s)/,\n            lookbehind: true,\n            alias: 'url',\n            inside: Prism.languages.uri\n          },\n          // HTTP Version\n          'http-version': {\n            pattern: /^(\\s)HTTP\\/[\\d.]+/,\n            lookbehind: true,\n            alias: 'property'\n          }\n        }\n      },\n      'response-status': {\n        pattern: /^HTTP\\/[\\d.]+ \\d+ .+/m,\n        inside: {\n          // HTTP Version\n          'http-version': {\n            pattern: /^HTTP\\/[\\d.]+/,\n            alias: 'property'\n          },\n          // Status Code\n          'status-code': {\n            pattern: /^(\\s)\\d+(?=\\s)/,\n            lookbehind: true,\n            alias: 'number'\n          },\n          // Reason Phrase\n          'reason-phrase': {\n            pattern: /^(\\s).+/,\n            lookbehind: true,\n            alias: 'string'\n          }\n        }\n      },\n      header: {\n        pattern: /^[\\w-]+:.+(?:(?:\\r\\n?|\\n)[ \\t].+)*/m,\n        inside: {\n          'header-value': [\n            {\n              pattern: headerValueOf(/Content-Security-Policy/.source),\n              lookbehind: true,\n              alias: ['csp', 'languages-csp'],\n              inside: Prism.languages.csp\n            },\n            {\n              pattern: headerValueOf(/Public-Key-Pins(?:-Report-Only)?/.source),\n              lookbehind: true,\n              alias: ['hpkp', 'languages-hpkp'],\n              inside: Prism.languages.hpkp\n            },\n            {\n              pattern: headerValueOf(/Strict-Transport-Security/.source),\n              lookbehind: true,\n              alias: ['hsts', 'languages-hsts'],\n              inside: Prism.languages.hsts\n            },\n            {\n              pattern: headerValueOf(/[^:]+/.source),\n              lookbehind: true\n            }\n          ],\n          'header-name': {\n            pattern: /^[^:]+/,\n            alias: 'keyword'\n          },\n          punctuation: /^:/\n        }\n      }\n    } // Create a mapping of Content-Type headers to language definitions\n    var langs = Prism.languages\n    var httpLanguages = {\n      'application/javascript': langs.javascript,\n      'application/json': langs.json || langs.javascript,\n      'application/xml': langs.xml,\n      'text/xml': langs.xml,\n      'text/html': langs.html,\n      'text/css': langs.css,\n      'text/plain': langs.plain\n    } // Declare which types can also be suffixes\n    var suffixTypes = {\n      'application/json': true,\n      'application/xml': true\n    }\n    /**\n     * Returns a pattern for the given content type which matches it and any type which has it as a suffix.\n     *\n     * @param {string} contentType\n     * @returns {string}\n     */\n    function getSuffixPattern(contentType) {\n      var suffix = contentType.replace(/^[a-z]+\\//, '')\n      var suffixPattern = '\\\\w+/(?:[\\\\w.-]+\\\\+)+' + suffix + '(?![+\\\\w.-])'\n      return '(?:' + contentType + '|' + suffixPattern + ')'\n    } // Insert each content type parser that has its associated language\n    // currently loaded.\n    var options\n    for (var contentType in httpLanguages) {\n      if (httpLanguages[contentType]) {\n        options = options || {}\n        var pattern = suffixTypes[contentType]\n          ? getSuffixPattern(contentType)\n          : contentType\n        options[contentType.replace(/\\//g, '-')] = {\n          pattern: RegExp(\n            '(' +\n              /content-type:\\s*/.source +\n              pattern +\n              /(?:(?:\\r\\n?|\\n)[\\w-].*)*(?:\\r(?:\\n|(?!\\n))|\\n)/.source +\n              ')' + // This is a little interesting:\n              // The HTTP format spec required 1 empty line before the body to make everything unambiguous.\n              // However, when writing code by hand (e.g. to display on a website) people can forget about this,\n              // so we want to be liberal here. We will allow the empty line to be omitted if the first line of\n              // the body does not start with a [\\w-] character (as headers do).\n              /[^ \\t\\w-][\\s\\S]*/.source,\n            'i'\n          ),\n          lookbehind: true,\n          inside: httpLanguages[contentType]\n        }\n      }\n    }\n    if (options) {\n      Prism.languages.insertBefore('http', 'header', options)\n    }\n  })(Prism)\n}\n"],"names":["http","Prism","headerValueOf","name","RegExp","languages","pattern","inside","method","alias","lookbehind","uri","header","source","csp","hpkp","hsts","punctuation","options","langs","httpLanguages","javascript","json","xml","html","css","plain","suffixTypes","getSuffixPattern","contentType","suffix","replace","insertBefore","module","exports","displayName","aliases"],"sourceRoot":""}