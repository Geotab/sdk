{"version":3,"file":"static/js/react-syntax-highlighter_languages_refractor_keyman.e7f28411.chunk.js","mappings":"oFAKA,SAASA,EAAOC,GACdA,EAAMC,UAAUF,OAAS,CACvBG,QAAS,CACPC,QAAS,UACTC,QAAQ,GAEVC,OAAQ,CACNF,QAAS,0BACTC,QAAQ,GAEV,cAAe,CACbD,QACE,4HACFC,QAAQ,EACRE,MAAO,YAGT,iBAAkB,CAChBH,QAAS,OACTG,MAAO,QAET,mBAAoB,CAClBH,QACE,8HACFG,MAAO,QAET,eAAgB,CACdH,QACE,+HACFG,MAAO,WAET,qBAAsB,CACpBH,QAAS,6DACTG,MAAO,WAET,iBAAkB,CAChBH,QAAS,kDACTG,MAAO,YAGTC,OAAQ,0CACRC,SAAU,eACVC,YAAa,SAEjB,CA/CAC,EAAOC,QAAUZ,EACjBA,EAAOa,YAAc,SACrBb,EAAOc,QAAU,E","sources":["../node_modules/refractor/lang/keyman.js"],"sourcesContent":["'use strict'\n\nmodule.exports = keyman\nkeyman.displayName = 'keyman'\nkeyman.aliases = []\nfunction keyman(Prism) {\n  Prism.languages.keyman = {\n    comment: {\n      pattern: /\\bc .*/i,\n      greedy: true\n    },\n    string: {\n      pattern: /\"[^\"\\r\\n]*\"|'[^'\\r\\n]*'/,\n      greedy: true\n    },\n    'virtual-key': {\n      pattern:\n        /\\[\\s*(?:(?:ALT|CAPS|CTRL|LALT|LCTRL|NCAPS|RALT|RCTRL|SHIFT)\\s+)*(?:[TKU]_[\\w?]+|[A-E]\\d\\d?|\"[^\"\\r\\n]*\"|'[^'\\r\\n]*')\\s*\\]/i,\n      greedy: true,\n      alias: 'function' // alias for styles\n    },\n    // https://help.keyman.com/developer/language/guide/headers\n    'header-keyword': {\n      pattern: /&\\w+/,\n      alias: 'bold' // alias for styles\n    },\n    'header-statement': {\n      pattern:\n        /\\b(?:bitmap|bitmaps|caps always off|caps on only|copyright|hotkey|language|layout|message|name|shift frees caps|version)\\b/i,\n      alias: 'bold' // alias for styles\n    },\n    'rule-keyword': {\n      pattern:\n        /\\b(?:any|baselayout|beep|call|context|deadkey|dk|if|index|layer|notany|nul|outs|platform|reset|return|save|set|store|use)\\b/i,\n      alias: 'keyword'\n    },\n    'structural-keyword': {\n      pattern: /\\b(?:ansi|begin|group|match|nomatch|unicode|using keys)\\b/i,\n      alias: 'keyword'\n    },\n    'compile-target': {\n      pattern: /\\$(?:keyman|keymanonly|keymanweb|kmfl|weaver):/i,\n      alias: 'property'\n    },\n    // U+####, x###, d### characters and numbers\n    number: /\\b(?:U\\+[\\dA-F]+|d\\d+|x[\\da-f]+|\\d+)\\b/i,\n    operator: /[+>\\\\$]|\\.\\./,\n    punctuation: /[()=,]/\n  }\n}\n"],"names":["keyman","Prism","languages","comment","pattern","greedy","string","alias","number","operator","punctuation","module","exports","displayName","aliases"],"sourceRoot":""}