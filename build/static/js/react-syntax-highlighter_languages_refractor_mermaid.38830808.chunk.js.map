{"version":3,"file":"static/js/react-syntax-highlighter_languages_refractor_mermaid.38830808.chunk.js","mappings":"4FAKA,SAASA,EAAQC,GACfA,EAAMC,UAAUF,QAAU,CACxBG,QAAS,CACPC,QAAS,OACTC,QAAQ,GAEVC,MAAO,CACLF,QACE,sEACFG,YAAY,EACZC,OAAQ,CACNC,SAAU,wBACVC,SAAU,IACVC,YAAa,MAGjB,oBAAqB,CACnBP,QACE,4IACFG,YAAY,EACZF,QAAQ,EACRG,OAAQ,CACNI,MAAO,CACLR,QAAS,8BACTS,MAAO,YAETC,MAAO,CACLV,QAAS,qCACTG,YAAY,EACZM,MAAO,YAET,aAAc,CACZT,QAAS,OACTS,MAAO,CAAC,QAAS,eAIvBD,MAAO,CAML,CAEER,QAAS,uDACTG,YAAY,EACZM,MAAO,YAET,CAGET,QACE,qGACFG,YAAY,EACZM,MAAO,YAET,CAEET,QACE,mEACFG,YAAY,EACZM,MAAO,YAET,CAEET,QACE,uFACFG,YAAY,EACZM,MAAO,aAGXC,MAAO,CACLV,QAAS,0CACTG,YAAY,EACZF,QAAQ,EACRQ,MAAO,YAETE,KAAM,CACJX,QAAS,gEACTS,MAAO,UAETG,OAAQ,CACNZ,QAAS,cACTC,QAAQ,GAEVY,WAAY,CACVb,QACE,gGACFS,MAAO,aAETK,QAAS,CAEP,CACEd,QACE,yOACFG,YAAY,EACZF,QAAQ,GAEV,CACED,QACE,2KACFG,YAAY,EACZF,QAAQ,IAGZc,OAAQ,cACRT,SAAU,CACRN,QAAS,gCACTG,YAAY,GAEdI,YAAa,UAEjB,CApHAS,EAAOC,QAAUrB,EACjBA,EAAQsB,YAAc,UACtBtB,EAAQuB,QAAU,E","sources":["../node_modules/refractor/lang/mermaid.js"],"sourcesContent":["'use strict'\n\nmodule.exports = mermaid\nmermaid.displayName = 'mermaid'\nmermaid.aliases = []\nfunction mermaid(Prism) {\n  Prism.languages.mermaid = {\n    comment: {\n      pattern: /%%.*/,\n      greedy: true\n    },\n    style: {\n      pattern:\n        /^([ \\t]*(?:classDef|linkStyle|style)[ \\t]+[\\w$-]+[ \\t]+)\\w.*[^\\s;]/m,\n      lookbehind: true,\n      inside: {\n        property: /\\b\\w[\\w-]*(?=[ \\t]*:)/,\n        operator: /:/,\n        punctuation: /,/\n      }\n    },\n    'inter-arrow-label': {\n      pattern:\n        /([^<>ox.=-])(?:-[-.]|==)(?![<>ox.=-])[ \\t]*(?:\"[^\"\\r\\n]*\"|[^\\s\".=-](?:[^\\r\\n.=-]*[^\\s.=-])?)[ \\t]*(?:\\.+->?|--+[->]|==+[=>])(?![<>ox.=-])/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        arrow: {\n          pattern: /(?:\\.+->?|--+[->]|==+[=>])$/,\n          alias: 'operator'\n        },\n        label: {\n          pattern: /^([\\s\\S]{2}[ \\t]*)\\S(?:[\\s\\S]*\\S)?/,\n          lookbehind: true,\n          alias: 'property'\n        },\n        'arrow-head': {\n          pattern: /^\\S+/,\n          alias: ['arrow', 'operator']\n        }\n      }\n    },\n    arrow: [\n      // This might look complex but it really isn't.\n      // There are many possible arrows (see tests) and it's impossible to fit all of them into one pattern. The\n      // problem is that we only have one lookbehind per pattern. However, we cannot disallow too many arrow\n      // characters in the one lookbehind because that would create too many false negatives. So we have to split the\n      // arrows into different patterns.\n      {\n        // ER diagram\n        pattern: /(^|[^{}|o.-])[|}][|o](?:--|\\.\\.)[|o][|{](?![{}|o.-])/,\n        lookbehind: true,\n        alias: 'operator'\n      },\n      {\n        // flow chart\n        // (?:==+|--+|-\\.*-)\n        pattern:\n          /(^|[^<>ox.=-])(?:[<ox](?:==+|--+|-\\.*-)[>ox]?|(?:==+|--+|-\\.*-)[>ox]|===+|---+|-\\.+-)(?![<>ox.=-])/,\n        lookbehind: true,\n        alias: 'operator'\n      },\n      {\n        // sequence diagram\n        pattern:\n          /(^|[^<>()x-])(?:--?(?:>>|[x>)])(?![<>()x])|(?:<<|[x<(])--?(?!-))/,\n        lookbehind: true,\n        alias: 'operator'\n      },\n      {\n        // class diagram\n        pattern:\n          /(^|[^<>|*o.-])(?:[*o]--|--[*o]|<\\|?(?:--|\\.\\.)|(?:--|\\.\\.)\\|?>|--|\\.\\.)(?![<>|*o.-])/,\n        lookbehind: true,\n        alias: 'operator'\n      }\n    ],\n    label: {\n      pattern: /(^|[^|<])\\|(?:[^\\r\\n\"|]|\"[^\"\\r\\n]*\")+\\|/,\n      lookbehind: true,\n      greedy: true,\n      alias: 'property'\n    },\n    text: {\n      pattern: /(?:[(\\[{]+|\\b>)(?:[^\\r\\n\"()\\[\\]{}]|\"[^\"\\r\\n]*\")+(?:[)\\]}]+|>)/,\n      alias: 'string'\n    },\n    string: {\n      pattern: /\"[^\"\\r\\n]*\"/,\n      greedy: true\n    },\n    annotation: {\n      pattern:\n        /<<(?:abstract|choice|enumeration|fork|interface|join|service)>>|\\[\\[(?:choice|fork|join)\\]\\]/i,\n      alias: 'important'\n    },\n    keyword: [\n      // This language has both case-sensitive and case-insensitive keywords\n      {\n        pattern:\n          /(^[ \\t]*)(?:action|callback|class|classDef|classDiagram|click|direction|erDiagram|flowchart|gantt|gitGraph|graph|journey|link|linkStyle|pie|requirementDiagram|sequenceDiagram|stateDiagram|stateDiagram-v2|style|subgraph)(?![\\w$-])/m,\n        lookbehind: true,\n        greedy: true\n      },\n      {\n        pattern:\n          /(^[ \\t]*)(?:activate|alt|and|as|autonumber|deactivate|else|end(?:[ \\t]+note)?|loop|opt|par|participant|rect|state|note[ \\t]+(?:over|(?:left|right)[ \\t]+of))(?![\\w$-])/im,\n        lookbehind: true,\n        greedy: true\n      }\n    ],\n    entity: /#[a-z0-9]+;/,\n    operator: {\n      pattern: /(\\w[ \\t]*)&(?=[ \\t]*\\w)|:::|:/,\n      lookbehind: true\n    },\n    punctuation: /[(){};]/\n  }\n}\n"],"names":["mermaid","Prism","languages","comment","pattern","greedy","style","lookbehind","inside","property","operator","punctuation","arrow","alias","label","text","string","annotation","keyword","entity","module","exports","displayName","aliases"],"sourceRoot":""}