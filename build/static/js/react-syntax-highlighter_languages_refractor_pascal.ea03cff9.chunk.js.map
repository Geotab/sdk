{"version":3,"file":"static/js/react-syntax-highlighter_languages_refractor_pascal.ea03cff9.chunk.js","mappings":"mFAKA,SAASA,EAAOC,GAKdA,EAAMC,UAAUF,OAAS,CACvBG,UAAW,CACTC,QAAS,iBACTC,QAAQ,EACRC,MAAO,CAAC,QAAS,aAEnBC,QAAS,CACPH,QAAS,uCACTC,QAAQ,GAEVG,OAAQ,CACNJ,QAAS,wDACTC,QAAQ,GAEVI,IAAK,CACHL,QAAS,qCACTM,YAAY,EACZL,QAAQ,EACRM,OAAQ,MAEVC,QAAS,CACP,CAEER,QACE,iTACFM,YAAY,GAEd,CAEEN,QAAS,+CACTM,YAAY,GAEd,CAEEN,QACE,mKACFM,YAAY,GAEd,CAEEN,QACE,mhBACFM,YAAY,IAGhBG,OAAQ,CAEN,0BACA,kCAEFC,SAAU,CACR,+CACA,CACEV,QACE,0EACFM,YAAY,IAGhBK,YAAa,0BAEfd,EAAMC,UAAUF,OAAOS,IAAIE,OAASV,EAAMC,UAAUc,OAAO,SAAU,CACnEP,SAAKQ,EACLL,aAASK,EACTH,cAAUG,IAEZhB,EAAMC,UAAUgB,aAAejB,EAAMC,UAAUF,MACjD,CA1EAmB,EAAOC,QAAUpB,EACjBA,EAAOqB,YAAc,SACrBrB,EAAOsB,QAAU,CAAC,e","sources":["../node_modules/refractor/lang/pascal.js"],"sourcesContent":["'use strict'\n\nmodule.exports = pascal\npascal.displayName = 'pascal'\npascal.aliases = ['objectpascal']\nfunction pascal(Prism) {\n  // Based on Free Pascal\n  /* TODO\nSupport inline asm ?\n*/\n  Prism.languages.pascal = {\n    directive: {\n      pattern: /\\{\\$[\\s\\S]*?\\}/,\n      greedy: true,\n      alias: ['marco', 'property']\n    },\n    comment: {\n      pattern: /\\(\\*[\\s\\S]*?\\*\\)|\\{[\\s\\S]*?\\}|\\/\\/.*/,\n      greedy: true\n    },\n    string: {\n      pattern: /(?:'(?:''|[^'\\r\\n])*'(?!')|#[&$%]?[a-f\\d]+)+|\\^[a-z]/i,\n      greedy: true\n    },\n    asm: {\n      pattern: /(\\basm\\b)[\\s\\S]+?(?=\\bend\\s*[;[])/i,\n      lookbehind: true,\n      greedy: true,\n      inside: null // see below\n    },\n    keyword: [\n      {\n        // Turbo Pascal\n        pattern:\n          /(^|[^&])\\b(?:absolute|array|asm|begin|case|const|constructor|destructor|do|downto|else|end|file|for|function|goto|if|implementation|inherited|inline|interface|label|nil|object|of|operator|packed|procedure|program|record|reintroduce|repeat|self|set|string|then|to|type|unit|until|uses|var|while|with)\\b/i,\n        lookbehind: true\n      },\n      {\n        // Free Pascal\n        pattern: /(^|[^&])\\b(?:dispose|exit|false|new|true)\\b/i,\n        lookbehind: true\n      },\n      {\n        // Object Pascal\n        pattern:\n          /(^|[^&])\\b(?:class|dispinterface|except|exports|finalization|finally|initialization|inline|library|on|out|packed|property|raise|resourcestring|threadvar|try)\\b/i,\n        lookbehind: true\n      },\n      {\n        // Modifiers\n        pattern:\n          /(^|[^&])\\b(?:absolute|abstract|alias|assembler|bitpacked|break|cdecl|continue|cppdecl|cvar|default|deprecated|dynamic|enumerator|experimental|export|external|far|far16|forward|generic|helper|implements|index|interrupt|iochecks|local|message|name|near|nodefault|noreturn|nostackframe|oldfpccall|otherwise|overload|override|pascal|platform|private|protected|public|published|read|register|reintroduce|result|safecall|saveregisters|softfloat|specialize|static|stdcall|stored|strict|unaligned|unimplemented|varargs|virtual|write)\\b/i,\n        lookbehind: true\n      }\n    ],\n    number: [\n      // Hexadecimal, octal and binary\n      /(?:[&%]\\d+|\\$[a-f\\d]+)/i, // Decimal\n      /\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?/i\n    ],\n    operator: [\n      /\\.\\.|\\*\\*|:=|<[<=>]?|>[>=]?|[+\\-*\\/]=?|[@^=]/,\n      {\n        pattern:\n          /(^|[^&])\\b(?:and|as|div|exclude|in|include|is|mod|not|or|shl|shr|xor)\\b/,\n        lookbehind: true\n      }\n    ],\n    punctuation: /\\(\\.|\\.\\)|[()\\[\\]:;,.]/\n  }\n  Prism.languages.pascal.asm.inside = Prism.languages.extend('pascal', {\n    asm: undefined,\n    keyword: undefined,\n    operator: undefined\n  })\n  Prism.languages.objectpascal = Prism.languages.pascal\n}\n"],"names":["pascal","Prism","languages","directive","pattern","greedy","alias","comment","string","asm","lookbehind","inside","keyword","number","operator","punctuation","extend","undefined","objectpascal","module","exports","displayName","aliases"],"sourceRoot":""}