{"version":3,"file":"static/js/react-syntax-highlighter_languages_refractor_regex.8165f9b8.chunk.js","mappings":"4FAKA,SAASA,EAAMC,IACZ,SAAWA,GACV,IAAIC,EAAgB,CAClBC,QAAS,uBACTC,MAAO,UAELC,EACF,6FASEC,EAAY,eAAiBD,EAAOE,OAAS,IAC7CC,EAAQC,OAAOH,EAAY,IAAMA,GACjCI,EAAY,CACdP,QAAS,wBACTQ,YAAY,EACZP,MAAO,YAETH,EAAMW,UAAUZ,MAAQ,CACtB,aAAc,CACZG,QAAS,kDACTQ,YAAY,EACZE,OAAQ,CACN,sBAAuB,CACrBV,QAAS,UACTQ,YAAY,EACZP,MAAO,YAET,yBAA0B,CACxBD,QAAS,UACTC,MAAO,eAETI,MAAO,CACLL,QAASK,EACTK,OAAQ,CACNR,OAAQA,EACR,oBAAqB,CACnBF,QAAS,IACTC,MAAO,cAIb,iBAAkBF,EAClB,WApCkB,CACtBC,QAAS,yBACTC,MAAO,cAmCHC,OAAQA,IAGZ,iBAAkBH,EAClB,WA7CY,CACZC,QAAS,4BACTC,MAAO,cA4CPU,cAAe,CACb,CAEEX,QAAS,2BACTC,MAAO,WAET,CACED,QAAS,eACTC,MAAO,UACPS,OAAQ,CACN,aAAcH,KAIpBK,OAAQ,CACNZ,QAAS,kBACTC,MAAO,YAETC,OAAQA,EACRW,MAAO,CACL,CAIEb,QACE,8EACFC,MAAO,cACPS,OAAQ,CACN,aAAcH,IAGlB,CACEP,QAAS,KACTC,MAAO,gBAGXa,WAAY,CACVd,QAAS,kCACTC,MAAO,UAETc,YAAa,CACXf,QAAS,KACTC,MAAO,WAGZ,CAlGA,CAkGEH,EACL,CAvGAkB,EAAOC,QAAUpB,EACjBA,EAAMqB,YAAc,QACpBrB,EAAMsB,QAAU,E","sources":["../node_modules/refractor/lang/regex.js"],"sourcesContent":["'use strict'\n\nmodule.exports = regex\nregex.displayName = 'regex'\nregex.aliases = []\nfunction regex(Prism) {\n  ;(function (Prism) {\n    var specialEscape = {\n      pattern: /\\\\[\\\\(){}[\\]^$+*?|.]/,\n      alias: 'escape'\n    }\n    var escape =\n      /\\\\(?:x[\\da-fA-F]{2}|u[\\da-fA-F]{4}|u\\{[\\da-fA-F]+\\}|0[0-7]{0,2}|[123][0-7]{2}|c[a-zA-Z]|.)/\n    var charSet = {\n      pattern: /\\.|\\\\[wsd]|\\\\p\\{[^{}]+\\}/i,\n      alias: 'class-name'\n    }\n    var charSetWithoutDot = {\n      pattern: /\\\\[wsd]|\\\\p\\{[^{}]+\\}/i,\n      alias: 'class-name'\n    }\n    var rangeChar = '(?:[^\\\\\\\\-]|' + escape.source + ')'\n    var range = RegExp(rangeChar + '-' + rangeChar) // the name of a capturing group\n    var groupName = {\n      pattern: /(<|')[^<>']+(?=[>']$)/,\n      lookbehind: true,\n      alias: 'variable'\n    }\n    Prism.languages.regex = {\n      'char-class': {\n        pattern: /((?:^|[^\\\\])(?:\\\\\\\\)*)\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*\\]/,\n        lookbehind: true,\n        inside: {\n          'char-class-negation': {\n            pattern: /(^\\[)\\^/,\n            lookbehind: true,\n            alias: 'operator'\n          },\n          'char-class-punctuation': {\n            pattern: /^\\[|\\]$/,\n            alias: 'punctuation'\n          },\n          range: {\n            pattern: range,\n            inside: {\n              escape: escape,\n              'range-punctuation': {\n                pattern: /-/,\n                alias: 'operator'\n              }\n            }\n          },\n          'special-escape': specialEscape,\n          'char-set': charSetWithoutDot,\n          escape: escape\n        }\n      },\n      'special-escape': specialEscape,\n      'char-set': charSet,\n      backreference: [\n        {\n          // a backreference which is not an octal escape\n          pattern: /\\\\(?![123][0-7]{2})[1-9]/,\n          alias: 'keyword'\n        },\n        {\n          pattern: /\\\\k<[^<>']+>/,\n          alias: 'keyword',\n          inside: {\n            'group-name': groupName\n          }\n        }\n      ],\n      anchor: {\n        pattern: /[$^]|\\\\[ABbGZz]/,\n        alias: 'function'\n      },\n      escape: escape,\n      group: [\n        {\n          // https://docs.oracle.com/javase/10/docs/api/java/util/regex/Pattern.html\n          // https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference?view=netframework-4.7.2#grouping-constructs\n          // (), (?<name>), (?'name'), (?>), (?:), (?=), (?!), (?<=), (?<!), (?is-m), (?i-m:)\n          pattern:\n            /\\((?:\\?(?:<[^<>']+>|'[^<>']+'|[>:]|<?[=!]|[idmnsuxU]+(?:-[idmnsuxU]+)?:?))?/,\n          alias: 'punctuation',\n          inside: {\n            'group-name': groupName\n          }\n        },\n        {\n          pattern: /\\)/,\n          alias: 'punctuation'\n        }\n      ],\n      quantifier: {\n        pattern: /(?:[+*?]|\\{\\d+(?:,\\d*)?\\})[?+]?/,\n        alias: 'number'\n      },\n      alternation: {\n        pattern: /\\|/,\n        alias: 'keyword'\n      }\n    }\n  })(Prism)\n}\n"],"names":["regex","Prism","specialEscape","pattern","alias","escape","rangeChar","source","range","RegExp","groupName","lookbehind","languages","inside","backreference","anchor","group","quantifier","alternation","module","exports","displayName","aliases"],"sourceRoot":""}