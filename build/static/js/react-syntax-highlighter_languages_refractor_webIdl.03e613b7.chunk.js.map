{"version":3,"file":"static/js/react-syntax-highlighter_languages_refractor_webIdl.03e613b7.chunk.js","mappings":"oFAKA,SAASA,EAAOC,IACb,SAAWA,GACV,IAAIC,EAAK,wCAAwCC,OAC7CC,EACF,MACA,yCAAyCD,OACzC,IACA,gDAAgDA,OAChD,IACA,kCAAkCA,OAClCD,EACA,gCAAgCC,OAChC,IACA,aAAaA,OACXE,EAAa,CAAC,EAwFlB,IAAK,IAAIC,KAvFTL,EAAMM,UAAU,WAAa,CAC3BC,QAAS,CACPC,QAAS,0BACTC,QAAQ,GAEVC,OAAQ,CACNF,QAAS,UACTC,QAAQ,GAEVE,UAAW,CACTH,QAASI,OAAO,mBAAmBV,OAASD,GAC5CY,YAAY,GAEd,aAAc,CACZ,CACEL,QACE,iEACFK,YAAY,EACZC,OAAQV,GAEV,CACEI,QAASI,OACP,4DAA4DV,OAC1DC,GAEJU,YAAY,EACZC,OAAQV,GAEV,CAEEI,QAASI,OACP,IAAM,gBAAgBV,OAASD,EAAK,UAAUC,OAAS,IAAMC,GAE/DU,YAAY,EACZC,OAAQV,GAEV,CAEEI,QAASI,OAAO,mBAAmBV,OAASC,GAC5CU,YAAY,EACZC,OAAQV,GAEV,CACEI,QAASI,OACP,sFACGV,OAASD,GAEdY,YAAY,GAEd,CAEEL,QAASI,OAAO,SAASV,OAASD,GAClCY,YAAY,GAEdD,OAAOX,EAAK,mCAAmCC,QAC/C,CACEM,QAASI,OAAO,iCAAiCV,OAASD,GAC1DY,YAAY,GAEd,CAEEL,QAASI,OACPT,EACE,MACA,mBAAmBD,OACnBD,EACA,aAAaC,OACb,KAEJY,OAAQV,IAGZW,QACE,8OACFC,QAAS,CACP,oOACA,gJAEFC,QAAS,qBACTC,OAAQ,CACNV,QACE,2FACFK,YAAY,GAEdM,SAAU,iBACVC,YAAa,gBAECpB,EAAMM,UAAU,WAClB,eAARD,IACFD,EAAWC,GAAOL,EAAMM,UAAU,WAAWD,IAGjDL,EAAMM,UAAkB,OAAIN,EAAMM,UAAU,UAC7C,CA3GA,CA2GEN,EACL,CAhHAqB,EAAOC,QAAUvB,EACjBA,EAAOwB,YAAc,SACrBxB,EAAOyB,QAAU,E","sources":["../node_modules/refractor/lang/web-idl.js"],"sourcesContent":["'use strict'\n\nmodule.exports = webIdl\nwebIdl.displayName = 'webIdl'\nwebIdl.aliases = []\nfunction webIdl(Prism) {\n  ;(function (Prism) {\n    var id = /(?:\\B-|\\b_|\\b)[A-Za-z][\\w-]*(?![\\w-])/.source\n    var type =\n      '(?:' +\n      /\\b(?:unsigned\\s+)?long\\s+long(?![\\w-])/.source +\n      '|' +\n      /\\b(?:unrestricted|unsigned)\\s+[a-z]+(?![\\w-])/.source +\n      '|' +\n      /(?!(?:unrestricted|unsigned)\\b)/.source +\n      id +\n      /(?:\\s*<(?:[^<>]|<[^<>]*>)*>)?/.source +\n      ')' +\n      /(?:\\s*\\?)?/.source\n    var typeInside = {}\n    Prism.languages['web-idl'] = {\n      comment: {\n        pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,\n        greedy: true\n      },\n      string: {\n        pattern: /\"[^\"]*\"/,\n        greedy: true\n      },\n      namespace: {\n        pattern: RegExp(/(\\bnamespace\\s+)/.source + id),\n        lookbehind: true\n      },\n      'class-name': [\n        {\n          pattern:\n            /(^|[^\\w-])(?:iterable|maplike|setlike)\\s*<(?:[^<>]|<[^<>]*>)*>/,\n          lookbehind: true,\n          inside: typeInside\n        },\n        {\n          pattern: RegExp(\n            /(\\b(?:attribute|const|deleter|getter|optional|setter)\\s+)/.source +\n              type\n          ),\n          lookbehind: true,\n          inside: typeInside\n        },\n        {\n          // callback return type\n          pattern: RegExp(\n            '(' + /\\bcallback\\s+/.source + id + /\\s*=\\s*/.source + ')' + type\n          ),\n          lookbehind: true,\n          inside: typeInside\n        },\n        {\n          // typedef\n          pattern: RegExp(/(\\btypedef\\b\\s*)/.source + type),\n          lookbehind: true,\n          inside: typeInside\n        },\n        {\n          pattern: RegExp(\n            /(\\b(?:callback|dictionary|enum|interface(?:\\s+mixin)?)\\s+)(?!(?:interface|mixin)\\b)/\n              .source + id\n          ),\n          lookbehind: true\n        },\n        {\n          // inheritance\n          pattern: RegExp(/(:\\s*)/.source + id),\n          lookbehind: true\n        }, // includes and implements\n        RegExp(id + /(?=\\s+(?:implements|includes)\\b)/.source),\n        {\n          pattern: RegExp(/(\\b(?:implements|includes)\\s+)/.source + id),\n          lookbehind: true\n        },\n        {\n          // function return type, parameter types, and dictionary members\n          pattern: RegExp(\n            type +\n              '(?=' +\n              /\\s*(?:\\.{3}\\s*)?/.source +\n              id +\n              /\\s*[(),;=]/.source +\n              ')'\n          ),\n          inside: typeInside\n        }\n      ],\n      builtin:\n        /\\b(?:ArrayBuffer|BigInt64Array|BigUint64Array|ByteString|DOMString|DataView|Float32Array|Float64Array|FrozenArray|Int16Array|Int32Array|Int8Array|ObservableArray|Promise|USVString|Uint16Array|Uint32Array|Uint8Array|Uint8ClampedArray)\\b/,\n      keyword: [\n        /\\b(?:async|attribute|callback|const|constructor|deleter|dictionary|enum|getter|implements|includes|inherit|interface|mixin|namespace|null|optional|or|partial|readonly|required|setter|static|stringifier|typedef|unrestricted)\\b/, // type keywords\n        /\\b(?:any|bigint|boolean|byte|double|float|iterable|long|maplike|object|octet|record|sequence|setlike|short|symbol|undefined|unsigned|void)\\b/\n      ],\n      boolean: /\\b(?:false|true)\\b/,\n      number: {\n        pattern:\n          /(^|[^\\w-])-?(?:0x[0-9a-f]+|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?|NaN|Infinity)(?![\\w-])/i,\n        lookbehind: true\n      },\n      operator: /\\.{3}|[=:?<>-]/,\n      punctuation: /[(){}[\\].,;]/\n    }\n    for (var key in Prism.languages['web-idl']) {\n      if (key !== 'class-name') {\n        typeInside[key] = Prism.languages['web-idl'][key]\n      }\n    }\n    Prism.languages['webidl'] = Prism.languages['web-idl']\n  })(Prism)\n}\n"],"names":["webIdl","Prism","id","source","type","typeInside","key","languages","comment","pattern","greedy","string","namespace","RegExp","lookbehind","inside","builtin","keyword","boolean","number","operator","punctuation","module","exports","displayName","aliases"],"sourceRoot":""}