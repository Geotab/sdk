export const searchIndex = [{"id":0,"title":"Drive Add-Ins","headers":["Overview","Geotab Drive page lifecycle methods","API and state documentation","Opening third-party applications using URI schema","Opening Geotab Drive from third-party applications","Other useful resources"],"headerIds":["drive-add-in-overview","drive-add-in-lifecycle-methods","drive-add-in-api-and-state","drive-add-in-third-party-uri-schema","drive-add-in-from-third-party","drive-add-in-other-resources"],"content":"Geotab Drive Add-Ins are in preview release and subject to change The MyGeotab Add-In structure can be applied to the Geotab Drive application as well, providing you the ability to extend the functionality for drivers in an environment with sensors (e.g. geolocation and acceleration) and actuators (e.g. voice alerts and notifications). This environment must also be completely operable in an offline state - so your Add-In must be able to handle having no internet connection, or sleeping in the background of the mobile device. Please read the Developing Add-Ins guide first before attempting a Geotab Drive Add-In. All Add-Ins that have been designed to work with MyGeotab will work on the Geotab Drive app as well. Your Add-In will be completely downloaded for all referenced links, images, and scripts upon user login. This way, as the user is authenticated over the internet - they will have your Add-In with them as they travel or disconnect from the network. If your Add-In requires dynamic loading of CSS, images, or JavaScript - these requests will fail if the user does not have a network connection. As such you should either: include all dependencies on creation of the Add-In, explicitly link to them, or provide a fallback if state.online returns False. Geotab Drive Add-Ins will also display differently, on both the dashboard and the menu.  To make an Add-In on the Geotab Drive app, the item in your configuration file must have a path that equals \"DriveAppLink/\" (including a trailing forward slash). The menuName, url, and version will remain unchanged. For example: Listing 1 - Geotab Drive \"item\" configuration The array of items also allows you to have one link item in MyGeotab, and another link item to Geotab Drive There are also 2 additional properties that are optional for the configuration file that control the availability to additional page lifecycle methods, onStartup and{\" \"} onShutdown. These configuration properties are boolean, they can be set to true if they are to be used and false when not in use. By default these 2 properties will be set to false if not included in the configuration file. onStartup: Startup Add-Ins are executed when a driver logs in to the Drive App for the first time. onShutdown: The onShutdown property must be set to true to execute an Add-In when logging out of Geotab Drive. More information about these 2 methods can be found in this{\" \"} document . e.g. The onStartup and onShutdown properties respectively enable the startup and shutdown lifecycle methods. Startup When the dashboard page is visible, the startup method is only called once. If the user navigates away from the page then navigates back, the startup method is not called again. If the Add-In requires re-initialization, the user must either log out and log in again, or refresh the application. Shutdown Shutdown Add-Ins are executed when the final driver logs out of the Drive App. If there are co-drivers, and one of the co-drivers logs out (while other drivers remain logged in to the Drive App), the shutdown Add-In is not executed. Additionally, the Add-In is expected to return a promise since shutdown Add-Ins have a 15-second time limit to perform their function before the Add-Ins time out and the logout process is completed. The time limit prevents the application from freezing in the middle of the logout process as a result of faulty Add-Ins. { // Do work, make any api calls etc resolve() // eventually need to call this somewhere so the promise resolves });}`} /> Inside the Geotab Drive app, we provide the same api and state properties for your initialize method that we do for our normal Add-Ins. In addition to this, we provide you with properties and methods to allow access to mobile device sensors/actuators. See Table 1 below for a list of the properties and methods provided. Table 1 - Geotab Drive additional properties and methods Description Parameters Return Type api.mobile.exists() Returns true if Geotab Drive is running within a native application, and false if just as a HTML5 web application None Boolean api.mobile.getVersion() If api.mobile.exists(), gets the Geotab Drive version from the native application None String api.mobile.speak() If api.mobile.exists(), uses the text to speech functionality on the mobile device String Void api.mobile.notify() If api.mobile.exists(), will add a notification to the top bar of a native operating system Example:{\" \"} api.mobile.notify(\"Fill up your vehicle\", \"Low on gas\") String[Message], String[Title], String[Id], [String[JsonData]], [Boolean[Permanent]] Void api.mobile.notification.hasPermission() Asynchronously checks the notification permission for the Drive App and returns a promise. e.g.{\" \"} notification.hasPermission().then(result ={`>`} console.log(result)).catch(error ={`>`} console.error(error)) None Promise that resolves with a message object. e.g. Response object{\" \"} {`{\"id\":0, \"text\":\"Message\", \"title\":\"Title\", \"icon\":\"res://ic_stat_notification\", \"smallIcon\":\"res://ic_stat_notification\", \"priority\":1 }`}{\" \"} If notification is not successful it can give the following messages: Notification permission denied Request notification permission is not supported api.mobile.notification.requestPermission() Checks the notification permission for the Drive App and returns a promise. e.g.{\" \"} notification.hasPermission().then((result) ={`>`} console.log('Notification permission: ', result)).catch((error) ={`>`} console.error(error)); None Promise that resolves with one of the following messages: Notification permission not granted Notification permission granted Request notification permission is not supported api.mobile.notification.notify() Sends a native notification to the user with the provided title and message. If the application does not yet have notification permission, we will requestNotificationPermission() then notify() if the user granted permission; otherwise, the promise is rejected. message: String, title: String e.g.{\" \"} notification.notify(message, title).then(result ={`>`} console.log(result)).catch( error ={`>`} console.error(error)) Promise that resolves with a message object. e.g. Response object{\" \"} {`{\"id\":0, \"text\":\"Message\", \"title\":\"Title\", \"icon\":\"res://ic_stat_notification\", \"smallIcon\":\"res://ic_stat_notification\", \"priority\":1 }`}{\" \"} If notification is not successful it can give the following messages: Notification permission denied Request notification permission is not supported api.mobile.notification.update() Allows you to update the content of active notifications. To update active notifications that have not yet been acknowledged, the original notification id -- created at the time the notification is sent -- must be provided. e.g.{\" \"} notification.update(message, title, id).then(result ={`>`} console.log(result)).catch(error ={`>`} console.error(error)) message: String, title: String, id: Integer Void api.mobile.notification.cancel() e.g.{\" \"} notification.cancel(id).then(result ={`>`} console.log(result)).catch(error ={`>`} console.error(error)) id: Integer Void api.mobile.geolocation A navigator object that is similar to HTML5 navigator.geolocation Example:{\" \"} api.mobile.geolocation.getCurrentPosition(function (position) {}, function (error) {}, {`{enableHighAccuracy: true }`}) None None api.mobile.camera.takePicture() If api.mobile.exists(), will open up a modal with the following options New Picture{\" \"} and Upload. None Promise<octet-stream> api.mobile.dutyStatusLog.getCurrentDrivingLog() Gets the current DutyStatusLog of the driver. None Promise that resolves with a {\" \"} DutyStatusLog {\" \"} object. api.mobile.dutyStatusLog.get() Gets all of the DutyStatusLogs for the current user None Promise that resolves with an array of {\" \"} DutyStatusLog {\" \"} objects. api.mobile.dutyStatusLog.add() Adds a new DutyStatusLog. Note: The log will not be immediately added with this method, it will be synced during the next drive sync cycle. DutyStatusLog: Object Required properties: dateTime: String, device: Object, driver: Object, status: String, origin: String Promise that resolves with the newly added{\" \"} DutyStatusLog {\" \"} object api.mobile.navigate() Navigates to default pages on Geotab Drive. url: String (REQUIRED) String Valid page values: assets, hos, hos/logs, dvir, messaging, inspection, and settings.{\" \"} Note: param will append the string at the end of the URL path with a comma ',' as a delimiter Void api.mobile.listenTo() Event listener that executes the specified callback function whenever a change on the state is detected Callback Function e.g.{\" \"} listenTo((newState) ={`>`} {`{ console.log(JSON.stringify(newState)); }`}) Void api.mobile.shipment.get() Gets the{\" \"} ShipmentLogs {\" \"} for the device. None Returns an array of{\" \"} ShipmentLogs . Note that the method will return all devices that have been added and removed during the current session. The list should be filtered by the activeTo property according to the requirement. api.mobile.shipment.add() Adds a new{\" \"} ShipmentLog {\" \"} ShipmentLog: Object {`{driver: {id: '' }, activeFrom: '', dateTime: '', shipperName: '', commodity: ''}`} Promise that resolves with the{\" \"} ShipmentLogs {\" \"} object that was added. api.mobile.shipment.remove() Removes the specified{\" \"} ShipmentLog {\" \"} by setting the activeTo datetime string to the current date. shipmentId: String Promise that resolves with the{\" \"} ShipmentLogs {\" \"} object that was removed. api.mobile.textMessage.add() Adds a new{\" \"} TextMessage {\" \"} undefined api.mobile.textMessage.get() Returns any{\" \"} TextMessage {\" \"} received in the current session. None A promise that resolves with an array of{\" \"} TextMessages {\" \"} api.mobile.textMessage.set() Allows to update the properties for an existing{\" \"} TextMessage {\" \"} TextMessage: Object e.g. {`{id: 'bd1', device: {id: 'b1'}, isDirectionToVehicle: true, messageContent: {message: 'Message', contentType: 'Normal'} }`} Note: An existing message ID is needed to modify the message. Promise that resolves with the modified{\" \"} TextMessages {\" \"} api.mobile.user.get() Retrieves driver information includeAllDrivers: boolean Default: true Promise that resolves with an array of{\" \"} Driver {\" \"} objects api.mobile.user.getHosRuleSet() Gets the{\" \"} HosRuleSet {\" \"} for the current driver None Promise that resolves with the{\" \"} HosRuleSet {\" \"} object api.mobile.user.getAvailability() Gets driver availability None Promise that resolves with{\" \"} DutyStatusAvailability {\" \"} object api.mobile.user.getViolations() Gets driver violations None Promise that resolves with an array of{\" \"} DutyStatusViolation {\" \"} objects api.mobile.vehicle.get() Retrieves current vehicle information None Promise that resolves with an object with vehicle information. api.mobile.trailer.get() Retrieves trailer information None Promise that resolves with an array of trailer objects api.mobile.trailerAttachment.get() Retrieves trailerAttachment data None Promise that resolves with an array of trailer attachment objects state.device Get the current vehicle that is being connected to the mobile device None String state.driving Mobile device is detected as driving with the current vehicle None Boolean state.charging Mobile device is being powered None Boolean state.background Geotab Drive application is running in the background None Boolean state.online Mobile device has internet access None Boolean state.deviceCommunicating Telematics device is communicating to the server None Boolean state.gpsConnected Mobile device has GPS enabled None Boolean Drive app v4.1.0+ It's possible to open different applications like prontoforms or native calendar from add-ins. To do so, it's important to construct correct URI schema string and pass it to{\" \"} window.open. For example: Make sure to read carefully documentation of the app you're trying to open to use correct schema. For example, to open twitter application from addin you should use: You can't use just twitter:// as it's not correct and app won't open. You need to specify which page you want to open:{\" \"} messages, account etc. To open webpage you need to use the same method, but with this notation: _blank is important, especially for iOS devices On Android and iOS devices with the Geotab Drive app installed, a URL handler is registered which can: Launch Drive, Navigate to a specified page in Drive, and Automatically log into Drive with a token (session ID, user name, and database name) retrieved by authenticating against MyGeotab's API in a third-party app Deep linking is used to provide a seamless link from a third-party app into the Geotab Drive app. On the most basic level, launching Geotab Drive to the main screen, can be executed by creating a link to: From there, it's possible to automatically login and/or link to specific modules or pages of the Geotab Drive app. For more information on how to Automatic Login, Single Sign-on and Navigate to Desired Page on Geotab Drive app, please refer to{\" \"} Geotab Drive Single Sign-on and Deep Linking Geotab Drive Add-In SDK DriverRegulation (Daily Totals)","link":"/drive/addIns/driveAddIns","breadCrumb":["Drive","Add-Ins","Drive Add-Ins"],"category":"guide"},{"id":1,"title":"Introduction","headers":["Introduction"],"headerIds":["introduction"],"content":"","link":"/drive/introduction","breadCrumb":["Drive","Introduction"],"category":"guide"},{"id":2,"title":"Python Code Samples","headers":["Spoof an external Device","Spoof a Go Device"],"headerIds":["spoof-an-external-device","spoof-a-go-device"],"content":"All Python sample code was tested using Python 3.5.2 (64-bit) running under Windows 10. You will need to install pySerial to test these samples. {`pip install pyserial`} Run this python script while connected to a GO device via an IOX-RS232 > 8)%256, 0, 0])) print(\"sending handshake response\") print([hex(b) for b in handshakeResponse]) tester.write(handshakeResponse) time.sleep(1) # send some status data statusDataID = 35349 #status data id of \"Test engine measurement / fake data\" dataValue = 200 #data value of 10 will show on MyGeotab (because of the conversion factor of 0.1 and offset of -10) dataMessage = createMessage(bytes([0x80, 6, statusDataID%256, (statusDataID >> 8)%256, dataValue%256, (dataValue >> 8)%256, 0, 0])) print(\"sending status data\") print([hex(b) for b in dataMessage]) tester.write(dataMessage) print(\"waiting for data ACK...\") readback = tester.read(6) print([hex(b) for b in readback]) if len(readback) == 6 and readback[1] == 2: print(\"data ACK received\")else: print(\"invalid response\")`} /> If the script executes successfully against an awake (ideally with Ignition On) GO device, the output should resemble: Run this Python script to emulate a GO device while your external device is connected via the RS232 port: ","link":"/hardware/codeSamples/python","breadCrumb":["Hardware","Code Samples","Python"],"category":"guide"},{"id":3,"title":"IOX Add-On Hardware Design Guide","headers":["System introduction","Hardware structure","Mini-B USB plug input","Power design","CAN bus communication","Mechanical design"],"headerIds":["system-introduction","hardware-structure","mini-b-usb-plug-input","power-design","can-bus-communication","mechanical-design"],"content":"The GO Device is a small yet extremely powerful telematics measurement device. It offers Geotab IOX® expandability for hardware Add-Ons, which could be provided by Geotab or a third party. This hardware design guide is suggested reading for any third-party manufacturer who wants to design and build devices that integrate with the GO Device. For more information on the IOX communication protocols, see the IOX Protocol document.  The third-party device can get 12 V/24 V power from the GO Device, communicate with the GO Device through the CAN bus, and perform its specific service for end customers. The GO Device provides a mini-B USB receptacle for connecting IOXs and third-party devices. This USB receptacle does not carry USB signals or power, but does provide the CAN bus and power from the vehicle. Two small plastic guards are placed around this receptacle to prevent misinsertion of a real USB plug. The corresponding connector on an IOX or a third-party device should be a mini-B USB plug.  Multiple IOXs can be connected to the GO Device through a daisy chain configuration. The IOX device itself has a mini-B USB receptacle that can provide CAN bus and power from the vehicle to the next device in the chain. A mini-B USB receptacle needs to be added to a third-party device if this third-party device is not meant to be the last device in a daisy chain or if more than one third-party device will be used in the chain. The diagram and table below provides pin numbering and definitions.   Pin No. Definition Note 1 NC This pin must be left unconnected 2 CAN- 3 CAN+ 4 GND 5 Power The GO Device provides overvoltage protection, undervoltage protection, and overcurrent protection for the battery power supply to the IOX interface. The third-party device must work properly with a power input voltage range between 6 V and 33 V. A current of up to 3 A could be supplied from the GO Device to be shared by all the IOX devices in the daisy chain. It is suggested that the current consumption be limited to 2.5 A for one third-party device if the device is the only one connected to the GO Device. The maximum current should be calculated during hardware design if more than one devices is intended to be in the daisy chain. The GO Device will cut off power if the current exceeds 3 A for more than 18.6 ms {\"(\"}minimum{\")\"}. Reverse current to the power line must be prevented, for which a diode on the power input would be sufficient. The third-party device must enter Sleep Mode when notified by the GO Device or when it fails to communicate with the GO Device after a reset. The current of the device in Sleep Mode should not exceed 2 mA at 12 V. The preferred Sleep Mode current is below 0.4 mA. The CAN controller should support CAN 2.0B @ 500 kbps. The CAN transceiver must be compatible with ISO 11898. SAE J2284 and GMW3122 are optional, but better to have. Suggested parts at the time of writing are Atmel ATA6561, NXP TJA1042TK/3, Microchip MCP2562T and TI TCAN1042. The CAN transceiver should enter Standby Mode to save power when the device is in Sleep Mode. In Standby Mode, the receiver either remains active or RXD is with Wake-Up Request function{\" \"} {\"(\"}A wake-up request is output to RXD {\"(\"}driven low{\")\"} for any dominant bus transmissions longer than a filter time.{\")\"} Correspondingly, the MCU should have ability to be woken up by a CAN message or an external interrupt. A 120-ohm differential impedance must be implemented for the CAN bus in the design of the PCB. If the third-party device is designed without a USB receptacle, a 120-ohm terminal resistor should be added to the CAN bus, otherwise the CAN bus terminal resistor is not allowed on the board. Below is the mechanical size for a USB mini-B plug of the IOX device. All dimensions are given in mm.  The suggested cable length is between 30 cm to 100 cm, which is based on the multiple devices in the daisy chain. The length of cable may be longer if the system of the application is with fewer devices. The positive and negative wire of the CAN bus need to be a twisted pair with inner shielding around just them, with a minimum twisting ratio is 1 twist every 25.4 mm. It is suggested that you shield the whole wires and that you short the drain wires of both shields {\"(\"}the shield for whole wires and the shield for the CAN bus{\")\"} to the metal body of the USB plug. Below is the mechanical size for a USB mini-B socket of the IOX device. All dimensions are given in mm.  It is suggested that an IOX socket is included where possible so additional IOX devices can be daisy chained.","link":"/hardware/guides/hardwareDesignGuide","breadCrumb":["Hardware","Guides","Hardware Design Guide"],"category":"guide"},{"id":4,"title":"IO Expander Protocol","headers":["General Description","Polling","Waking Up The Go Device","Commands","Sequence Diagrams"],"headerIds":["general-description","polling","waking-up-the-go-device","commands","sequence-diagrams"],"content":"After powering up, the GO device will poll all IOXs every 7 seconds. Each IOX must respond to this poll by obeying the ACK rules. Unless otherwise described, most commands can only be sent after the first poll (handshake) is completed with the GO device. Device Removed If the GO device fails to detect an IOX that used to be connected (that is, the IOX was disconnected), the GO device will remove the IOX from its internal database after 5 attempts (35 seconds) and will make the slot available for a new IOX that can be connected at any time. New Device Any IOX that is connected to the GO device must respond to the poll request. The GO device will notice the new IOXs and add them to its internal database. Undocumented Messages An IOX could receive messages from the GO device that are not documented here. The IOX must be capable of handling this situation by ignoring/discarding the unknown messages. Handshake  Sleep/Wake  Data Logging  GO Info  PubSub  MIME ","link":"/hardware/guides/messagingProtocol","breadCrumb":["Hardware","Guides","IO Expander Protocol"],"category":"guide"},{"id":5,"title":"MIME Protocol","headers":["MIME","Prerequisites"],"headerIds":["mime","prerequisites"],"content":"The MIME protocol can be used to exchange data between MyGeotab and an external device when the total message size exceeds the packet. When sending messages from MyGeotab to the external device: MyGeotab will break the larger message into smaller packets for transmission. When sending messages from the external device to myGetoab: MyGeotab will reassemble the individual packets into the complete message. An external device must be connected, and its external device ID must be in the range of 4200-4299 This connection is established using IOX-specific messaging, such as{\" \"} message 0x1D {\" \"} for custom IOX devices or{\" \"} message 0x81 {\" \"} for IOX-RS232/USB Contact Solutions Engineering {\" \"} with integration details if you require an external device ID for your integration Protocol The complete MIME message is broken into chunks and sent as binary data packets. The first byte within the message is a sequence counter. All the remaining bytes contain the MIME data. Binary Data Packets To accommodate external devices with memory constraints, the packet size is adjustable when sending messages to/from MyGeotab. The packets have a maximum size of 1000 bytes. {\"\"} Bytes Position Sequence number [1] 1 0 MIME data x 1 [1] A sequence number of 0 is only used for the first packet. The sequence number increments by 1 for each subsequent packet. If the sequence number reaches 255 (0xFF) and more packets need to be sent, the sequence number must reset to a value of 1 and continue counting. MIME Data {\"\"} Bytes Position MIME type length = x 1 0 MIME type in ASCII x 1 Payload Length = y 4 1 + x Binary Payload y 5 + x Acknowledge Message When transferring MIME data from the external device to MyGeotab, once the complete message is received MyGeotab will reply with an acknowledge message indicating the total number of payload bytes received. {\"\"} Bytes Position Sequence Number = 0 1 0 MIME type length = 3 1 1 MIME type in ASCII = 'ACK' 3 2 Payload Length 4 5 Total Number of Payload Bytes Received x 9 Example This is an example of binary data packets for image data transferred using the MIME type “image/jpeg”. The image size is 83000 bytes. The packet size is 235. First Packet: {\"\"} Bytes Position Sequence number = 0 1 0 MIME type length = 10 1 1 MIME type (“image/jpeg”) 10 2 Payload Length = 83000 4 12 Binary Payload (the first 219 bytes) 219 16 Second Packet: {\"\"} Bytes Position Sequence number = 1 1 0 Binary Payload (the next 234 bytes) 234 1 MyGeotab API To send/receive messages between MyGeotab and the external device, please download the source code of the Starter Kit sample, and replace the{\" \"} Sample API {\" \"} with the following script. The alternative is to paste the script in the Runner. MIME Messages From MyGeotab To The External Device: Retrieving MIME Data From MyGeotab: Once the data has been sent to the cloud, you can use the MyGeotab SDK to pull the message content out of the target database. For each MIME payload, the data is stored within a single TextMessage Object and can be retrieved using the Get method (search criteria can be added): The payload is stored in MyGeotab in Base64 encoded format. Decoding this payload from Base64 to bytes should yield the expected content which was passed through. In the event that the database has multiple devices sending MIME data at different times, you may want to specify the originating device and/or filter by the time interval during which MIME data was sent: 0) { console.log(\"base64 data for first TextMessage: \", textMessageResult[0].messageContent.data); } }, function(textMessageError) { console.error(\"TextMessage search failed: \", textMessageError); });}, function(deviceError) { console.error(\"Device search failed:\", deviceError);});`} />","link":"/hardware/guides/mimeProtocol","breadCrumb":["Hardware","Guides","MIME Protocol"],"category":"guide"},{"id":6,"title":"Hardware Development Kit","headers":["Introduction","Integrating with the Input-Output Expander (IOX)","Technical hardware toolkit","Requesting sample hardware"],"headerIds":["introduction","integrating-with-the-input-output-expander-iox","technical-hardware-toolkit","requesting-sample-hardware"],"content":"Geotab supports Hardware Add-On integration through the CAN, USB, RS232, and BLE interfaces. The Add-On Protocols section outlines the integration process for all four interfaces. Geotab's open platform allows for expandability to support the unique data sets of any Hardware Add-On. The GO device can currently report Hardware Add-On Data Types found on{\" \"} MyGeotab Diagnostics . When using Geotab's Hardware Add-On protocols, it is important not to send excessive amounts of data to the GO device. This can be assured by only sending data when it is completely necessary and avoiding the sending of repetitive values. The GO device will stop recording data from the Hardware Add-On device if excessive Add-On data is detected. When this condition occurs, the following will appear in the Fault Data for the GO device within MyGeotab: \"Status data no longer being saved due to excessive data\", \"Third-party data no longer being saved due to excessive data\" or \"Bluetooth data no longer being saved due to excessive data\". In order to re-enable data logging for the Hardware Add-On, the GO device will need to be completely disconnected from power and then powered back up again. Hardware Add-Ons communicate with the GO device using an IOX corresponding to the aforementioned interfaces, namely the{\" \"} IOX-CAN ,{\" \"} IOX-USB ,{\" \"} IOX-RS232 ,{\" \"} IOX-BT , and any Custom IOX. The format of data sent through an IOX could vary with the type of IOX, which is shown in the table below. All IOXs support data transfer from Add-On to GO device, while some IOXs also support data transfer from GO device to Add-On. IOX Type Add-On Protocol Status Data Custom Data Binary Data Data Transfer From GO Device To Add-On IOX-RS232 Y Y Y Y Y IOX-USB Y Y Y Y Y IOX-CAN Y Y N N Y IOX-BT Y Y Y N N Custom IOX Y Y Y Y Y Hardware Add-On data can be sent via any of these IOX and will be be transmitted to the Geotab server in several formats, namely \"Status Data\", \"Custom Data\", and \"Binary Data\". Data in all three formats may be retrieved via API. However, only Status Data can be queried within MyGeotab by navigating to{\" \"} Engine {\"&\"} Maintenance {\">\"} Engine {\"&\"} Device… {\">\"} Measurements. Only with Status Data, it is possible to create meaningful reports or leverage the rules engine via MyGeotab. Geotab offers a wide range of IOXs, some of which are stand-alone solutions. IOXs such as IOX-CAN, IOX-USB, and IOX-RS232 connect GO devices with Hardware Add-Ons, while others like IOX-GOTALK, etc. are readily available solutions. Check out our full{\" \"} IOX offerings . The toolkit provides helpful integration resources and context in addition to the existing documentation and make it easier for partners to get up and running. We have also moved to the new DIG platform for Custom Telematics Device integrations and included DIG documentation linked from the toolkit as well (while slating the MyAdmin documentation for deprecation). Please refer to{\" \"} Geotab Integrations: Hardware Technical Toolkit {\" \"} for further details. If you are already working with a Geotab reseller or a Geotab employee, please procure hardware with their help. Otherwise, please submit{\" \"} this form .","link":"/hardware/introduction","breadCrumb":["Hardware","Hardware Introduction"],"category":"guide"},{"id":7,"title":"Add-On Protocol - BLE","headers":["Advertising packet"],"headerIds":["advertising-packet"],"content":"External devices can communicate with the Geotab GO device through the Third-Party Bluetooth Low Energy {\"(\"}BLE {\")\"} protocol described on this page. The hardware interface is the{\" \"} IOX-BT . The IOX-BT is a read-only BLE sensor hub that supports up to 200 in-range beacons and will detect in/out of range for any Bluetooth beacon with a public MAC Address. However, sending any other data points requires the beacon to conform to the specified Geotab BLE protocol. Rate limit is 1200 logs per 10 minutes. If you exceed the rate limit, the GO device will stop taking data from the IOX. Because it can only read packets, no handshake is required. Two-way communication and device pairings are not possible. Offset Value Description 1 0x02 AD length 2 0x01 Flags 3 0x06 -LE General Discoverable Mode-BR/EDR Not Supported 4 0x06 +Optional Length AD length 5 0xFF Manufacturer Specific Data 6 0x0275 Geotab's Company ID 8 0x00 Advertising packet version number 9 0xXX Tx Power Level 10 0xXX Battery Level Optional Length{\"(\"}11 to 31{\")\"} 0xXX Optional Information identifier 3 bytes Optional Information data … … 0xXX Optional Information identifier X bytes Optional Information data Required data types Description Unit type Range Tx Power Level Sint 8 Resolution: 1 dBmMin: -100 dBmMax: 20 dBm Battery Level Uint 8 Resolution: 1 %Min: 0%Max: 100% Optional information types These information types are optional and are not part of the required packet structure. Each entry must be preceded by the corresponding information identifier byte. If multiple information entries are used in the same advertisement packet, they should be arranged in an incrementing order based on their information identifier. The currently defined identifiers are listed in the table below. Geotab will define new identifiers for any new sensors, as required. You must use the IDs as defined by Geotab. If there is undefined data, contact us via the Help Desk and we will define the data and send you the required ID. Information identifier Description Unit type Length {\"(\"}bytes{\")\"} Units 0 to 4 Reserved 5 Firmware Version FP24 3 None 6 Accelerometer Event Counter FP24 3 None 7 Temperature FP24 3 Degrees Celsius {\"(\"}°C{\")\"} 8 Illuminance FP24 3 Lux {\"(\"}lx{\")\"} 9 Relative Humidity FP24 3 Percent {\"(\"}%{\")\"} 10 Barometric Pressure FP24 3 Pascals {\"(\"}Pa{\")\"} 11 Altitude FP24 3 Meters {\"(\"}m{\")\"} 12 Particulate Matter {\"(\"}less than 1 µm{\")\"} FP24 3 Micrograms per cubic meter {\"(\"}µg/m3{\")\"} 13 Particulate Matter {\"(\"}less than 2.5 µm{\")\"} FP24 3 Micrograms per cubic meter {\"(\"}µg/m3{\")\"} 14 Particulate Matter {\"(\"}less than 10 µm{\")\"} FP24 3 Micrograms per cubic meter {\"(\"}µg/m3{\")\"} 15 Nitric Oxide FP24 3 Parts per million {\"(\"}ppm{\")\"} 16 Nitrogen Dioxide FP24 3 Parts per million {\"(\"}ppm{\")\"} 17 Carbon Monoxide FP24 3 Parts per million {\"(\"}ppm{\")\"} 18 Ammonia FP24 3 Parts per million {\"(\"}ppm{\")\"} 19 Methane FP24 3 Parts per million {\"(\"}ppm{\")\"} 20 Ethanol FP24 3 Parts per million {\"(\"}ppm{\")\"} 21 Hydrogen FP24 3 Parts per million {\"(\"}ppm{\")\"} 22 Carbon Dioxide FP24 3 Parts per million {\"(\"}ppm{\")\"} 23 Fuel Level FP24 3 Percent {\"(\"}%{\")\"} 24 to 199 Reserved{\"(\"}for future data types{\")\"} FP24 3 200 to 229 Reserved 230 to 239 Generic Byte {\"(\"}1 to 10{\")\"} UINT8 1 None 240 to 249 Generic Timer {\"(\"}1 to 10{\")\"} UINT8UINT16 12 Event CounterUnits Of Time 250 to 253 Reserved 254 Wakeup Event UINT8 1 None 255 Custom Data UINT8 X None FP24 (floating point 24 bit) Same as FP32 but the 8 least-significant bits dropped. S E E E E E E E E F F F F F F F F F F F F F F F 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 {\"[\"} -2^16, 2^16 {\"]\"} can be exactly represented {\"[\"} -2^17, -2^16 -1 {\"]\"} or {\"[\"} 2^16 +1, 2^17 {\"]\"} rounded to a multiple of 2 {\"[\"} -2^18, -2^17 -1 {\"]\"} or {\"[\"} 2^17 +1 2^18 {\"]\"} rounded to a multiple of 4 … Infinity at: 2^128 FP24 conversions: Action Store Convert to FP32FP24 = FP32 » 8 Read FP32 = FP24 « 8Read as FP32 Note: For all information types that use the FP24 format, a new log will be generated for any change in the data. For example, a change in temperature from 2°C to 2.000061°C would trigger a new log. Some implementations may only require a reporting resolution of 1°C. If an excessive number of logs are generated, we will disable reporting on BLE data. The onus is on the implementer to choose an appropriate reporting resolution for their data. Generic byte The Generic Byte type can store one byte of data {\"(\"}0 to 255{\")\"}. It can be used to count the number of times a button is pressed, or simply store the state of a toggle switch {\"(\"}0 or 1{\")\"}. Any data changes will generate a new log. Generic timer The Generic Timer allows keeping track of an elapsed time. The Units Of Time are not specifically defined and can be chosen by the implementor. It may make sense to measure some durations in hours, while others may warrant seconds. The Units Of Time may continuously increment. A new log will not be saved until a new event counter value is reported. The Generic Timer can be associated with other data types. For example, you can associate Generic Timer 1 with temperature to indicate the time when a chosen temperature threshold was exceeded. Wakeup event A custom parameter is used to configure the IOX-BT to wake up periodically to check for any wakeup events from beacons within range. The wakeup duration is 1s every 30s while sleeping. This periodic wakeup can be enabled using the following custom parameter: {``} The implementor of this protocol should increase the frequency of advertisements sent during an attempted wakeup event. We recommend a 100ms advertisement interval that persists for a minimum of 1 minute. When sending the wakeup event as part of the advertisement data, a value of 0x00 means “no event”. Anything greater than 0 that has not already been reported will cause the GO device to wake up and report on the beacon advertisements. The event is only used as an indication for reporting any changes in the rest of the advertisement data. The actual contents of the alert event byte will not be sent/reported. Custom data Arbitrary data can be placed in the custom data segment. The data will not be interpreted by MyGeotab, but will be accessible through the API. The onus is on the implementor to extract and interpret the data. The data must be preceded by the length. The length is limited by the amount of data that can fit in the optional information section. The maximum custom data length is 18 bytes. Any data changes will generate a new log. Offset Description 1 Length 2 to Length Custom Data Example: Type Length Data 255 8 1 2 3 4 5 6 7 8 Message interleaving Message interleaving is not supported. The data types in the packet must remain consistent between advertisements. Example packets Reporting temperature Offset Value Description 1 0x02 AD length 2 0x01 Flags 3 0x06 -LE General Discoverable Mode-BR/EDR Not Supported 4 0x0A AD length 5 0xFF Manufacturer Specific Data 6 0x0275 Geotab's Company ID 8 0x00 Advertising packet version number 9 0xC6 Tx Power Level {\"(\"}-58dBm{\")\"} 10 0x64 Battery Level {\"(\"}100%{\")\"} 11 0x07 Temperature 12 0x00 0x412000 FP24 = 10°C 13 0x20 14 0x41 Reporting a timer Offset Value Description 1 0x02 AD length 2 0x01 Flags 3 0x06 -LE General Discoverable Mode-BR/EDR Not Supported 4 0x0A AD length 5 0xFF Manufacturer Specific Data 6 0x0275 Geotab's Company ID 8 0x00 Advertising packet version number 9 0xC6 Tx Power Level {\"(\"}-58dBm{\")\"} 10 0x64 Battery Level {\"(\"}100%{\")\"} 11 0xF1 Generic Timer 2 12 0x03 Event 13 0xF4 0x01F4 = 500 minutes 14 0x01 Reporting temperature and a timer Offset Value Description 1 0x02 AD length 2 0x01 Flags 3 0x06 -LE General Discoverable Mode-BR/EDR Not Supported 4 0x0E AD length 5 0xFF Manufacturer Specific Data 6 0x0275 Geotab's Company ID 8 0x00 Advertising packet version number 9 0xC6 Tx Power Level {\"(\"}-58dBm{\")\"} 10 0x64 Battery Level {\"(\"}100%{\")\"} 11 0x07 Temperature 12 0x00 0x412000 FP24 = 10°C 13 0x20 14 0x41 15 0xF1 Generic Timer 2 16 0x03 Event 17 0xF4 0x01F4 = 500 minutes 18 0x01 Reporting custom data Offset Value Description 1 0x02 AD length 2 0x01 Flags 3 0x06 -LE General Discoverable Mode-BR/EDR Not Supported 4 0x0F AD length 5 0xFF Manufacturer Specific Data 6 0x0275 Geotab's Company ID 8 0x00 Advertising packet version number 9 0xC6 Tx Power Level {\"(\"}-58dBm{\")\"} 10 0x64 Battery Level {\"(\"}100%{\")\"} 11 0xFF Custom Data 12 0x07 Length 13 0x42 Custom data”Beacon1” in ASCII 14 0x65 15 0x61 16 0x63 17 0x6F 18 0x6E 19 0x31 Reporting temperature + counter + timer + custom data Offset Value Description 1 0x02 AD length 2 0x01 Flags 3 0x06 -LE General Discoverable Mode-BR/EDR Not Supported 4 0x19 AD length 5 0xFF Manufacturer Specific Data 6 0x0275 Geotab's Company ID 8 0x00 Advertising packet version number 9 0xC6 Tx Power Level {\"(\"}-58dBm{\")\"} 10 0x64 Battery Level {\"(\"}100%{\")\"} 11 0x07 Temperature 12 0x00 0x412000 FP24 = 10°C 13 0x20 14 0x41 15 0xE6 Generic Counter 1 16 0x08 Count 17 0xF1 Generic Timer 2 18 0x03 Event 19 0xF4 0x01F4 = 500 minutes 20 0x01 21 0xFF Custom Data 22 0x07 Length 23 0x42 Custom data”Beacon1” in ASCII 24 0x65 25 0x61 26 0x63 27 0x6F 28 0x6E 29 0x31","link":"/hardware/protocolReference/ble","breadCrumb":["Hardware","Protocol Reference","BLE"],"category":"guide"},{"id":8,"title":"Add-On Protocol - CAN","headers":["Integration process","Messages from GO device","Messages from external device","Messages from MyGeotab","Appendix"],"headerIds":["integration-process","messages-from-go-device","messages-from-external-device","messages-from-mygeotab","appendix"],"content":"External devices can communicate with the Geotab GO device through the revised Third-Party Data CAN protocol. The hardware interface will be the{\" \"} IOX-CAN . Two-way communication is supported, allowing a MyGeotab API call to produce messages on the connected CAN network using the IOX-CAN. An initial handshake is required before messages can be produced using the IOX-CAN. The GO device will start processing third-party data if it is properly formatted. Once processed, the third-party data will be saved and sent to MyGeotab as Status Data. The following process should be followed when integrating a third-party device with the GO device using our Third-Party Data CAN Protocol: 1 - Request external device ID Contact{\" \"} Geotab Solution Engineering team {\" \"} to obtain an External Device ID for your third-party device. This will allow us to uniquely identify your device when it connects to a GO device. Thereafter, any connection established by that type of external device will be recorded as Status Data in MyGeotab under the naming format \"[External device name] device connected\". 2 - Request status data IDs There is an extensively defined Status Data ID list which can be found at{\" \"} MyGeotab Diagnostics . Specifics regarding Status Data ID implementations can be found on the README sheet.{\" \"} 3 - Implement the third-party CAN protocol Implement the Third-Party CAN Protocol in the external device as described below. The CAN speed to be used will be 250K or 500K, and the external device should have its CAN transceiver set to normal mode. The IOX CAN will auto-baud between 250K and 500K. CAN ID The CAN ID is an extended frame message (29-bit) and is broken down into 4 bytes, with the most significant byte (MSB) (byte 1) containing 5 bits to make up the 29-bit ID header. A breakdown of the CAN ID is shown below: Byte Description Value Byte 1 MSB, 5 bits 0 Byte 2 and 3 Geotab's Parameter Group Number (PGN) 0x0FDB Byte 4 Message Type Varied Data length (DLC) Indicates how many bytes of data are being sent (up to a maximum of 8). Data All values must be sent with the least significant byte first. Each piece of information related to the third-party device must be sent individually and have its own Status Data ID as part of the message. Note: See Appendix A for an example of raw message data. Handshake An initial Handshake is required in order for the GO device to accept MyGeotab API calls to produce CAN messages from the IOX-CAN. Vehicle ignition must be on during the handshake process. After powering up, the GO device will enter an external device detection cycle. The GO device will listen for a Msg Type 0x81 from the external device. This message is used to indicate that an external device is present. The external device must send this message once per second. The GO device will reply with a Msg Type 0x02 to acknowledge it has received the external device ID. After detecting this response, the external device may stop broadcasting Msg Type 0x81. The MyAdmin API can now be used to produce CAN messages from the IOX-CAN as described in Messages from MyGeotab Msg type 0x02: Third-party data acknowledge Issued by the GO device upon receipt of Third-Party Data from the external device. CAN ID Breakdown Value Byte 1 0x00 Byte 2 (Geotab PGN) 0x0F Byte 3 (Geotab PGN) 0xDB Byte 4 (Message Type) 0x02 Data Length DLC 1 Data Breakdown Data 1 The Message Type acknowledged Msg type 0x81: Third-party device ID Issued by the external device upon powerup once every second until an Acknowledge message (Msg Type 0x02) is received. CAN ID Breakdown Value Byte 1 0x00 Byte 2 (Geotab PGN) 0x0F Byte 3 (Geotab PGN) 0xDB Byte 4 (Message Type) 0x81 Data Length Value DLC 2 Data Breakdown Value Data 1-2 Device ID (assigned by Geotab) Reply: Third-Party Device ID Ack Msg type 0x80: Third-party data as status data Issued by the external device whenever it wants Third-Party Data saved on the GO device. Rate limit is 100 logs per 10 minutes. If you exceed the rate limit, the GO device will stop taking data from the IOX. CAN ID Breakdown Value Byte 1 0x00 Byte 2 (Geotab PGN) 0x0F Byte 3 (Geotab PGN) 0xDB Byte 4 (Message Type) 0x80 Data Length Value DLC 6 Data Breakdown Value Byte 1-2 Status Data ID Byte 3-6 Status Data Reply: Third-Party Data Ack (Msg Type 0x02) Msg type 0x82: Free format third-party data Currently not implemented. Msg type 0x87: Third-party data as priority status data Priority Status Data follows an expedited processing workflow on the GO device, but will otherwise be treated the same as the 0x80 Status Data message. It will also be logged using an Iridium modem connection, if available. CAN ID Breakdown Value Byte 1 0x00 Byte 2 (Geotab PGN) 0x0F Byte 3 (Geotab PGN) 0xDB Byte 4 (Message Type) 0x87 Data Length Value DLC 6 Data Breakdown Value Byte 1-2 Status Data ID Byte 3-6 Status Data Reply: Third-Party Data Ack (Msg Type 0x02) A handshake must be completed before this functionality will work. To send messages from MyGeotab to the external device, download the source code of the{\" \"} Starter Kit {\" \"} sample, and replace the{\" \"} Sample API {\" \"} with the following script. The alternative is to paste the script in the{\" \"} Runner . call \"arbitrationId\": 217055107, //Fixed value do not change \"isAcknowledgeRequired\": true, \"extendedFrameFlag\": true, \"data\": base64_encoded_byte //Replace with your data encoded in base64 }, \"device\": { \"id\": device.id //Replace with device id of interest } }}, function(result) { console.log(\"Done: \", result);}, function(e) { console.error(\"Failed:\", e);});`} /> Appendix A: Raw message data example for IOX-CAN Third-Party Device ID from external device (4208 is a test Device ID). (Device ID: 4208 = 0x1070) CAN ID: 0x000FDB81 DLC: 02 Data: 0x70, 0x10 Third-Party Device ID Acknowledge from GO device CAN ID: 0x000FDB02 DLC: 01 Data: 0x81 … Third-Party Data from External Device (Status Data ID: 9999 = 0x270F, Data Value: 230 = 0x000000E6) CAN ID: 0x000FDB80 DLC: 06 Data: 0x0F, 0x27, 0xE6, 0x00, 0x00, 0x00 Third-Party Data Acknowledge from GO device CAN ID: 0x000FDB02 DLC: 01 Data: 0x80","link":"/hardware/protocolReference/can","breadCrumb":["Hardware","Protocol Reference","CAN"],"category":"guide"},{"id":9,"title":"Add-On Protocol - RS232 & USB","headers":["Special requirements","Integration process","Messages from the GO device","Messages from external device","Appendices"],"headerIds":["special-requirements","integration-process","messages-go-device","messages-from-external-device","appendices"],"content":"External devices can communicate with a Geotab GO device through the Third-Party RS232 and USB protocols linked below. Two-way communication is supported, allowing a MyGeotab API call to produce messages from the IOX device to reach the external device. The hardware interface is one of the following: IOX-RS232 F/M IOX-USB Enabling IOX-USB data transfer To enable third-party data communication on the IOX-USB, apply the following custom parameter to the GO device through MyGeotab: {` `} The GO device will automatically upgrade to the ProPlus rate plan once third-party data transfer begins. IOX-USB communication consideration The IOX-USB operates as a USB 2.0 full-speed host. The maximum data transfer rate is 12 Mbit/s. The IOX-USB can use two methods to enumerate a USB device: The{\" \"} Android Open Accessory protocol (AOA) . This{\" \"} sample project {\" \"} can be used as a framework. USB-CDC (Communications Device Class) Powering a device using the IOX-RS232 and IOX-USB Both the IOX-USB and the IOX-RS232 can provide power to an Add-On Device. The IOX-USB can provide 1.5A at 5V as a power output. The IOX-RS232 supports 900mA at 12/24V to the external red (power) and black (ground) wires. However, it is not required to power the Add-On device using the IOX-RS232. Grounding a device Even if the Hardware Add-On has a separate connection to vehicle power and ground, it is still recommended to connect the Add-On ground to the ground wire of the IOX-RS232, as this improves signal integrity. Serial port settings for Add-Ons Geotab recommends that RS232/USB serial ports are programmed in accordance with the following specifications: Baud Rate: 9600 or 115200. Note: the device is equipped with autobaud detection, so other standard rates are acceptable. Parity: None Stop Bits: 1 Flow Control: None The following process should be followed when integrating a third-party device with the GO device using our Third-Party Data Protocol: Contact Solutions Engineering Contact the{\" \"} Geotab Solutions Engineering team {\" \"} with a detailed integration proposal, which should include: A name for the integration The interfacing hardware Data types that will be sent to MyGeotab The required Status Data Direction of data transfer Expected timelines for integrating The Solutions Engineering team will respond with followup questions to define the integration, and assign an External device ID and any Status Data IDs that would be required. An additional resource is the{\" \"} Hardware Integration Toolkit {\" \"} with integration walkthrough. Using status data IDs There is an extensively defined Status Data ID list which can be found at{\" \"} MyGeotab Diagnostics . Specifics regarding Status Data ID implementations can be found on the README sheet. Handshake An initial Handshake is required in order for the GO device to accept third-party data. Vehicle ignition must be on during the handshake process. After powering up, the GO device will enter an external device detection cycle. The external device will be powered for 72 seconds. In this interval, the GO device will listen for a{\" \"} Handshake Sync from the external device. The Handshake Sync is used to indicate that an external device is present. For implementations using the IOX-RS232, the Handshake Sync is also used to detect baud rate. The external device must send the Handshake Sync message once per second. If a Handshake Sync message is not detected from the external device after 72 seconds, the external device is powered down for 5 seconds, then powered up again to restart the detection cycle. The GO device will reply to a Handshake Sync with a Handshake Request. The external device must reply with a Handshake Confirmation message within 2 seconds. If the external device would like an acknowledgment from the GO device that it received the Handshake Confirmation message, the corresponding flag in the Handshake Confirmation message may be set. After sending the Handshake Confirmation message, the external device can begin to send third-party data as required. For every{\" \"} Third-Party Data Message sent, the GO device will reply with a{\" \"} Data Acknowledge message. If the external device receives no response to a Third-Party Data message, it must restart the handshake process — returning to step 1 above. The GO device may send a Handshake Request message at any time after the initial handshake. The external device must respond with a Handshake Confirmation message. If the external device does not respond, it must restart the handshake process — returning to step 1 above. Checksum Each message contains a 2-byte Fletcher's Checksum calculated across all the bytes of the message except the checksum itself. The checksum values are bytes, and as such overflow from 255 (0xFF) to 0 (0x00). The bytes used for the checksum calculation are all the bytes up to the checksum byte, including STX, LEN, TYPE, but not including ETX. Checksum calculation pseudocode: Data endianness All values must be sent using Little-Endian Byte Order, meaning the least significant byte is first. Msg type 0x01: Handshake request Issued by the GO device upon receipt of the Handshake Sync, and periodically re-sent to confirm that the external device is still connected. Bytes Position STX (0x02) 1 0 Message Type = 0x01 1 1 Message Body Length = 0 1 2 Checksum 2 3 ETX (0x03) 1 5 Reply: Handshake Confirmation (Msg Type 0x81) Msg type 0x02: Third-party data acknowledge Issued by the GO device upon receipt of Third-Party Data from the External Device. Bytes Position STX (0x02) 1 0 Message Type = 0x02 1 1 Message Body Length = 0 1 2 Checksum 2 3 ETX (0x03) 1 5 Msg type 0x21: GO device data Issued by the GO device every 2 seconds to a connected Enhanced Hours Of Service Device (ID: 4141), or periodically when a 0x85 request message is received. An Enhanced Hours Of Service Device must ACK this message with a 0x84 message. If the data is requested periodically using the 0x85 message, the ACK is optional. Bytes Position STX (0x02) 1 0 Message Type = 0x21 1 1 Message Body Length >= 52 [1] 1 2 Date / Time [2] 4 3 Latitude 4 7 Longitude 4 11 Road Speed [3] 1 15 RPM 2 16 Odometer [4] 4 18 Status Flags (from LSB): 1st bit: 1 = GPS Valid 2nd bit: 1 = Ignition On 3rd bit: 1 = Engine Bus Activity 4th bit: 1 = Date/Time Valid 5th bit: 1 = Speed From Engine 6th bit: 1 = Odometer From Engine 1 22 Trip Odometer [4] 4 23 Total Engine Hours 4 27 Trip Duration [5] 4 31 Deprecated = 0 4 35 Driver ID [6] 4 39 GO Device Serial Number 12 43 Checksum 2 Length + 3 ETX (0x03) 1 Length + 5 Reply: Device Data Ack (Msg type 0x84) All implementations of this message must cater for the message length increasing in the future. “Date/Time” is a 'seconds' counter starting from 1st of January 2002. If Road Speed from the engine is not available, GPS speed is used. Increase of odometer since the most recent ignition on. If Odometer is not available, GPS device distance is used. Time passed since the most recent ignition on. Driver ID is only available when using the IOX-NFC. Conversions Data Conversion Units Engine Road Speed 1 km/h Odometer 0.1 km RPM 0.25 RPM Lat/Long 1e-7 degrees Engine Hours 0.1 h Trip Duration 1 s Msg type 0x22: Binary data response Issued by the GO device upon acceptance or rejection of either a Binary Data (0x86), an Extended Application Specific Data (0x88), or an Extended Binary Data (0x8A) message from the external device. Bytes Position STX (0x02) 1 0 Message Type = 0x22 1 1 Message Body Length = 4 1 2 Binary data transmission success 0 = Rejected 1 = Accepted 1 3 Reserved 3 4 Checksum 2 7 ETX (0x03) 1 9 Msg type 0x23: Binary data packet Issued by the GO device upon receipt of a Binary Data packet of 255 bytes or less from MyGeotab destined for the external device. This message format is only used if the corresponding “Binary Data Packet Wrapping” flag has been set by the external device during the Handshake Confirmation. The payload of the binary data packet message will be the raw bytes sent from MyGeotab. Bytes Position STX (0x02) 1 0 Message Type = 0x23 1 1 Message Body Length = x (0 - 255) 1 2 Binary Data x 3 Checksum 2 3+x ETX (0x03) 1 5+x Msg type 0x24: Extended application specific data to external device Sent by the GO device to the external device. Can be in response to a 0x88 message and used for payloads larger than 1 byte. Currently only used for Keyless. Bytes Position STX (0x02) 1 0 Message Type = 0x24 1 1 Message Body Length = x 2 2 Binary Data x 4 Checksum 2 4+x ETX (0x03) 1 6+x Msg type 0x25: Extended binary data packet Issued by the GO device upon receipt of a Binary Data packet of 256 bytes or more from MyGeotab destined for the external device This message format will only be used if the corresponding “Binary Data Packet Wrapping” flag has been set by the external device during the Handshake Confirmation. The payload of the binary data packet message will be the raw bytes as sent from MyGeotab. The maximum length currently supported by the GO is 1000 bytes. Bytes Position STX (0x02) 1 0 Message Type = 0x25 1 1 Message Body Length = x (256 - 1000) 2 2 Binary Data x 4 Checksum 2 4+x ETX (0x03) 1 6+x Msg type 0x26: Protobuf data packet Available with add-on protocol versions 1.2 and later. Issued by the GO device in response to 0x8C. Also issued by the GO device to publish information for the topics subscribed by the Add-On device. Bytes Position STX (0x02) 1 0 Message Type = 0x26 1 1 Message Body Length = x (1 - 255) 1 2 Data Payload Protobuf (1-255) x 3 Checksum 2 3+x ETX (0x03) 1 5+x The payload is protobuf-encoded. Please see{\" \"} Protobuf Schema {\" \"} for details. Msg type 0x27: Add-On protocol version to external device Sent by the GO device to an external device as a reply to the Add-On protocol version request (0x8B). Bytes Position STX (0x02) 1 0 Message Type = 0x27 1 1 Message Body Length = 4 1 2 Protocol major version 2 3 Protocol minor version 2 5 Checksum 2 7 ETX (0x03) 1 9 Handshake sync (auto-BAUD detect for RS232) Issued by an external device every second until the Handshake Request is received. Bytes Position Sync Char (0x55) 1 0 Reply: Handshake Request (Msg Type 0x01) Msg type 0x81: Handshake confirmation Issued by the external device when it receives the Handshake Request. Bytes Position STX (0x02) 1 0 Message Type = 0x81 1 1 Message Body Length = 4 1 2 External Device ID (assigned by Geotab) 2 3 Flags 1st bit: Handshake Confirmation ACK 2nd bit: Binary Data Packet Wrapping 3rd bit: Self Powered External Device All other bits:Reserved for future implementation, must be set to 0 2 5 Checksum 2 7 ETX (0x03) 1 9 Handshake Confirmation ACK: 0: No Ack to Handshake Confirmation message will be sent by the GO device. 1: The Handshake Confirmation is to be acknowledged with a Third-Party Data Acknowledge message. Binary Data Packet Wrapping: 0: The passthrough data from the server will be passed to the external device without modification. 1: The passthrough data from the server will be wrapped in a Binary Data Packet message before being sent to the external device. Self-Powered External Device: 0: The External Device receives power from the IOX. After waking up, the IOX will restore power to the External Device and wait for the handshake to complete. 1: The External Device has its own power source. The IOX will not wait for the handshake and will assume it can initiate communication with the External Device immediately after waking up. Msg type 0x80: Third-party data as status data Issued by the external device whenever it requires Third-Party Data to be saved on the GO device as Status Data. Rate limit is 100 logs per 10 minutes. If you exceed the rate limit, the GO device will stop taking data from the IOX. Bytes Position STX (0x02) 1 0 Message Type = 0x80 1 1 Message Body Length = 6 1 2 Data ID (assigned by Geotab) 2 3 Data 4 5 Checksum 2 9 ETX (0x03) 1 11 Reply: Third-Party Data Ack (Msg Type 0x02) Msg type 0x82: Free format third-party data Issued by the external device whenever it wants Third-Party Data to be saved on the GO device in a free format (1 to 27 bytes) that will be saved in MyGeotab as Custom Data. Rate limit is 500 logs per 10 minutes. If you exceed the rate limit, the GO device will stop taking data from the IOX. Bytes Position STX (0x02) 1 0 Message Type = 0x82 1 1 Message Body Length = x (1 to 27) 1 2 Data x 3 Checksum 2 3 + x ETX (0x03) 1 5 + x Reply: Third-Party Data Ack (Msg Type 0x02) Msg type 0x84: Device data ACK Issued by the External Device on receipt of the GO Device Data message. Bytes Position STX (0x02) 1 0 Message Type = 0x84 1 1 Message Body Length = 0 1 2 Checksum 2 3 ETX (0x03) 1 5 For the purpose of acknowledging the GO Device Data message when connected as an Enhanced Hours Of Service Device: The GO device will keep streaming the GO Device Data messages for up to 30 seconds, even if no ACK is received. If no ACK is received in that time frame, the GO Device will send an External Device Disconnected record to the server and will wait for a new Handshake Sync request from the External Device. If the ACK message is received within the 30 seconds, the counter is re-initialized. Msg type 0x85: Request device data message This is a request-response message. It can be issued by the External Device whenever it wishes to receive the Device Data Info Message (0x21). Bytes Position STX (0x02) 1 0 Message Type = 0x85 1 1 Message Body Length = 0 1 2 Checksum 2 3 ETX (0x03) 1 5 Reply: GO Device Data (Msg Type 0x21) Msg type 0x86: Binary data packet Sent by the external device when sending messages with less than or equal to 255 bytes of data content to MyGeotab. The GO device will respond with the Binary Data Response message indicating whether the data was accepted into the modem's socket buffer. Bytes Position STX (0x02) 1 0 Message Type = 0x86 1 1 Message Body Length = x (0 - 255) 1 2 Binary Data x 3 Checksum 2 3+x ETX (0x03) 1 5+x Reply: Binary Data Response (Msg Type 0x22) The payload of the binary data needs to adhere to protocols understood by MyGeotab. MIME protocol is one of these protocols. Please see{\" \"} Appendix C for implementation details. Msg type 0x87: Third-party data as priority status data Bytes Position STX (0x02) 1 0 Message Type = 0x87 1 1 Message Body Length = 6 1 2 Data ID (assigned by Geotab) 2 3 Data 4 5 Checksum 2 9 ETX (0x03) 1 11 Reply: Third-Party Data Ack (Msg Type 0x02) Msg type 0x88: Extended application specific data from external device Extended application-specific data from external device is sent by the external device to the GO device. Can be used for payloads larger than 1 byte. There must be an associated service running on the GO device that is looking for these messages. Currently only used for Keyless. Bytes Position STX (0x02) 1 0 Message Type = 0x88 1 1 Message Body Length = x (1 to 1024) 2 2 Data Payload x 4 Checksum 2 4+x ETX (0x03) 1 6+x Reply: Binary Data Response (Msg Type 0x22) Msg type 0x89: Ping After handshaking, this message can be issued periodically by the external device to check that the GO device is active and ready. The GO device will normally reply with the Third-Party Data Ack (Msg Type 0x02). If this reply is not received, the external device should reset and begin sending the Handshake Sync (0x55). Bytes Position STX (0x02) 1 0 Message Type = 0x89 1 1 Message Body Length = 0 1 2 Checksum 2 3 ETX (0x03) 1 5 Reply: Third-Party Data Ack (Msg Type 0x02) Msg type 0x8a: Extended binary data packet Sent by the external device when sending messages with {\"<\"}= 1000 bytes of data content to MyGeotab. The GO device will respond with the Binary Data Response message indicating whether the data was accepted into the modem's socket buffer. Bytes Position STX (0x02) 1 0 Message Type = 0x86 1 1 Message Body Length = x (0 - 1000) 2 2 Extended_binary_data x 4 Checksum 2 4+x ETX (0x03) 1 6+x Reply: Binary Data Response (Msg Type 0x22) The payload of the binary data needs to adhere to protocols understood by the Geotab servers. MIME protocol is one of these protocols. Please see Appendix C for implementation details. Msg type 0x8b: Add-On protocol version request Sent by the external device when requesting the Add-On protocol version number. Once the GO device receives this request, it will reply with 0x27. S Bytes Position STX (0x02) 1 0 Message Type = 0x8B 1 1 Message Body Length = 0 1 2 Checksum 2 3 ETX (0x03) 1 5 Reply: Third-Party version Ack Reply (Msg Type 0x27) Msg type 0x8c: Protobuf data packet Available with Add-On protocol versions 1.2 and later. Sent by the external device to subscribe to various topics/information. The GO device will respond with 0x26 ACK. blank Bytes Position STX (0x02) 1 0 Message Type = 0x8C 1 1 Message Body Length = x(1-255) 1 2 Data Payload Protobuf (message_body) = x (1 to 255) x 3 Checksum 2 3 + x ETX (0x03) 1 5 + x Reply: Protobuf data packet (Msg Type 0x26) The payload is protobuf-encoded. Please see{\" \"} Protobuf Schema {\" \"} for details. The currently supported topics are: Topic TOPIC_VIN TOPIC_GEAR TOPIC_ENGINE_SPEED TOPIC_ENGINE_LOAD TOPIC_ODOMETER TOPIC_ACCEL_PEDAL_PERCENTAGE TOPIC_COOLANT_TEMP TOPIC_DOC_INTAKE_GAS_TEMP TOPIC_DOC_OUTLET_GAS_TEMP TOPIC_FUELTANK1_UNITS TOPIC_FUELTANK2_UNITS TOPIC_FUELTANK1_PERCENT TOPIC_FUELTANK2_PERCENT TOPIC_STATE_OF_CHARGE TOPIC_ENGINE_ROAD_SPEED TOPIC_VEHICLE_ACTIVE TOPIC_DRIVER_SEATBELT TOPIC_LEFT_TURN_SIGNAL TOPIC_RIGHT_TURN_SIGNAL TOPIC_EV_CHARGING_STATE TOPIC_PARK_BRAKE Appendix A: Raw message data example for IOX-USB & IOX-RS232 Handshake Sync from External Device 0x55... 0x55... 0x55 Handshake Request from GO device 0x02, 0x01, 0x00, 0x03, 0x08, 0x03 Handshake Confirmation from External Device (4208 is a test Device ID) (Device ID: 4208 = 0x00001070) 0x02, 0x81, 0x04, 0x70, 0x10, 0x00, 0x00, 0x07, 0x18, 0x03 Third-Party Data from External Device (Status Data ID: 35349 = 0x8A15, Data Value: 200 = 0x000000C8) 0x02, 0x80, 0x06, 0x15, 0x8A, 0xC8, 0x00, 0x00, 0x00, 0xEF, 0x8C, 0x03 Third-Party Data Acknowledge from GO device 0x02, 0x02, 0x00, 0x04, 0x0A, 0x03 Appendix B: Sample message flow for IOX-USB & IOX-RS232  Appendix C: Using binary data messages to transfer MIME data MIME-type data can be transferred from an external device to the server via the GO device. The protocol is described in{\" \"} MIME passthrough messages. The Message Flow is similar to that outlined in Appendix B, with the following variations: Third-Party Data Message is instantiated as Binary Data Packet Containing MIME Type Data, whose format is such Data Acknowledge Message is instantiated as Binary Data Response (0x22) After the last Binary Data Response, add a Binary Data Packet Containing MIME Type Acknowledge, whose format is{\" \"} such. Once the complete payload of the MIME message is successfully received by MyGeotab, a MIME ACK will be sent back from MyGeotab. Readers are encouraged to also read the{\" \"} Geotab MIME Data Exchange Example IOX-RS232 {\" \"} to better understand of the protocol. Binary data packets containing MIME type data This is an example of binary data packets for image data transferred using the MIME type \"image/jpeg\". The image size is 83000 bytes. The packet size is 250. First packet: Bytes Position STX (0x02) 1 0 Message Type = 0x86 1 1 Message Body Length = 250 1 2 Sequence number = 0 1 3 MIME type length = 10 1 4 MIME type (“image/jpeg”) 10 5 Payload Length = 83000 4 15 Binary Payload (the first 234 bytes) 234 19 Checksum 2 253 ETX (0x03) 1 255 Second packet: Bytes Position STX (0x02) 1 0 Message Type = 0x86 1 1 Message Body Length = 250 1 2 Sequence number = 1* 1 3 Binary Payload (the next 249 bytes) 249 4 Checksum 2 253 ETX (0x03) 1 255 Binary data packet containing MIME type acknowledge Bytes Position STX (0x02) 1 0 Message Type = 0x23 1 1 Message Body Length = 9+x 1 2 Sequence Number = 0 1 3 MIME type length = 3 1 4 MIME type in ASCII = 'ACK' 3 5 Payload Length = x 4 8 Total Number of Payload Bytes Received x 12 Checksum 2 12+x ETX (0x03) 1 14+x","link":"/hardware/protocolReference/rs232Usb","breadCrumb":["Hardware","Protocol Reference","RS232 & USB"],"category":"guide"},{"id":10,"title":".NET Examples","headers":["Example 1","Example 2"],"headerIds":["dotnet-example-code-snippet1","dotnet-example-code-snippet2"],"content":"Here are a few examples to help you get started. The first example is a method that authenticates with the MyAdmin API, retrieves a list of device plans, and looks up the details for a specific device. parameters = new Dictionary { {\"username\", \"user@geotab.com\"}, {\"password\", \"\"} }; ApiUser apiUser = await api.InvokeAsync(\"Authenticate\", parameters); Guid apiKey = apiUser.UserId; Guid sessionId = apiUser.SessionId; parameters = new Dictionary { {\"apiKey\", apiKey}, {\"sessionId\", sessionId} }; ApiDevicePlan[] devicePlans = await api.InvokeAsync(\"GetDevicePlans\", parameters); Console.WriteLine(\"Device Plans\"); Console.WriteLine(\"Level\\tName\"); foreach (ApiDevicePlan devicePlan in devicePlans) { Console.WriteLine(\"{0}\\t{1}\", devicePlan.Level, devicePlan.Name); } Console.Write(\"\\\\nDevice Information\\\\n\"); parameters = new Dictionary { {\"apiKey\", apiKey}, {\"sessionId\", sessionId}, {\"serialNo\", \"G6XXX0XXXD08\"} }; ApiDeviceInstallResult device = await api.InvokeAsync(\"LookupDevice\", parameters); Console.WriteLine(\"Firmware Version: {0}\", device.FirmwareVersion); Console.WriteLine(\"Comments: {0}\", device.Comments); Console.WriteLine(\"Last Server Communication: {0}\", device.LastServerCommunication.ToString()); Console.WriteLine(\"Possible Issues: {0}\", device.PossibleIssues); // Example Output: // Device Plans // Level Name // 3 Base Mode // 99 Suspend Mode // 9999 Terminate Mode // Device Information // Firmware Version: 101.2.85 // Comments: No Data from Device // Last Server Communication: 2021-07-23 11:20:03 p.m. // Possible Issues: No Data from Device}`} /> The second example demonstrates how to query the MyAdmin API to get shipping fee information. parameters = new Dictionary { {\"username\", \"user@geotab.com\"}, {\"password\", \"\"} }; ApiUser apiUser = await api.InvokeAsync(\"Authenticate\", parameters); Guid apiKey = apiUser.UserId; Guid sessionId = apiUser.SessionId; parameters = new Dictionary { {\"apiKey\", apiKey}, {\"sessionId\", sessionId}, {\"forAccount\", \"\"} }; ApiShippingFee[] shippingFees = await api.InvokeAsync(\"GetShippingFees\", parameters); }`} />","link":"/myAdmin/codeSamples/dotnetExamples","breadCrumb":["MYA","Code Samples",".NET Examples"],"category":"guide"},{"id":11,"title":"JavaScript Examples","headers":[],"headerIds":[],"content":"The example below demonstrates a simple JavaScript application that authenticates with the MyAdmin API, then calls GetDevicePlans and{\" \"} LookupDevice. The call method uses the following parameters: Method name; Parameters; Success callback; and Error callback (optional). Note: The Success callback receives the object returned by the API as a parameter. The {/*TODO: fix link */}Reference page provides details about the objects returned by each method. In the example above, the error callback is called if the login fails. The error callback receives two parameters: an error message and an “errors” object that contains an array of individual errors that occurred. In the example above, the devicePlans{\" \"} object — returned by GetDevicePlans — is an array of ApiDevicePlans. The device object, returned by{\" \"} LookupDevice, is an ApiDeviceInstallResult. For more information, see{\" \"} {/*TODO: fix link */}Reference.{\" \"}","link":"/myAdmin/codeSamples/javascriptExamples","breadCrumb":["MYA","Code Samples","JavaScript Examples"],"category":"guide"},{"id":12,"title":"Using With .NET","headers":["Overview","Step 1: Initialization & Authentication","Step 2: Making Calls","More Information"],"headerIds":["overview","step1","step2","moreInformation"],"content":"The .NET SDK tools facilitate the integration of MyAdmin with your own .NET software. All communication to MyGeotab services occurs through HTTPS and the data is serialized in{\" \"} JSON {\" \"} format. The provided .NET library automatically handles both serialization and deserialization of JSON into MyAdmin objects. Packages The inclusion of the Geotab.Internal.MyAdmin.APILib and Geotab.Checkmate.ObjectModel packages allows you to interact with the API. The nuget packages include tools to assist with serialization and deserialization of JSON and provide definitions for MyAdmin object classes. The packages can be found on the NuGet website: Geotab.Internal.MyAdmin.APILib Geotab.Checkmate.ObjectModel The MyAdminInvoker class contains methods that facilitate calls to API functions. To access the invoker and object classes, include the following references in your code: Then, create an instance of the API invoker in your code: The parameters required by each method are passed using a Dictionary {``}. For example, to authenticate with the API, pass a valid username and password to call the Authenticate method using the code below: parameters = new Dictionary { { \"username\", \"user@geotab.com\" }, { \"password\", \"\" } }; ApiUser apiUser = await api.InvokeAsync(\"Authenticate\", parameters);`} /> The Authenticate method authenticates with the MyAdmin API and, if successful, returns an ApiUser object. The ApiUser object contains the SessionId and UserId - used as the API key for all other methods. Once authenticated, you can call other methods by passing the API key, Session ID, and any parameters required by the method. parameters = new Dictionary { { \"apiKey\", apiKey }, { \"sessionId\", sessionId }, { \"serialNo\", \"G63XXXXXXXX8\" } }; ApiDeviceInstallResult installResult = await api.InvokeAsync(\"LookupDevice\", parameters);`} /> For more information, see .NET examples.","link":"/myAdmin/guides/codeBase/usingWithDotnet","breadCrumb":["MYA","Guides","Code Base","Using With .NET"],"category":"guide"},{"id":13,"title":"Using With JavaScript","headers":["Overview","Step 1: Initialization & Authentication","Step 2: Making Calls To Other Methods","More Information"],"headerIds":["overview","step-1:-initialization-&-authentication","step-2:-making-calls-to-other-methods","more-information"],"content":"All communication with our services is done over HTTPS with data serialized in JSON format. A request consists of three properties: 'params: [parameters required by the method serialized as JSON]`} /> Before calling any API methods, a call must be made to the Authenticate method to obtain the user’s API key and session ID. All method calls require a{\" \"} params object which contains the values for the parameters required by the methods. The following sections describe how to build the{\" \"} params object to authenticate and call an API method. The myAdminApi.js utility is provided to help with calling MyAdmin API methods. It can be downloaded{\" \"} here . The call to Authenticate is made as follows: '};myAdminApi().call('Authenticate', logonParams, function(user) { apiKey = user.userId; sessionId = user.sessionId;});`} /> In the above example, the code passes the user name and password in the logonParams object and provides a callback function to be executed following a successful login. The callback function receives an ApiUser object which contains, among other properties, the user's API key (userId) and session ID. See the{\" \"} {/* ToDo: fix link */}Reference documentation for more information on the Authenticate method and the{\" \"} ApiUser object. Once authenticated, all other API methods can be called using the API key and Session ID obtained in the previous example. For example, the following code will return a list of available device plans: The result object in the above code contains an array of ApiDevicePlan. For more information, see the {/*TODO: fix link */}JavaScript Examples section.","link":"/myAdmin/guides/codeBase/usingWithJavascript","breadCrumb":["MYA","Guides","Code Base","Using With JavaScript"],"category":"guide"},{"id":14,"title":"Concepts","headers":["HTTP POST request","Results & errors","Working with dates","Pagination","Maximum number of results"],"headerIds":["myadmin-post-request","myadmin-results-and-errors","myadmin-working-with-dates","myadmin-pagination","myadmin-maximum-number-of-results"],"content":"Requests made to the MyAdmin API are performed using HTTPS. The URL your web application will send its requests to is: API request parameters and the results are transported in the lightweight{\" \"} JSON {\" \"} format. The{\" \"} Reference{\" \"} contains a listing of the methods that can be invoked, the parameters they expect, and the results they return. Requests to the API can be invoked using HTTP POST. HTTP POST requests use the JSON-RPC standard. The following sections explain how to construct HTTP POST requests to the MyAdmin API. When using HTTP POST request to invoke an API method, the following endpoint is used: However, instead of encoding the method name and parameters in the query string, it is passed in the HTTP body using the JSON-RPC format.The MyAdmin API supports{\" \"} JSON-RPC {\" \"} version 1.0. The following is a JavaScript example that shows how HTTP POST can be used to invoke a method. Note: This can be done from any language that has support for HTTP, for example the java.net.HttpUrlConnection class in Java or System.Net.HttpWebRequest in Microsoft .NET. \" }};request.send(\"JSON-RPC=\" + encodeURIComponent(JSON.stringify(authenticateParams))); // Send the HTTP BODY in the JSON-RPC format. ID is ignored// and can be set to -1.// The method being called is “GetDevicePlans”.// The “GetDevicePlans” method’s parameters are then passed in the “params” propertyvar apiMethod = { \"id\" : -1, \"method\" : \"GetDevicePlans\", \"params\" : { \"apiKey\":\"x12345x2-172x-4d04-8xx2-xx9e088c5xxx\", \"sessionId\":\"cff4e88b-931b-4363-ae4f-35b5ed169133\" }};request.send(\"JSON-RPC=\" + encodeURIComponent(JSON.stringify(apiMethod)));`} /> ); const resultsAndErrors: ReactNode = ( A successful call to the server will result in an object with property \"result\", like this: However, when the call is incorrect or an error is triggered on the server, the error will be returned as an object with property \"error\": The properties of the error object are: Property Description name For all JSON-RPC errors, this is always “JSONRPCError”. message The description of the likely root cause of the error. errors An array of individual errors that were caught. Usually, there is at least one error in this array. The properties for objects in the “errors” array are: Property Description name The name of the server exception. For example, “SecurityException”, “NullReferenceException”, etc. message The description associated with the server exception. Session expiry is an example of a case where it is useful to catch and handle errors. When exchanging dates as parameters to API methods, you must ensure that they are formatted properly as an{\" \"} ISO 8601 {\" \"} string. In addition, all dates will have to first be converted to{\" \"} UTC {\" \"} in order to ensure timezone information and daylight savings times are accounted for correctly. Version 3 of the API, e.g., /v3/MyAdminApi.ashx, introduces Pagination. Any method returning an array will be paginated, i.e., a limited number of results will be returned, along with other pagination information. v3 versions of endpoints/methods that do not yet support pagination will return an error when called. Pagination support will be indicated in the method's docs, for those methods that support it. Please use the v1 version of those endpoints until they can be updated to support pagination. Please contact your account manager to indicate the endpoint for which you would like pagination supported, and they will queue the work with our development team. Two kinds of pagination are supported: Offset-based pagination. This is the default method. Keyset-based pagination. Supported on some endpoints. This is faster and more efficient than offset-based pagination, and as such is recommended, where available. Offset-based pagination This type of pagination breaks the result set into indexed pages, starting at 1. Specify the desired page and results per page by passing them in the request object, like so: Default page size is 20. Maximum page size is 100. For GET requests, use the query parameters page and{\" \"} per_page. The result object will include pagination information, where total is the total number of records matched by the query: For GET requests, these values will be returned in the HTTP headers Page,{\" \"} PerPage and Total. Also for GET requests, a{\" \"} Link header will be returned that can be used to access the next page. Keyset-based pagination Keyset-pagination allows for more efficient retrieval of pages, and runtime is independent of the size of the collection, in contrast to offset-based pagination. Use keyset pagination, on the methods that support it, like so: For GET requests, use the query parameter pagination set to{\" \"} keyset to enable keyset pagination (on those methods that support it). The result object will include keyset pagination information: For GET requests, these values will be returned in the HTTP headers PerPage and{\" \"} NextCursor. Also for GET requests, a Link header will be returned that can be used to access the next page. Note that no information about total records or total pages will be returned for keyset pagination. To get the next page, pass in the cursor returned in the result object of the previous page: For GET requests, use the query parameter cursor. Most unpaginated endpoints (see Pagination above) will be limited to 100,000 results (as of early 2024). However, some endpoints that already return more than 100,000 results (prior to 2024) will be grandfathered-in, to preserve API backwards-compatibility. Geotab may work with integrators in the future to work towards applying record limits to these grandfathered-in endpoints as well. So, integrators are encouraged to move to paginated versions of endpoints, ideally, or to generally avoid making requests that return large numbers of results. The goal of pagination and these record limits is to improve the stability/performance of the API for all.","link":"/myAdmin/guides/concepts","breadCrumb":["MYA","Guides","Concepts"],"category":"guide"},{"id":15,"title":"Getting Started","headers":["Accessing the API","Authenticating with the API","What's next?"],"headerIds":["myadmin-accessing-the-api","myadmin-authenticating-with-the-api","myadmin-whats-next"],"content":"The MyAdmin API is available for Geotab Resellers and Partners. Geotab provides helper libraries for C# and JavaScript; however, any language or application capable of making HTTP requests can access the full functionality of the MyAdmin API. It is recommended that Resellers and Partners access the API with a new, dedicated account; however, any MyAdmin account may be used. A new account can be registered at{\" \"} https://myadmin.geotab.com . The examples and source code presented in the MyAdmin SDK require a modern browser. We recommend using the latest Chrome, Firefox or Edge browser. The API is accessed via HTTPS by sending requests to the following URL: https://myadminapi.geotab.com/v2/MyAdminApi.ashx The API supports POST requests only. Test environment A sandbox environment is a testing environment that is available to developers who wish to test their application before making API calls to the live system. The test environment can be accessed at: https://myadminapitest.geotab.com/v2/MyAdminApi.ashx A few methods are not supported in the test environment and will throw exceptions when called. For more information, see the{\" \"} Reference{\" \"} section. Data in the sandbox environment is volatile. API developers should not expect data entered into the sandbox environment to persist for any amount of time. A successful response is a JSON object where the result property is information about the session, including the user ID and a session ID. It looks similar to this: {`{\"result\":{\"userId\":\"x12345x2-172x-4d04-8xx2-xx9e088c5xxx\",\"sessionId\":\"cff4e88b-931b-4363-ae4f-35b5ed169133\",\"lastLogonDate\":\"2013-11-04T15:01:00.000Z\",\"roles\":[{\"comments\":\"Third Party Integrator role\",\"name\":\"Third-Party-Integrator\"}],\"name\":\"user@geotab.com\"}}`} The API key is found in the userId property and the session ID is found in the sessionId property. Both of these properties must be included on all other API calls. If the session ID has expired, the API will return a SessionExpiredException which requires a call to Authenticate to get the new session ID. For more information, see the{\" \"} Reference{\" \"} section.{\" \"} JavaScript{\" \"} and{\" \"} .NET{\" \"} examples have been provided to help you get started. There are several other items in the SDK to help you get started: Concepts{\" \"} - Be sure to read through this before building your application. Using with JavaScript Using with .NET API Reference{\" \"} - The reference documentation that explains what each API call does and documents the parameters and results for each call.","link":"/myAdmin/guides/gettingStarted","breadCrumb":["MYA","Guides","Getting Started"],"category":"guide"},{"id":16,"title":"Introduction","headers":["Next steps"],"headerIds":["myadmin-next-steps"],"content":"The MyAdmin API provides an interface to Geotab's MyAdmin system allowing Geotab Resellers and Partners to build their own applications to integrate with MyAdmin. Some tasks that can be accessed through the API include: Registering MyAdmin users; Ordering Geotab products; Querying device information, including installation status, contract information, etc; Managing support tickets with Geotab's help desk; Creating RMA requests and querying RMA status; Managing user contact information; Integrating third-party data; and Obtaining billing information. Data exchanged with the MyAdmin API is serialized as JSON, making the API compatible with any platform that can make HTTP requests. A .NET class library consisting of an invoker and all API objects is provided to help .NET developers interface with the API. For more information, see the Using with .NET{\" \"} section. Also, a small JavaScript utility is also provided to facilitate interacting with the API using JavaScript. See the{\" \"} Using with JavaScript section for more information. myadmin.geotab.com    ","link":"/myAdmin/introduction","breadCrumb":["MYA","Introduction"],"category":"guide"},{"id":17,"title":"Release Notes","headers":["December 4, 2023","October 4, 2023","September 5, 2023","July 29, 2023","July 10, 2023","July 1, 2023","May 29, 2023","March 27, 2023","March 6, 2023","February 13, 2023","January 23, 2023","December 12, 2022","December 5, 2022","November 14, 2022","September 19, 2022","September 12, 2022","August 17, 2022","July 11, 2022","June 20, 2022","June 6, 2022","May 16, 2022","April 11, 2022","March 25, 2022","February 28, 2022","January 31, 2022"],"headerIds":["myadmin-december-4-2023","myadmin-october-4-2023","myadmin-september-5-2023","myadmin-july-29-2023","myadmin-july-10-2023","myadmin-july-1-2023","myadmin-may-29-2023","myadmin-march-27-2023","myadmin-march-6-2023","myadmin-february-13-2023","myadmin-january-23-2023","myadmin-december-12-2022","myadmin-december-5-2022","myadmin-november-14-2022","myadmin-september-19-2022","myadmin-september-12-2022","myadmin-august-17-2022","myadmin-july-11-2022","myadmin-june-20-2022","myadmin-june-6-2022","myadmin-may-16-2022","myadmin-april-11-2022","myadmin-march-25-2022","myadmin-february-28-2022","myadmin-january-31-2022"],"content":"ApiRatePlan In September, we added two parameters (isAutoActivated and billingStartDate) to the{\" \"} GetDeviceContractsByPage and GetDeviceContracts methods. As a result, we will be deprecating the{\" \"} isAutoActivated property from the ApiRatePlan object. PostOrder Currently, for the PostOrder method, InvalidDataException is returned when there is an exception. In a future release, these exceptions will be returned as a MyAdminException instead. GetDeviceContractsByPage & GetDeviceContracts Along with the new Auto-Activated and Billing Start Date columns in Device Admin, we have added two new parameters to the GetDeviceContractsByPage and GetDeviceContracts methods: isAutoActivated - Returns a result that indicates whether the device was auto-activated by Geotab. true - The device was auto-activated by Geotab. false - The device has yet to be activated or was activated from being installed in an asset. billingStartDate - Returns the date when the device was activated. CalculateVinOemEligibilitiesAsync and GetOemSupportEligibilityForMakeAsync Together with the Vehicle / VIN Lookup page improvements, we've added the following APIs to allow you to confirm whether a vehicle or VIN is eligible for OEM connectivity services: CalculateVinOemEligibilitiesAsync - Returns a result that indicates whether a VIN in a specific region is eligible for OEM connectivity services. GetOemSupportEligibilityForMakeAsync - Returns a result that indicates whether a vehicle make and model in a specific region is eligible for OEM connectivity services. GetOnlineOrderStatus We have added a new shippingCost field as a return object to the GetOnlineOrderStatus method. This field will return the shipping cost at the time the order was placed. MyAdminAPIUser We have deprecated the MyAdminApiUser role. This role was initially used to make MyAdmin API calls, but we confirmed that API calls are open to anyone with a MyAdmin account. As a result, we have deprecated the role to reduce confusion and simplify access to our API. CalculateVinOemEligibilitiesAsync and GetOemSupportEligibilityForMakeAsync Together with the Vehicle / VIN Lookup page improvements, we've added the following APIs to allow you to confirm whether a vehicle or VIN is eligible for OEM connectivity services: CalculateVinOemEligibilitiesAsync - Returns a result that indicates whether a VIN in a specific region is eligible for OEM connectivity services. GetOemSupportEligibilityForMakeAsync - Returns a result that indicates whether a vehicle make and model in a specific region is eligible for OEM connectivity services. DatabaseExists To save time when creating new databases, we've added a new DatabaseExists method that returns a true or false value to allow you to confirm whether a database name already exists: true - The database name already exists false - The database name does not exist GetOnlineOrderStatus In a future release, we will be adding a new shippingCost field as a return object to the GetOnlineOrderStatus method. This field will return the shipping cost at the time the order was placed. In a future release, the GetOnlineOrderStatus method will add a default date range and return order data from the last month if the following parameters are sent as null: purchaseOrderNo orderNo orderDateFrom orderDateTo There will also be a limit of 5000 orders that can be retrieved in a single request. ProvisionDevicesBulk Currently, ProvisionDevice and ProvisionDeviceToAccount methods are available to provision a single third-party custom telematics or OEM device (via the serial number). To help you manage large quantities of devices, we've added a new ProvisionDevicesBulk method to provision multiple third-party custom telematics devices or OEM in bulk with an optional quantity field. GetDeviceContractsByPage and GetDeviceContracts In a future release, we will be adding two new columns to Device Admin: Auto-Activated and Billing Start Date to improve visibility of auto-activation events, as well as the actual start of billing for a device. The Auto-Activated column will help you identify whether a device has been automatically activated by Geotab, and display the following values: Yes - The device was automatically activated by Geotab. No - The device was activated by installation. Not Available - The device has been shipped, but has not been installed, or auto-activated. NOTE: For devices shipped prior to the release of this feature, Not Available will be displayed. The Billing Start Date column will help you determine when billing started for a device. This column will display one of the following values: Date - Displays the date that the device was auto - activated, installed, or transferred from another Partner. NOTE: Plan changes for devices will not impact this date. Not Available - Indicates that a device has been shipped, but has not been installed, or auto - activated. NOTE: For devices shipped prior to the release of this feature, Not Available will be displayed. Therefore, we will also be making data points of Auto-Activated and Billing Start Date available through the < strong> GetDeviceContractsByPage and < strong> GetDeviceContracts APIs in a future release.We will provide more details closer to the release date. GetOnlineOrderStatus In an upcoming release, we will be adding the following parameters to the GetOnlineOrderStatus API: promoCode - Returns the promo code used when the order was placed, if applicable. rateCode - Returns the promo code used for a monthly Rate Plan subscription when the order was placed, if applicable. GetPartnerDeviceContractsAsync To help you find devices faster, we've updated the GetPartnerDeviceContractsAsync API to include a database search parameter ( databaseFilter). This parameter allows you to retrieve a list of devices that are owned by the specified database. ApiDeviceContract In an upcoming release, we will use the gateway's activation date as the source for FirstDeviceActivationDate when returning an{\" \"} ApiDeviceContract object (for example, by calling GetDeviceContractsByPage) to align with the Device Admin page ApiDeviceContract In an upcoming release, we will use the gateway's activation date as the source for FirstDeviceActivationDate when returning an{\" \"} ApiDeviceContract object (for example, by calling GetDeviceContractsByPage) to align with the Device Admin page GetPartnerDeviceContractsAsync Currently, the GetPartnerDeviceContractsAsync method allows you to return a list of third-party devices under your account. In a future release, we'll enhance the GetPartnerDeviceContractsAsync method to return a list that includes all device types, including GO devices. EditUserContact To ensure that Customers receive their orders in a timely manner, we've updated the EditUserContact method to validate provided addresses with the option to override invalid addresses if the user has the Contact-Override role. The API call will now match how shipping contacts are validated in checkout. DeviceContractsByPage The fromdate and todate parameters are now optional in the GetDeviceContractsByPage API, so more records can be retrieved. OnlineOrderStatus A new OrderSource parameter has been added to the GetOnlineOrderStatus method. The OrderSource parameter allows you to view a list of orders based on the channel used to place the order: MyAdmin, Marketplace, or API. EditUserContact In an upcoming release, we will update the EditUserContact method logic to validate provided addresses, and provide the option to override invalid addresses, if the user has the Contact-Override role. DeviceContractTransactions When calling GetDeviceContractTransactions, you will now see a new property in the returned DeviceContractTransactions object: int{\" \"} UserContactId If null, UserContactId will return -1 Else, it will return the unique ID that belongs to the user contact This ID can be leveraged alongside GetUserContacts to return all the contact details of the user contact (currently DeviceContractTransactions only returns UserContactName) ForceChangePasswordForUsersAsync The ForceChangePasswordForUsersAsync method now allows you to toggle on 'Force Password Change' for user accounts so that you can decide how often users are resetting their passwords The ForceChangePasswordForUsersAysync requires the apikey, sessionID, and a list of usernames userNames, and you must toggle forceChangePassword to True or False. EditUserContact In an upcoming release, we will update the EditUserContact method logic to validate provided addresses, and provide the option to override invalid addresses, if the user has the Contact-Override role. ApiOnlineOrder A new source parameter has been added to the ApiOnlineOrder object: OrderSource. The Order source parameter allows you to determine the channel used to place the order: MyAdmin, Marketplace, or API. MyInstallLogs A new GetMyInstallLogs method has been added to allow you to easily retrieve your installation record information. CreateExternalVendorDeviceBulkAsync A new method, CreateExternalVendorDeviceBulkAsync, has been added to make it easier for Marketplace Partners to offer products that do not connect to Geotab gateways. The CreateExternalVendorDeviceBulkAsync method allows Marketplace Partners to register devices using serial numbers, as well as the option to include IMEI and SIM numbers, so they show up in MyAdmin. To use this method, you must have the DeviceRegister-Bulk role. ApiDeviceContract ApiDeviceContract has been updated with a boolean value for the isAutoActivated parameter to indicate whether a device was auto-activated by Geotab using True or False. The True label indicates the device was auto-activated by Geotab. AccountsFromSerialsAsync A new API, GetAccountsFromSerialsAsync, has been added to allow our Partners with multiple accounts identify the account associated with a specified device, and facilitates the use of other MyAdmin APIs that require account information. OnlineOrderStatus A new parameter, poExactMatch, has been added to GetOnlineOrderStatus to allow you to search for orders that match a specific PO number. To search for orders that match an exact PO number, use double quotation marks. End of life - MyAdmin APIs for third-party device data ingestion On September 30, 2022, the MyAdmin APIs for third-party device data ingestion into MyGeotab will be permanently discontinued. After this date, MyGeotab will be unable to receive data from any devices that have not migrated to DIG. For more information, refer to the{\" \"} Migrating to DIG from MyAdmin API/SDK guide . If you're a new Partner with a standalone telematics device, refer to the{\" \"} Using Custom Telematics Devices {\" \"} section in the MyGeotab SDK. GetDeviceContracts GetDeviceContracts has been updated for Partners that closely integrate their billing with MyAdmin The API now identifies the Rate Plan of a specific device in real time, as opposed to only the device mode Moving the MyAdmin SDK site On September 17, 2022, the current MyAdmin SDK site will be deprecated, and the MyAdmin SDK will be merged with the MyGeotab SDK site to create a centralized point of information related to integrating with Geotab. End of life - MyAdmin APIs for third-party device data ingestion On September 30, 2022, the MyAdmin APIs for third-party device data ingestion into MyGeotab will be permanently discontinued. After this date, MyGeotab will be unable to receive data from any devices that have not migrated to DIG. For more information, refer to the{\" \"} Migrating to DIG from MyAdmin API/SDK guide . If you're a new Partner with a standalone telematics device, refer to the{\" \"} Using Custom Telematics Devices {\" \"} section in the MyGeotab SDK. Moving the MyAdmin SDK site On September 17, 2022, the current MyAdmin SDK site will be deprecated, and the MyAdmin SDK will be merged with the MyGeotab SDK site to create a centralized point of information related to integrating with Geotab. End of life - MyAdmin APIs for third-party device data ingestion On September 30, 2022, the MyAdmin APIs for third-party device data ingestion into MyGeotab will be permanently discontinued. After this date, MyGeotab will be unable to receive data from any devices that have not migrated to DIG. For more information, refer to the{\" \"} Migrating to DIG from MyAdmin API/SDK guide . If you're a new Partner with a standalone telematics device, refer to the{\" \"} Using Custom Telematics Devices {\" \"} section in the MyGeotab SDK. Moving the MyAdmin SDK site On August 29, 2022, the current MyAdmin SDK site will be deprecated, and the MyAdmin SDK will be merged with the MyGeotab SDK site to create a centralized point of information related to integrating with Geotab. End of life - MyAdmin APIs for third-party device data ingestion On September 30, 2022, the MyAdmin APIs for third-party device data ingestion into MyGeotab will be permanently discontinued. After this date, MyGeotab will be unable to receive data from any devices that have not migrated to DIG. For more information, refer to the{\" \"} Migrating to DIG from MyAdmin API/SDK guide . If you're a new Partner with a standalone telematics device, refer to the{\" \"} Using Custom Telematics Devices {\" \"} section in the MyGeotab SDK. Orders Currently, MyAdmin does not require a zip code or postal code for shipments. As a result, shipments may be delayed due to blank or invalid zip or postal codes, and require verification before the order can be shipped. To ensure we can get your order shipped as quickly as possible, the Zip Code/Postal Code field will be required, and we're adding the functionality to validate the zip or postal code during the checkout process. ApiOrderHeader An optional parameter Requested Delivery Date is going to be added to ApiOrderHeader object, so Partners can request a specific delivery date for orders placed through the API. GetDeviceContracts We've added two new parameters - ordersAddedFrom and ordersAddedTo - to the GetDeviceContracts method, so you can retrieve a list of OEM Purchase Order(PO) numbers added during the specific date range. When using these parameters, the other two parameters - fromDate and toDate - are not required. Monthly Billing In an upcoming release, we're adding an Extended from Database column on the Monthly Billing page for clarity and to improve the Monthly Billing reports for Extendable Services. The Extended from Database column displays the names of the originating databases, when a device has extended services from a database in the selected billing period. We are also renaming the Database column to Database Billed to more accurately describe what this column represents. Please take note of this if your integration uses column names rather than column numbers. Orders Currently, MyAdmin does not require a zip code or postal code for shipments. As a result, shipments may be delayed due to blank or invalid zip or postal codes, and require verification before the order can be shipped. To ensure we can get your order shipped as quickly as possible, the Zip Code/Postal Code field will be required, and we're adding the functionality to validate the zip or postal code during the checkout process. OnlineOrderStatus The GetOnlineOrderStatus API has been updated to include a new parameter, includeCancelledOrders, which allows you to include cancelled orders in the search results. ApiOrderHeader An optional parameter Requested Delivery Date is going to be added to ApiOrderHeader object, so Partners can request a specific delivery date for orders placed through the API. Monthly Billing In an upcoming release, we're adding an Extended from Database column on the Monthly Billing page for clarity and to improve the Monthly Billing reports for Extendable Services. The Extended from Database column displays the names of the originating databases, when a device has extended services from a database in the selected billing period. We are also renaming the Database column to Database Billed to more accurately describe what this column represents. Please take note of this if your integration uses column names rather than column numbers. Orders Currently, MyAdmin does not require a zip code or postal code for shipments. As a result, shipments may be delayed due to blank or invalid zip or postal codes, and require verification before the order can be shipped. To ensure we can get your order shipped as quickly as possible, the Zip Code/Postal Code field will be required, and we're adding the functionality to validate the zip or postal code during the checkout process. PartnerDeviceContractsAsync A new API, GetPartnerDeviceContractsAsync, has been added to allow Marketplace Partners and Integration Partners to retrieve a list of active devices they've produced, as well as the database each device is connected to. With this API, these Partners can set up, service, and support their products, as well as ensure their products are properly functioning. The ThirdPartyPartner-Admin role is required to access the GetPartnerDeviceContractsAsync API. To use this API, input sessionID in addition to the GetPartnerDeviceContractsAsync method. Once this is complete, the API call retrieves the list of devices including the Serial Number, Database, and Product Code. This API is for Partners who produce third-party products only. Shutdown complete - Disabled GET requests used for authentication For several months, we have communicated that we will disable Authenticate and RegisterNewUser GET requests to the MyAdmin API for increased security. As mentioned, effective March 31, 2022, GET requests have been disabled. POST requests will continue to be supported. If GET requests are used for authentication purposes, users will receive the following error message: “405 Method Not Allowed.” Updated character limit for reseller reference We've made changes to our current character limit for the Reseller Reference field. We have increased the limit from 250 characters to 500 characters. Shutdown imminent - Disable GET requests used for authentication Effective March 31, 2022, GET requests will be disabled. POST requests will continue to be supported. If GET requests are used for authentication purposes, users will receive the following error message: “405 Method Not Allowed.” DeviceContracts The GetDeviceContracts method search functionality has been updated to support searching for OEM devices based on full or partial Purchase Order (PO) numbers. Disable GET requests used for authentication In an upcoming release, Authenticate and RegisterNewUser GET requests will be disabled to the MyAdmin API for increased security. POST requests will continue to be supported. If GET requests are used for authentication purposes, users will receive the following error message: “405 Method Not Allowed.” Generate serial numbers in bulk Serial numbers can now be requested for up to 1000 custom telematics devices (with the same product code) at a time. Previously, the functionality only supported one custom telematics device at a time. Update to the NuGet package The NuGet package now includes common elements from the MyGeotab SDK. We leverage .NET Core instructions, so in order to use the new package any integrations using the old .NET Framework instructions must be updated. Disable GET requests used for authentication In an upcoming release, Authenticate and RegisterNewUser GET requests will be disabled to the MyAdmin API for increased security. POST requests will continue to be supported. If GET requests are used for authentication purposes, users will receive the following error message: “405 Method Not Allowed.”","link":"/myAdmin/releaseNotes","breadCrumb":["MYA","Release Notes"],"category":"guide"},{"id":18,"title":"Storage API","headers":["What is the storage API?","AddInId","Creating an AddInData object","Retrieving stored AddInData content","Updating stored AddInData content","Deleting an AddInData object","Additional notes And limitations","Additional resources"],"headerIds":["storage-add-in-API","storage-add-in-id","storage-add-in-creating","storage-add-in-retrieving","storage-add-in-updating","storage-add-in-deleting","storage-add-in-notes-and-limitations","storage-add-in-resources"],"content":"This page provides an overview of the storage (AddInData) API and describes its use within Add-Ins. For a sample add-in that uses the storage API go to this{\" \"} link . The Storage API allows an Add-In or integration to store records which contain generic data to a customer database. The AddInData object allows storage of structured JSON which can be searched for and retrieved using the API. Sample JSON Following sections will refer to this example JSON:  An AddInId must be created before the Storage API methods can be used within your Add-In. This encoded GUID is used to register and identify which Add-In some data is associated. AddInId is a mandatory parameter when calling AddInData methods to Add and Get data. This allows each Add-In's data to be isolated from the data used by other Add-Ins. This allows multiple solutions to each have their own collection of AddInData objects in the same database without the collections mixing. To generate your own AddInId, please use the following{\" \"} example . An AddInData object must first be created in a database. The properties of AddInData are as follows: Property Description Id The standard Id for any Entity. AddInId Groups Details The JSON data. May be whole or partial depending on the action (Add vs. Set) or the filtering provided when calling Get. As an example, you can use the{\" \"} API Runner tool {\" \"} to create an AddInData object that's not limited to any groups using the following operation: The same example with the addition of the Groups parameter would result in limiting the data to the specified groups, in this case the driver activity group: Important notes Each invocation of the Add operation will create a new AddInData object with a unique Id bound to the entered AddInId. The Id of the AddInData object is required to remove the object with the Remove method. See below for an example. Example 1 This method call will correctly save the sample JSON and associate it to the Add-In with the AddInId of a2C4ABQuLFkepPVf6-4OKAQ. Request Response AddInData uses a search object to query specific data using an object's path in the JSON. The AddInDataSearch properties are as follows: Property Description Id The standard Id for any Entity. AddInId Can be optionally provided when searching for AddInData that belongs to a specific AddInData. Groups Used to define the scope of a row of Add-In data. Works the same as any other ObjectModel Entity. SelectClause (String) Used to filter the resulting rows based on the JSON content of the row. Works with the object path notation described in usage. Independent of WhereClause. WhereClause (String) Used to filter the resulting rows based on the JSON content of the row. Works with the object path and operator notation described in usage. Independent of SelectClause. As an example, you can use the{\" \"} API Runner tool {\" \"} to perform GET operations that return one or more AddInData objects: Example 2 Get the emails of all customers who have an item with a price less than 15. This method call will return an array with a single AddInData object. Request: Response: Example 3 Get all item names for a user with the email joe@smith.com. This method call will return an array with multiple AddInData objects that satisfy both the select and where clauses. Request: Response: Note: Both returned AddInData objects will have the same Id because they come from the same object in the database. Example 4 Get all data Request: Response: Object path notation The SELECT and WHERE clauses of the AddInDataSearch object use a special notation to describe an object path. If we wanted to modify the call in Example 4 to retrieve just the customer name from the AddInData object, we would add the following path notation to the{\" \"} SELECT clause of the AddInDataSearch object: customer.name The returned AddInData object will contain a value of \"joesmith\" in its data property. If you have an array in the path, it must be indicated by a [] after the name of the array property. For example, if you wanted to modify Example 4 to select all item names, we would add the following to the SELECT clause of the AddInDataSearch object: items.[].name The same notation is used for the WHERE clause. This notation can be used to drill down to as many objects as you want. Operators and arguments The WHERE clause of the AddInDataSearch object supports the following operators: Operator Description = Equal to {`<`} Less than {`>`} Greater than {`<=`} Less than or equal to {`>=`} Greater than or equal to These can be used with the object path notation explained above. For example, if you want to get all items with a price less than 20, the appropriate WHERE clause will be: {`items.[].price < 20`} Note: The data type of the value on the right side of the operator is important. String values will need to be enclosed in quotation marks and properly escaped. To get all customers with the name \"joesmith\", the appropriate WHERE clause will be: customer.name = \"joesmith\" Important operation notes for using Get The SELECT clause must be included if the WHERE clause is specified, otherwise the entire data object will be returned.{\" \"} The GET operation always returns an Array of AddInData objects, each with a unique value in the data property. Search matching is case-sensitive. In the examples above, searching for customer.name = \"JoeSmith\" will not return any results. Results returned by the SELECT and WHERE clauses will be in the scope of the entire AddInData object. To have a search return separate matches, the independent pieces of content must be added to separate AddInData objects using the{\" \"} ADD operation. To update stored content, use the SET method on an AddInData object while specifying its AddInId ID. The return value is always{\" \"} null. As an example, use the{\" \"} API Runner tool {\" \"} to perform the following operation:  An AddInData object is deleted when you specify its ID. The return value is always null. AddInData JSON restrictions The following are the only restrictions on the JSON stored within AddInData objects: The JSON data for an AddInData object must be 10,000 characters or less. No property in the JSON data can have the format \"geotabXYZ\". This naming format is reserved for Geotab use. Legacy property 'data' The AddInData object has been available as a beta feature through several releases and as such, we've made improvements through time. Now that we are officially releasing this feature in 2101, a legacy property we are looking to get rid of is the 'Data' property. This is a string property that is not deserialized as an object when sent over JSON. The newer property, 'Details', deserializes as an object and should be used instead (you do not need to call JSON.parse() on this property).{\" \"} Partners that have designed their applications to work with the 'Data' property should transition to using 'Details'. In a future release, the 'Data' property will be completely removed. Cannot delete properties of objects All objects properties stored in the JSON can be modified but not deleted. Example (Replacing): With Results in a merged dataset instead of a deletion of the previous content Workarounds to this issue would be to either: Use arrays as a property of an object as they can be modified and resized without issue. Make two calls: first to change the \"customer\" value to an empty string, then a second call to set new data. No LIKE statement Currently there is no support for fuzzy string matching. No AND/OR statements The WHERE clause cannot perform conjunctions or disjunctions. Security clearance matters Security Clearance limitations allow the following API methods: Administrator, Supervisor, Default User, Drive App User {`=>`} \"Add/Set/Get/Remove\" ViewOnly {`=>`} \"Get\" Nothing {`=>`} None Small vs large While it's possible to create a single AddInData object with an array of details, this approach is less scalable. First is contending with the mandatory limit of 10,000 characters. Second is that it can cause unduly large objects to deal with which can be less memory efficient. Third is that if there is an array of entries and you need to remove one, you will have to remove the whole object and add a new one with the updated list of details. In general, we have found it more useful to treat the AddInData as a simple object which there can be many of. Storage API Add-in Sample","link":"/myGeotab/addIns/addInStorage","breadCrumb":["MYG","Add-Ins","Using Add-Ins for Data Storage"],"category":"guide"},{"id":19,"title":"Developing Add-Ins","headers":["Geotab Add-Ins can be of two types","Use cases","Requirements","Add-In configuration files","Example Add-In configuration file","Listing 2 - Creating submenu items","Using third-party libraries","Page lifecycle","Custom button Add-Ins","JavaScript button action","Complete integration example","Troubleshooting and debugging","Add-In icon validator"],"headerIds":["geotab-add-in-types","geotab-add-in-use-cases","geotab-add-in-requirements","geotab-add-in-configuration","geotab-add-in-configuration-example","geotab-add-in-submenu","geotab-add-in-third-party-libraries","geotab-add-in-page-life-cycle","geotab-add-in-custom-button-add-ins","geotab-add-in-js-action-button","geotab-add-in-integration-example","geotab-add-in-troubleshooting-and-debugging","geotab-add-in-icon-validator"],"content":"Add-Ins are used to extend the functionality provided by MyGeotab and Geotab Drive. An Add-In is JavaScript, HTML and CSS loaded into the MyGeotab or Geotab Drive portal and resides directly inside the user interface. This allows third-parties to create a seamless user experience and provide solutions that would otherwise require the user to visit a different website altogether.{\" \"} Click here {\" \"} to find the sample Add-Ins. The add-in generator is a great developer tool that allows integrators to create scaffolded add-in projects. You can learn more about the generator and all of its features by going into the{\" \"} generator-addin repository . Pages A custom page Add-In can be thought of as a complete web application inside your Geotab account. A custom page Add-In has access to the MyGeotab API and the current page state. With custom pages you can develop business-aware Add-Ins by combining MyGeotab data with your own APIs. Buttons Custom button Add-Ins can be included to perform different functions. Additional navigational buttons can be dynamically inserted inside certain areas of the MyGeotab user interface. This allows custom button Add-Ins to provide a simple way for users to reach your custom page Add-In (see Image 1). Buttons can also be placed on pages to execute functions for automation of routine tasks, such as report generation (see Image 3). Consider a manager who regularly performs similar tasks each day. Their workflow may consist of comparing fleet metrics with local data from your software. By creating a custom page Add-In, you can combine both of these tasks into one easy-to-use page where all the information is readily available. Another example is to quickly navigate between different areas of Geotab. A simple-to-use one-click button Add-In can be made for most pages. The button will guide the user between areas, and can optionally use the page state to automatically fill in URL parameters to run reports with a single click. The Add-Ins created must have their source code stored externally using your own hosting provider or your own servers. Referenced files must be publicly accessible via HTTPS and all hosted resources must be on a server that supports TLS 1.2 or higher. Each Add-In created will have one configuration file. The configuration file is a JSON file ( http://www.json.org ) of keys and values which describes the Add-In, who is responsible for it, what source code it contains, and a digital security signature. Table 1 - Add-In configuration file keys/values Property Description Type Required Version name The name of this Add-In String supportEmail Email address for support related to this Add-In String items Array of custom pages and/or buttons (External references) Array files Custom pages and/or buttons (Embedded code) Object key Unique MyGeotab Marketplace Add-In key assigned by Geotab. If there's no plan to get your Add-In to the Marketplace, you can leave out the key/value pair from the Configuration File String signature Digital signature of the Add-In String version The version of the add-in String enableViewSecurityId If true, a \"View {`{ADDIN_NAME}`} add-in\" security clearance feature is created that must be enabled for users to be able to view the Add-in. Boolean MyGeotab v9.0+ securityIds An array of custom security IDs that are added to the list of features available when editing clearances. These definitions can support multiple languages. e.g.{\" \"} { \"“securityIds”: [{“name”: “ExampleSecurityIdentifier1”, “en”: “Example Security Identifier 1”}, {“name”: “ExampleSecurityIdentifier2”, “en”: “Example Security Identifier 2”}]\" } Array MyGeotab v9.0+ If you do not know your MyGeotab Add-In key, please contact your authorized Geotab reseller for support. The Add-In configuration file can specify the contents using either the Items, Files property, or a combination of both. It is recommended to use Items and externally referencing the source code to make development and debugging easier. When ready, the code can be embedded directly on Geotab's servers. The Add-In configuration file below demonstrates how to define a simple Add-In which references an HTML page specified by its URL. Any CSS or JavaScript which is required by the Add-In would be specified in the referenced HTML. Listing 1 - A simple Add-In configuration JSON file Test the example above by navigating to Administration → System → System Settings → Add-Ins. Select New Add-In and paste the example in the configuration tab. Be sure to select save then refresh the page. Each Add-In can create a navigation entry in the left hand side menu. This allows quick and easy access to all of the Add-Ins. The placement of the navigation entry for the Add-In is specified in the configuration file, relative to another built-in navigation entry. In the section below, a navigation entry is placed directly after the Activity entry. A user with English as their interface language will see \"English Menu Text\" as the label. Note that we show only two properties for brevity. Image 1 - Modified left-hand-side menu The Add-In navigation entry can be placed after any of the following built-in values: GettingStartedLink ActivityLink EngineMaintenanceLink ZoneAndMessagesLink RuleAndGroupsLink AdministrationLink To place the navigation entry as a sub-menu entry in one of the main entries, place a slash (/) character after the name. The custom entry will be the first item inside the sub-menu. For example, by changing \"ZoneAndMessagesLink/\" as the value for the \"path\" key: \"path\": \"ZoneAndMessagesLink/\", This will insert the custom navigation entry as follows: Image 4 - Navigation entry after ZoneAndMessagesLink Navigation entries cannot be set at the third level (sub-sub-menu) and below. If done so by the steps outlined above, the entry will simply appear as a non-formatted bullet point in the menu. A user may not have access to some entries of the left hand side menu. The custom navigation entry will be shown after the nearest entry which is accessible to them. Table 2 - Menu item Name Description Type URL A URL to the HTML page to load when clicking on this menu item. String path Specifies where in the menu hierarchy this menu item should reside. It will follow the menuId specified or become a child item if a trailing slash is provided, such as{\" \"} \"ActivityLink/\". String menuName An object containing key value pairs for the text that appears on the menu item. The key is the language and the value is the text, for example:{\" \"} {`{\"EN\", \"New menu item\"}`}. Object icon (To be deprecated June 04, 2021) A URL to the image (svg, png, jpg, etc.) that is placed in front of the menu item. Note that the current image size is 32x32 but it is recommended that SVG icons are used to allow for scaling. This property is to be deprecated and replaced by svgIcon for versions 2102 onward. During the transition period, if both icon and svgIcon exist, svgIcon will have higher priority ( details here ). String svgIcon A URL to the svg image that is placed in front of the menu item. Since the image file type is a vector, you only need to submit one file in any color. The icon file will be updated to the appropriate colors ( details here {\" \"} ). A validator is available{\" \"} here . String Table 3 - Parent menu item Name Description Type menuId A unique identifier for this menu. This string value of your choice but should be unique. See built-in ones above{\" \"} \"GettingStartedLink\", \"ActivityLink\", etc. String path Specifies where in the menu hierarchy this menu item should reside. It will follow the menuId specified or become a child item if a trailing slash is provided, such as{\" \"} \"ActivityLink/\". String menuName An object containing key-value pairs for the text that appears on the menu item. The key is the language and the value is the text, for example:{\" \"} {`{\"EN\", \"New menu item\"}`}. Object icon (To be deprecated June 04, 2021) A URL to the image (svg, png, jpg, etc.) that is placed in front of the menu item. Note that the current image size is 32x32 but it is recommended that SVG icons are used to allow for scaling. This property is to be deprecated and replaced by svgIcon for versions 2102 onward. During the transition period, if both icon and svgIcon exist, svgIcon will have higher priority ( details here ) . String svgIcon A URL to the svg image that is placed in front of the menu item. Since the image file type is a vector, you only need to submit one file in any color. The icon file will be updated to the appropriate colors ( details here {\" \"} ). A validator is available{\" \"} here . String To create a sub-menu, add to the items array a special JSON object that looks nearly identical to the page item - with the exception of the URL property. The process consists in creating a{\" \"} parent menu item {\" \"} with the menuName for the submenu item, a menuId, icon, and a path for one of the build-in path navigation values (GettingStartedLink, ActivityLink,{\" \"} EngineMaintenanceLink, ZoneAndMessagesLink, RuleAndGroupsLink, AdministrationLink). To place a{\" \"} menu item {\" \"} under a parent menu item you will use the unique ID of the submenu as a path for the item. This is illustrated in the sample configuration below: Referencing source items Each Add-In can define zero or more items as part of its configuration file. An item is a collection of keys and values which represent a page or a button. Table 4 - Button item Name Description Type page Which built-in page to place the button on. Possible values:{\" \"} 'map', 'tripsHistory', 'devices', 'device', 'zones', 'users', 'user', 'rules', 'rule', 'exceptions', 'customReports', 'customReport', 'engineFaults', 'speedProfile', 'hosLogs', 'hosLog', 'groupsTree', 'routes', 'fuelUsage', {\" \"} and 'engineMeasurements'. String click A URL to a JavaScript file which is executed when the button is clicked. String buttonName An object containing key value pairs for the text that appears on the button. The key is the language, and the value is the text, for example{\" \"} {`{\"EN\", \"New menu item\"}`}. Object icon (To be deprecated June 04, 2021) for placing it in the button label. This property is to be deprecated and replaced by svgIcon for versions 2102 onward. During the transition period, if both icon and svgIcon exist, svgIcon will have higher priority ( details here ). String svgIcon A URL Reference to the svg image for placing it in the button label. Since the image file type is a vector, you only need to submit one file in any color. The icon file will be updated to the appropriate colors ( details here {\" \"} ). A validator is available{\" \"} here . String At least one language is required in each item definition. The following language options are currently supported in MyGeotab: English (\"en\"), French Canada (\"fr\"), German (\"de\"), Spanish (\"es\"), Japanese (\"ja\"), Polish (\"pl\"), Brazilian Portuguese ( \"pt-BR\"), Dutch (\"nl\"), Italian (\"it\"), Simplified Chinese (\"zh-Hans\"), Thai (\"th\"), Indonesian (\"id\"), Czech (\"cs\"), Swedish (\"sv\"), Turkish (\"tr\"), Malay ( \"ms\"), and French France (\"fr-FR\"). Reference to the image can be an external URL such as: https://mysite.com/images/icon.png; or a link to the image from the images folder of your Add-In. When using the items property to include your source code exclusively, you can set the files property an empty object using {`{ }`} as seen in Listing 1. Every Add-In has a JavaScript object which is set in your main.js file. For example, the Add-In class name \"myaddin\" is provided by the following JavaScript entry point: { ... }`} /> The name you provide should be unique for each Add-In and should take care to avoid including invalid characters in the name. Additionally, when referencing Add-Ins hosted externally, the absolute path to the Add-In should not include the following characters anywhere in their URL: \"-\" The dash symbol \"@\" The \"at\" symbol \"#\" The hash symbol For example, the following is an invalid absolute URL due to its dashes and will not be loaded correctly by MyGeotab: https://my-web-server.com/pathToAddIn/index.html Embedding source code When developing a custom page or button Add-In, you have the option to embed the source code for your project in the JSON configuration file. When using this method, there is no requirement to host your own HTML, CSS, or JavaScript files as they will be converted into strings and written inside the configuration file itself. Listing 3 - Add-In configuration file using embedded source code **...** **...** \", \"js\": { \"customScript1.js\": \"alert('Embedded Add-In');\", \"customScript2.js\": \"var e = 2.718;\" }, \"css\": { \"customStyles.css\": \"#customDiv{color:#ff0;}\" } }}`} /> Please be aware that some characters may need to use HTML escape characters ( HTML ISO-8859-1 Reference ) and{\" \"} Character Reference {\" \"} for the overall JSON object to be validated. By reproducing the previous example, there would be two folders, one named \"js\" and the other \"css\". Inside the folders are two JavaScript files and one CSS stylesheet; respectively. The user experience of your custom Add-In can be enhanced by including images in the configuration file. This can be performed in two ways; see Listings 4, 5, and 6 below. Listing 4 - Absolute path to image in HTML Referencing an external image using an absolute URL in the HTML or CSS. `} /> Listing 5 - Absolute path to image in CSS Listing 6 - Add-In configuration file with Base64 encoded image The other method is to embed the images along with the rest of the source code in the markup. First, the images will need to be encoded using{\" \"} Base64 encoding , then the references to the image files replaced with the encoded version directly in the HTML or CSS. ......\", \"css\": { \"customStyles.css\": \"#customDiv{background:url('images/img.png);}\" }, \"images\": { \"img.png\": [\"PD94bWdG3sN1M...\"] } ... }}`} /> Add-Ins can include references to external libraries that have been custom developed or to existing libraries such as jQuery. This is performed in the traditional way by including a{\" \"} {\"<\"}script{\">\"} {\" \"} tag to the URL of the file. Listing 7 - Referencing jQuery from an Add-In `} /> Keep in mind that the end-user using the Add-In will be viewing your Add-In from a Geotab server. The files referenced must be publicly available on the Internet. Firewalls cannot be configured with a specific IP address for the Geotab server as the address may change in the future. References to external source files can either be absolute URLs such as the example in Listing 7 or can be relative references to local files as demonstrated in Listing 3. Listing 8 - Avoiding CSS naming conflicts When referencing the CSS files, keep in mind that naming conflicts are possible. Geotab's outer framework defines a number of CSS styles for common HTML tags which the custom Add-In may inherit. When designing HTML tags, it is recommended to prefix the HTML tags with a common name when they are stylized with the CSS. Refresh`} /> When designing a custom page Add-In, it is important to understand the JavaScript events that take place on Geotab's servers. The user-defined JavaScript code must supply an entry point object which will be created with a predefined parameter signature. From these parameters, a signed-in Geotab API object will be received, along with the page state and a callback synchronization function. Every page on Geotab's servers, including custom page Add-Ins, have the following three methods called during their lifecycle: Table 5 - Add-In lifecycle methods Method Description Signature initialize Called only once when your custom page is first accessed. Use this method to initialize variables required by your Add-In. function(api, state, callback) {`{... }`} focus This method is called after the user interface has loaded or the state of the organization filter is changed. Use this method for initial interactions with the user or elements on the page. function(api, state) {`{... }`} blur This method is called when the user is navigating away from your page. Use this method to save any required state. function(api, state) {`{... }`} Visual diagram Understanding the workflow and methods called will help you design a responsive custom page Add-In. Keep in mind that your initialize method will only be called once, unless the user explicitly refreshes their web browser. When the user interface is ready, the focus method will be called. Finally, when the user is navigating away from your custom page Add-In, the blur method will be called, completing the Add-In lifecycle. It's important to call the callback passed into initialize after all work is complete. Keep in mind the asynchronous nature of JavaScript. Image 2 - Add-In lifecycle workflow diagram Lifecycle implementation The following code can be used as a starting point for a custom page Add-In. All of the lifecycle methods are defined, and the optional focus{\" \"} and blur methods will be called due to the callback method being called in the{\" \"} initialize method. Use the commented area to define and then assign variables in the scope of the Add-In. Each of the Add-Ins will need to define its own unique namespace with the prefix{\" \"} geotab.addin (note that the namespace is not hyphenated). In the example below, the full namespace is{\" \"} geotab.addin.myCustomPage1. Listing 9 - HTML and JavaScript entry point example Custom Page Add-In geotab.addin.myCustomPage1 = () => { // Initialize required Add-In variables // Example: // var element = document.getElementById(\"myButton\"); // if (element) { // element.addEventListener(\"click\", function (event) { // event.preventDefault(); // alert(\"Action performed\"); // }); // } return { initialize(api, state, callback) { callback(); }, focus(api, state) { // User interface is available }, blur(api, state) { // Save any Add-In state } }; }; Do Action `} /> Custom button Add-Ins allow you to extend the capabilities of a built-in Geotab page by appending a new button to the top menu of the page. When a user clicks the custom button Add-In, the JavaScript method that has been defined will be called. This JavaScript method has access to the event which was generated by the click, the Geotab API under the credentials of the current user, and the page state variables. Button Add-In configuration file The following example adds a custom button Add-In to the live map page. When clicked, the button will redirect the user to the vehicles page. Use this example as a starting point for creating your own custom button Add-Ins. The exact position of the custom button Add-In within a built-in page is defined by the developer. For instance, in Image 3, a new button labeled Perform Action is added to the toolbar of the live map page. This example uses external references to the source code. Similar to custom page Add-Ins, the Files property of the configuration file can be used to embed the source code on the Geotab servers. Image 3 - Custom button Add-In on the live map page Use cases The action your custom button Add-In performs is decided by your specific business requirement. The following are example actions that can be implemented: One-click navigation between maps and reports Call an API to alert for driver proximity Create a new zone at the current location Automated execution of a sequence of actions Listing 10 - Custom button Add-In configuration file Almost any page is available to have a custom button Add-In added to it. Use a web browser's address bar to find the correct value for the Page property. Geotab pages will have a trailing hash (“#”) symbol followed by the page name. Determine the page name and then set the “page” value of your custom button Add-In configuration file to that value.  When a custom button Add-In is clicked by a user, it will execute a predefined method from the JavaScript file referenced. This method provides the button action with access to the generated event, the Geotab API as the signed-in user, and the page state. To avoid conflicts with multiple Add-Ins enabled on an account, be certain to create unique namespaces for each Add-In. Listing 12 - Custom button click method { alert(\"Custom button Add-In clicked!\"); state.gotoPage(\"map\");};`} /> The state object is a powerful tool for creating navigational components by changing the current page state. The state object has access to a number of methods as follows: Table 6 - Geotab page state methods Method Description Parameters Return Type getState Gets an object that represents the current URL state None Object setState Sets the current URL state. The object parameter is a modified state retrieved from getState Object Void gotoPage Redirects the user to another page with optional parameters. Example:{\" \"} state.gotoPage(\"map\", {`{someParameter1: true, someParameter2: 5 }`}); String, [Object] Void hasAccessToPage Checks whether the current user has the security clearance to view a page by its # (hash) value. Example:{\" \"} var result = state.hasAccessToPage(\"map\"); String Boolean getGroupFilter Gets an array with ids of the selected groups in the organization filter. Example: var result = state.getGroupFilter(); None Array getAdvancedGroupFilter Gets an object with a relation property and a groupFilterConditions array of the selected groups in the organization filter. Example:{\" \"} var result = state.getAdvancedGroupFilter(); None Object The second parameter to the gotoPage method is optional and is used for query string parameters. Using all the concepts outlined in this document, the following is a complete integration example which creates a custom page Add-In with real-world functionality. In this example, the custom page has JavaScript methods that make requests using the Geotab API to retrieve the current vehicles on your account. The result of the API request is shown on the custom page in a list. Finally, when the user leaves the page, the custom page performs cleanup during the lifecycle methods. For the purpose of this example, the integrationExample.css and integrationExample.js are empty files. Source code Listing 13 - HTML and JavaScript code for integration example Custom Integration Example geotab.addin.integrationExample = function(api, state) { var center = document.getElementById(\"center\"), listCreator = function(entities) { var listElement = document.createElement(\"ul\"); listElement.appendChild(entities.reduce(function(frag, entity) { var element = document.createElement(\"li\"); element.textContent = entity.name; element.setAttribute(\"data-id\", entity.id); frag.appendChild(element); return frag; }; document.createDocumentFragment())); return listElement; }, goToVehicles = function(event) { var id = event.target.getAttribute(\"data-id\"); if (id) { state.gotoPage(\"device\", { id: id }); } }, refreshPage = function() { api.call(\"Get\", { typeName: \"Device\" }, function (result) { center.addEventListener(\"click\", goToVehicles, false); center.appendChild(listCreator(result)); }, function (error) { console.log(error.message); }); }, clearOnLeaving = function() { center.removeEventListener(\"click\", goToVehicles, false); center.innerHTML = \"\"; }; return { initialize: function(api, state, callback) { document.getElementById(\"vehiclesButton\").addEventListener(\"click\", function () { state.gotoPage(\"devices\"); }, false); callback(); }, focus: function(api, state) { refreshPage(); }, blur: function(api, state) { clearOnLeaving(); } } }; Go to vehicles page `} /> Listing 14 - Configuration file for integration example When developing Add-Ins, the use of Google Chrome and its Developer Tools window is recommended. To open the Chrome Developer Tools on Windows, press CTRL + SHIFT + I; on a Mac, press CMD + OPTION + I. The contents of console.log(\"...\") statements can be examined using the Developer Tools, the timeline of XML HTTP requests can be viewed, and breakpoints to step through the JavaScript source code can be created. It is also recommended to read Google's extensive learning resources available on using{\" \"} Chrome Developer Tools {\" \"} to get started debugging or learn about the advanced features they have available. Note: Add-Ins that were locally added to a database in the past (recommended approach is to host on a server externally) might throw the error message{\" \"} \"Add-In threw an error. Please contact your administrator.\" To further confirm, the following error will appear in the browser console (found by hitting CTRL+SHIFT+I):{\" \"} Error: Add-In files: {\"<\"}add-in file name{\">\"} couldn't be loaded. Probably they were moved to another location or removed. {\" \"} This could be linked to a server maintenance/migration event. The workaround would be to re-upload the files for the Add-Ins back to the database, while the resolution would be to externally host the source code as per the requirements listed{\" \"} here . The Add-In Icon Validator tests uploaded SVG files against{\" \"} Geotab's requirements {\" \"} and displays them in the reformatted colors and style that will be displayed in MyGeotab.{\" \"} Launch the validator .","link":"/myGeotab/addIns/developingAddIns","breadCrumb":["MYG","Add-Ins","Developing Add-Ins"],"category":"guide"},{"id":20,"title":"Geotab Map Add-In Overview","headers":["Installation","Usage","Map Add-In Services","Example Add-Ins"],"headerIds":["installation","usage","map-addin-services","example-addins"],"content":"Map Add-ins are integrations embedded within the Map or Trips History pages of the MyGeotab platform. Once installed, a panel will appear on the right-side of the Map or Trips History page, containing the UI of the Map Add-in. These Add-ins can read from and operate on the map, as well as access the MyGeotab APIs. This document outlines the installation process and APIs available for Map Add-In development. Below is an example of a Map Add-In installed within the Map page of MyGeotab. When a user clicks a vehicle on the map, this integration displays the relevant data for that vehicle. Figure #1 - The {'\"'}Vehicle Info{'\"'} Map Add-in. Map Add-ins are installed by uploading an{/*TODO: fix link*/} Add-in Configuration file into MyGeotab. Click on Administration -{\">\"}{\" \"} System... -{\">\"} System Settings -{\">\"} Add-Ins -{\">\"} New Add-In, and upload the Add-in Configuration file. The following is an example of a Map Add-in's Configuration file: The main properties of the Configuration file are as follows: page - This defines which page the Map Add-in will reside within. This could be “map” (The Map page) or “tripsHistory” (the Trips History page). The default value is “map”. title - This is a heading displayed at the top of the panel when there are multiple Map Add-ins installed. If a \"title\" is not provided, the Add-in defaults to the \"name\" parameter. noView - If true, the add-in will not be displayed in the right-side panel. The default value is{\" \"} false. src - The JavaScript file reference for the Add-in. This can be an externally hosted file or uploaded into MyGeotab by dragging and dropping it into the Configuration file window. style - The CSS file reference for this Add-In. This can be externally hosted or uploaded to MyGeotab. url - The HTML file reference for this Add-In. This option can be used instead of src and style. Links to CSS and JavaScript files can be made within this HTML file. All content within the {\"<\"}body{\">\"} tags will be added to the Map Add-in UI {\"(\"} {\"(\"} Example {\")\"} {\")\"}. You can find example Map Add-ins{\" \"} here . Iframe Setup In the MyGeotab portal, Map Add-ins are loaded when the user visits the MyGeotab page containing the Add-in. For example, the Add-in in Figure #1 loads when the user visits the Map page. Map Add-ins are loaded inside an iframe with its sandbox attribute set to \"allow-scripts\". This allows the Map Add-in to run custom scripts, such as the JavaScript file from the \" src\" parameter in the Add-in Configuration file. Important Notes: All Map Add-ins installed in a database are active at the same time, when the user is on the Map or Trips History page. If different Add-ins use the same variable name, it will cause an error and will lead to a non-working Add-in. You should name your variables according to your solution name - e.g. for \"ABC Add-in\" you should use \"abc\" as a prefix for all your variables. When the user leaves the page, the content of the iframe is cleared by the browser. When the user returns to the page, the scripts inside the iframe are reloaded. If necessary, the current Add-In state can be saved in Local Storage, IndexedDB, or elsewhere. Do not access elements or APIs outside the iframe panel; they can be changed without notice in future versions of MyGeotab, which might break your Add-In. Use only the services and methods documented here and on the API Reference page when interacting with a page outside the iframe. Panel Size The iframe panel has a fixed width of 450 pixels; the width shrinks to accomodate screens with widths below 600 pixels. The panel height is responsive, always reaching the bottom of the page. The figures below display how the panel size changes between a desktop screen and a mobile phone screen. Figure #2 - Map Add-in size on desktop. Figure #3 - Map Add-in size on mobile. If multiple Map Add-ins are installed, each is accessible by selecting the appropriate tab at the top of the panel. In Figure #4, there are 3 add-ins installed on the page, denoted by the 3 tabs at the top of the panel. The add-ins are titled \"Live Trip History\", \"Tooltip\", and \"Vehicle Info\". Figure #4 - Multiple Add-ins on the Map page. Structure The starting point for the Map Add-in JavaScript code is the function that is added as a method to \"window.geotab.addin\". For example: { // code for Map Add-In }`} /> This function has two arguments: elt - The HTMLElement of the Add-In. It contains everything that belongs to the Add-In. service - The JavaScript file reference for the Add-in. The Add-in function will be called when a user visits the Add-in by clicking on its tab. After that, the \"focus\" and \"blur\" events will be fired when the user opens or leaves the Add-in tab, respectively {\"(\"}See Page Service{\")\"}. Here are some examples {\" \"} and{\" \"} type definition files {\" \"} that can help you understand how to work with Map Add-ins. Download them, unzip the files, then follow the instructions in the ReadMe document.","link":"/myGeotab/addIns/mapAddIns","breadCrumb":["MYG","Add-Ins","Map Add-ins"],"category":"guide"},{"id":21,"title":"API Clients","headers":[".NET","Java","JavaScript","Node.js","Python","PHP"],"headerIds":["dotnet","java","javascript","nodejs","python","php"],"content":"The MyGeotab API is language agnostic and can be accessed from languages that support HTTPS requests and JSON. There are a number of language specific API clients that roll-up some common functionality such as authentication, session management, deserialization, etc. making it easier to hit the ground running in your language of choice. Quick start Install the{\" \"} NuGet package {\" \"} from the package manager console: {`Install-Package Geotab.Checkmate.ObjectModel`} Please remember to regularly check for Geotab.Checkmate.ObjectModel nuget package updates. Ideally, your integration should use the same Geotab.Checkmate.ObjectModel nuget package version as the one that your database is on. Using it in code >(\"Get\", typeof(Device), new { resultsLimit = 1 });`} /> Quick start Add the{\" \"} maven dependency Using it in code request = AuthenticatedRequest.authRequestBuilder() .method(\"Get\") .params(SearchParameters.searchParamsBuilder() .credentials(loginResult.getCredentials()) .typeName(\"Device\") .build()) .build(); Optional> result = api.call(request, DeviceListResponse.class);`} /> Quick start Install the Bower package from the command line: {`$ bower install --save mg-api-js`} Using it in code {`(`}more on{\" \"} github - MyGeotab API wrapper for both clientside JavaScript and NodeJS {`)`}  Quick start Install the{\" \"} NPM package {\" \"} from the command line: Using it in code {`(`}more on{\" \"} github - nodejs client for the MyGeotab API {`)`}  Quick start Install the library and command line tool: {`$ pip install mygeotab`} Using it in code {`(`}more on{\" \"} github - Python client for the MyGeotab SDK {`)`}  Quick start Install the composer package from the command line: {`$ composer require geotab/mygeotab-php`} Using it in code {`(`}more on{\" \"} github - PHP client for the MyGeotab SDK {`)`} authenticate(); $api->get(\"Device\", [\"resultsLimit\" => 1], function ($results) { var\\_dump($results);}, function ($error) { var\\_dump($error);});`} />","link":"/myGeotab/apiClients","breadCrumb":["MYG","API Clients"],"category":"guide"},{"id":22,"title":".Net Samples","headers":["How to run the examples?","Get count","Extract mileage","Get logs","Get fuel tax details (IFTA)","Text message","Import groups","Reconcile groups - (Alpha version)","Import devices","Import zones","Import zones from shape file","Import users","Data feed"],"headerIds":["how-to-run-the-examples","get-Count","extract-mileage","get-logs","get-fuel-tax-details-IFTA","text-message","import-groups","reconcile-groups-alpha-version","import-devices","import-zones","import-zones-from-shape-file","import-users","data-feed"],"content":"The following examples show common usages of the SDK using dotnet. We recommend that you study the examples to learn everything necessary to build your own custom applications: In order to run these examples, you first need to{\" \"} install .NET Core . After that, you can clone the{\" \"} repo , go into each of the examples folders and either: Run from source using the following commands: dotnet restore dotnet run Compile and run using the following commands dotnet restore dotnet build dotnet bin/Debug/[framework]/[binary name] A simple console example to obtain the count of devices from a database. A good example to see how our authentication scheme works. { window.open(\"https://github.com/Geotab/sdk-dotnet-samples/tree/master/GetCount\", \"_blank\"); }} ariaLabel=\"Source for get count folder\" > View source code An example that “extracts” vehicle mileage into a CSV or XML file. A good starting point for any data extraction tool. { window.open(\"https://github.com/Geotab/sdk-dotnet-samples/tree/master/ExtractMileage\", \"_blank\"); }} ariaLabel=\"Source for extract mileage folder\" > View source code An example that obtains the logs for a given vehicle between a range of dates. { window.open(\"https://github.com/Geotab/sdk-dotnet-samples/tree/master/GetLogs\", \"_blank\"); }} ariaLabel=\"Source for get logs folder\" > View source code An example that shows how to: Iterate through a list of devices. Retrieve fuel tax details for each device over a given time interval. Trim each detail to the time interval.  { window.open(\"https://github.com/Geotab/sdk-dotnet-samples/tree/master/GetFuelTaxDetails\", \"_blank\"); }} ariaLabel=\"Source for get fuel tax details folder\" > View source code An example that sends text messages to and from a GO device. { window.open(\"https://github.com/Geotab/sdk-dotnet-samples/tree/master/TextMessage\", \"_blank\"); }} ariaLabel=\"Source for text message folder\" > View source code A console example that is also a group import tool. It enables a one time import of groups to a database from a CSV file. { window.open(\"https://github.com/Geotab/sdk-dotnet-samples/tree/master/ImportGroups\", \"_blank\"); }} ariaLabel=\"Source for import groups folder\" > View source code A console example that is also a group import tool. Similar to the ImportGroups tool, it enables the initial import of groups into a database from a CSV file. Unlike the ImportGroups tool, ImportGroupsR enables synchronization between an existing group tree in a database and a group tree represented by the CSV file and can be run multiple times with the same or updated CSV file. The input CSV file shall represent an entire tree of groups with which the database will be synchronized. R in the name stands for Reference. Reference is the property of a group that should be unique and is used as the group identifier. This tool can move groups to different parent groups and can delete groups if certain command line arguments are used. Please use this tool with caution and at your own risk. { window.open(\"https://github.com/Geotab/sdk-dotnet-samples/tree/master/ImportGroupsR\", \"_blank\"); }} ariaLabel=\"Source for import groups R folder\" > View source code Another console example that imports devices from a CSV file. { window.open(\"https://github.com/Geotab/sdk-dotnet-samples/tree/master/ImportDevices\", \"_blank\"); }} ariaLabel=\"Source for import devices folder\" > View source code A console example that imports zones from a CSV file. This is useful if you have a list of geographic coordinates and want to quickly create zones around them. { window.open(\"https://github.com/Geotab/sdk-dotnet-samples/tree/master/ImportZones\", \"_blank\"); }} ariaLabel=\"Source for import zones folder\" > View source code Another console zone importer, but imports from an{\" \"} Esri shapefile {\" \"} set (.shp, .shx, .dbf) into a given database. { window.open(\"https://github.com/Geotab/sdk-dotnet-samples/tree/master/ImportZonesShapeFile\", \"_blank\"); }} ariaLabel=\"Source for import zones shapefile folder\" > View source code Another console example that imports users from a CSV file. { window.open(\"https://github.com/Geotab/sdk-dotnet-samples/tree/master/ImportUsers\", \"_blank\"); }} ariaLabel=\"Source for import users folder\" > View source code An example of retrieving GPS, Status and Fault data as a feed and exporting to a CSV file. { window.open(\"https://github.com/Geotab/sdk-dotnet-samples/tree/master/DataFeed\", \"_blank\"); }} ariaLabel=\"Source for data feed folder\" > View source code","link":"/myGeotab/codeSamples/dotnetSamples","breadCrumb":["MYG","Code Samples",".Net Samples"],"category":"guide"},{"id":23,"title":"JavaScript Samples","headers":["Add a driver","Add a zone","Pull a data feed","Display a vehicle's odometer readings","Get count of devices and users","Get vehicle location","Bulk importers","Move a zone","Poll for text messages","Send a text message","Show vehicle trips on map","Embedded URLs","Status data sampler","Starter kit","Customer registration"],"headerIds":["javascript-example-add-driver","javascript-example-add-zone","javascript-example-data-feed","javascript-example-display-odometer","javascript-example-get-count","javascript-example-get-vehicle-location","javascript-example-importers","javascript-example-move-a-zone","javascript-example-poll-for-text-messages","javascript-example-send-a-text-message","javascript-example-show-vehicle-trips-on-map","javascript-example-embedded-urls","javascript-example-status-data-sampler","javascript-example-starter-kit","javascript-example-customer-registration"],"content":"","link":"/myGeotab/codeSamples/javascriptSamples","breadCrumb":["MYG","Code Samples","JavaScript Samples"],"category":"guide"},{"id":24,"title":"Using In .NET","headers":["Nuget package","API class","Next steps"],"headerIds":["nuget-package","api-class","next-steps"],"content":"The .NET SDK tools provide an easy way to integrate MyGeotab into .NET software. All of the communication to Geotab's services is accomplished over HTTPS with data serialized in{\" \"} JSON {\" \"} format. The .NET library provided will automatically handle the JSON serialization and deserialization into MyGeotab objects. The{\" \"} nuget package {\" \"} is an SDK library for accessing MyGeotab customer databases. It is a convenient \"wrapper\" around Geotab's HTTP/JSON API to allow developers focus on writing code instead of moving data over the wire. It includes tools to assist authenticating against Geotab's servers, automatically serializing/deserializing JSON, and providing definitions for Checkmate object classes. Please remember to regularly check for Geotab.Checkmate.ObjectModel nuget package updates. Ideally, your integration should use the same Geotab.Checkmate.ObjectModel nuget package version as the one that your database is on. Quick start in API Clients Step 1: Initialize & authentication In order to have access to the API class, add the following to the file's includes section: An instance of API can now be constructed to be used in the code. For the most basic use case, all the data that is needed is user credentials and a database name: At this point there has not been any communication with Geotab's servers. In order to make calls to Geotab's API, an authentication call must be made: When the call is made to Geotab's servers to authenticate, a token is returned for security. Behind the scenes, the Authenticate call makes a JSON-RPC request to Geotab's \"Authenticate\" method. The resulting security token and server information are stored in order to make further calls to the API. For more information regarding authentication, please review the Authentication documentation. Step 2: Making calls When authenticated, calls are made to the API by invoking the {`Call`} method of the API class. The example below illustrates how to make a generic call to get all devices in the system. {`List devices = await api.CallAsync>(\"Get\", typeof(Device));`} In the example below it is shown how to delete a device using the generic \"Remove\" method. Notice that it is not required to send all of the device's information to remove it, the device's id is sufficient: (\"Remove\", typeof(Device), new { entity = new Device { Id = \"b1a34\" }});`} /> The last parameter to this Call method is an{\" \"} anonymous object {\" \"} which contains the parameters for the method (please review the API reference to see which parameters the method expects, and whether the parameters are required or optional). The parameter order is not significant, and it is acceptable to omit optional parameters. Optional parameters will revert to their default values, typically \"null\" or “false” values. The API class automatically handles databases that are moved to different servers in the federation and expired tokens (token are typically valid for 2 weeks) by automatically re-authenticating and continuing. Example code The following is a simple console app that will output the latitude and longitude of each device in a list of devices: >(\"Get\", typeof(Device)); Console.WriteLine(\"SerialNumber\\tLatitude\\tLongitude\"); foreach (Device device in devices) { // Get the Device Status Info which contains the current latitude and longitude for this device var results = await api.CallAsync>(\"Get\", typeof(DeviceStatusInfo), new { search = new DeviceStatusInfoSearch { DeviceSearch = new DeviceSearch { Id = device.Id } } }); if (results.Count <= 0) { continue; } DeviceStatusInfo deviceStatus = results[0]; // Print the results to the console Console.WriteLine(device.SerialNumber + \"\\t\" + deviceStatus.Latitude + \"\\t\" + deviceStatus.Longitude); }}`} /> Hint: async main method requires{\" \"} C# 7.1 . After entering your credentials into the API constructor, this example will produce results similar to this in your command prompt window. dotnet runSerialNumber Latitude LongitudeG70000000001 43.4371071 -79.7124329G70000000002 43.3683701 -79.7784042G80000000003 43.4620934 -79.6879883`} /> here","link":"/myGeotab/guides/codeBase/usingInDotnet","breadCrumb":["MYG","Guides","Code Base","Using In .NET"],"category":"guide"},{"id":25,"title":"Using In Java","headers":["Maven dependency","API class","Next steps"],"headerIds":["maven-dependency","api-class","next-steps"],"content":"The Java SDK tools provide an easy way to integrate MyGeotab into Java software. All of the communication to Geotab's services is accomplished over HTTPS with data serialized in{\" \"} JSON {\" \"} format. The Java library provided will automatically handle the JSON serialization and deserialization into MyGeotab objects. The maven dependency available in{\" \"} maven repo {\" \"} is an SDK library for accessing MyGeotab customer databases. It is a convenient \"wrapper\" around Geotab's HTTP/JSON API to allow developers focus on writing code instead of moving data over the wire. It includes tools to assist authenticating against Geotab's servers, automatically serializing/deserializing JSON, and providing definitions for Checkmate object classes. Quick start in API Clients Step 1: Initialize & authentication An instance of API can be constructed to be used in the code. For the most basic use case, all the data that is needed is user credentials and a database name: At this point there has not been any communication with Geotab's servers. In order to make calls to Geotab's API, an authentication call must be made: When the call is made to Geotab's servers to authenticate, a token is returned for security. Behind the scenes, the Authenticate call makes a JSON-RPC request to Geotab's \"Authenticate\" method. The resulting security token and server information are stored in order to make further calls to the API. If the {`authenticate()`}{\" \"} call is not made explicit, then it will be made implicit, behind the scene, before the first api {`call()`}. For more information regarding authentication, please review the Authentication documentation. Step 2: Making calls When authenticated, calls are made to the API by invoking the {`call()`} method of the API class. The example below illustrates how to make a generic call to get all devices in the system. request = AuthenticatedRequest.authRequestBuilder() .method(\"Get\") .params(SearchParameters.searchParamsBuilder() .credentials(loginResult.getCredentials()) // optional; API will set this automatically if not provided, based on the authenticate() result .typeName(\"Device\") .build()) .build(); Optional> result = api.call(request, DeviceListResponse.class); }`} /> In the example below it is shown how to delete a device using the generic \"Remove\" method. Notice that it is not required to send all of the device's information to remove it, the device's id is sufficient: removeRequest = AuthenticatedRequest.authRequestBuilder() .method(\"Remove\") .params(EntityParameters.entityParamsBuilder() .typeName(\"Device\") .entity(device) .build()) .build(); api.call(removeRequest, VoidResponse.class); }`} /> The {`call()`} parameters are: {`request`} represents the request details, and it's an instance of {`AuthenticatedRequest`} {`response`} represents the response and it's an instance of {`BaseResponse`}; {`BaseResponse`} holds the actual result type to be deserialized and returned by the {`call()`}{\" \"} method The API class automatically handles databases that are moved to different servers in the federation and expired tokens {`(`}token are typically valid for 2 weeks{`)`} by automatically re-authenticating and continuing. Example code The following is a simple console app that will search Device by serial number: request = AuthenticatedRequest.authRequestBuilder() .method(\"Get\") .params(SearchParameters.searchParamsBuilder() .credentials(loginResult.getCredentials()) .typeName(\"Device\") .search( DeviceSearch.builder() .serialNumber(serialNumber) .build() ) .build()) .build(); Optional> deviceListResponse = api.call(request, DeviceListResponse.class); if (!deviceListResponse.isPresent() || deviceListResponse.get().isEmpty()) { log.error(\"Device not found\"); System.exit(1); } Device device = deviceListResponse.get().get(0); log.info(\"Found {}\", device); } catch (Exception exception) { log.error(\"Failed to get device: \", exception); System.exit(1); } } catch (Exception exception) { log.error(\"Unhandled exception: \", exception); } finally { log.info(\"Press Enter to exit...\"); System.in.read(); } }`} /> here","link":"/myGeotab/guides/codeBase/usingInJava","breadCrumb":["MYG","Guides","Code Base","Using In Java"],"category":"guide"},{"id":26,"title":"Using In JavaScript","headers":["GeotabApi object","Creating a GeotabApi object","Using the GeotabApi object","The Call method arguments","MultiCall","A note about state","Next steps"],"headerIds":["geotabapi-object","creating-a-geotabapi-object","using-the-geotabapi-object","the-call-method-arguments","multicall","a-note-about-state","next-steps"],"content":"Geotab provides JavaScript developers with easy to use and consistent access to our API through the{\" \"} GeotabApi {\" \"} object. The GeotabAPI provides authentication handling, asynchronous method calling, error handling and MultiCall support. Quick start in API Clients When creating the GeotabApi object, prepend a reference to the file api.js before the main JavaScript code: // Custom code goes here`} /> In the main JavaScript code, initialize the GeotabApi object by providing the constructor with a callback function to handle the authentication: When the GeotabApi object has been set up, the first call to a method triggers the callback to get the credentials. Once the credentials have been entered by the user,{\" \"} authenticationCallback is called with the provided credentials, and then the original method result is retrieved. After this method has been called, the server, database, username, and session are all stored in localStorage. The following example shows how to use the GeotabApi object to request the location of a vehicle: 0) { alert(JSON.stringify(result[0])); }}, function (errorString) { alert(errorString);});`} /> The Call method is used to \"Call\" any of the APIs that the MyGeotab SDK provides. It takes 4 arguments: Argument Description method The API method that is being called. For example, “Get” or “GetCountOf”. See the API reference for the full set of methods. params The parameter object that the API method expects. For example:{\" \"} {`{ typeName: \"DeviceStatusInfo\", search { deviceSearch: { id: deviceId } } }`} callbackSuccess The function that will be called back if the API call succeeds. The callback function has a single argument called “result” that contains any results returned by the API call. callbackError The function that will be called back if the API call fails. The callback function has a single argument that contains error information. A MultiCall is a way to make several API calls against a server with a single HTTP request. This eliminates potentially expensive round trip costs. When making multiple calls, we recommend leveraging MultiCalls as much as possible. For more information about MultiCalls, see the MultiCall documentation. Additionally, you can find a JavaScript MultiCall example here. The GeotabApi object is designed to be stateless. The main reason for this is that a call could fail at any point due to session expiry or the database moving. The{\" \"} authenticationCallback will automatically be called when this situation is detected. The application will then prompt (or read from file etc.) for the required credentials. The call that was being attempted will resume when new credentials are received. This also means that there is no concept of being \"logged in\" or “logged out” of the server. Once you have a basic understanding of how api.js and the JavaScript API work and want to learn more, you can take a look at our examples{\" \"} here.","link":"/myGeotab/guides/codeBase/usingInJavascript","breadCrumb":["MYG","Guides","Code Base","Using In JavaScript"],"category":"guide"},{"id":27,"title":"Concepts","headers":["Security","Make Your First API Call","Results And Errors","Authentication","HTTP Compression","Limits","Working With Dates","Unit Of Measure","Entities","ID","Building Block Approach","PropertySelector BETA","MultiCall"],"headerIds":["security","make-your-first-api-call","result-and-errors","authentication","http-compression","limits","working-with-dates","unit-of-measure","entities","id","building-block-approach","property-selector","multicall"],"content":"Requests made to the Geotab API are performed over HTTPS. The current API is version 1. The version number is appended to the API endpoint URL, where the web application sends requests: https://[myserver]/apiv1 NOTE: Sample text inside [ and ] (e.g [myserver] are placeholders to indicate where the user enters information unique to their requirements. API request parameters and their results are transported using the lightweight{\" \"} JSON {\" \"} format. The API Reference contains a list of methods that can be invoked, including the parameters they expect, and the results they return. Examples are provided below to demonstrate what the Geotab API can do. Requests to the Geotab API are invoked using HTTP GET or HTTP POST. HTTP POST requests use the JSON-RPC standard. When making requests that contain MyGeotab credentials, use the POST request only. This helps to minimize potential leaks into browser histories, or web server logs. The following sections explain how to construct HTTP GET and POST requests to the Geotab API. MyGeotab API requests can only be made over secure connections (HTTPS). The minimum SSL/TLS version supported by the MyGeotab API is TLS v1.2. Geotab recommends that all users of Geotab APIs adhere to modern cryptography best practices. When using our libraries, we recommend that developers use algorithms and ciphers that provide the most forward secrecy and the greatest adherence to modern compliance requirements. At the time of writing this document, best practices implies that we use AES-256 (or stronger) cipher suites and algorithms with a modern cipher mode, such as GCM or CCM. We recommend utilizing modern key exchange algorithms such as DHE or ECDHE. RSA3072 or the equivalent elliptic cryptographic algorithm should be use for asymmetric cryptography. We recommend SHA3 for all hashing operations. When using modern network communications software, the latest version of TLS (TLS1.3 at the time of writing) should be used. While both GET and POST requests are supported, we strongly recommend that only POST requests are used for requests that include MyGeotab credentials as parameters. The endpoint shown below is used to invoke an API method when an HTTP POST request is used. The example that follows illustrates a POST request that returns all devices (vehicles) and their properties. https://[myserver]/apiv1 The method's name and parameters are passed in the HTTP body using the{\" \"} JSON-RPC {\" \"} format. Geotab API version 1 supports JSON-RPC version 2.0. The full set of API methods and objects returned can be viewed in the API reference. To understand which parameters must be passed, consider the following JSON object: To understand how HTTP POST can be used to invoke a method, consider the following JavaScript example. This can be achieved from any language that supports HTTP, such as the java.net.HttpUrlConnection class in Java, or System.Net.Http.HttpClient in .Net. Using the example above, a successful request to the server results in an object with the property \"result” in the following format: Generic: Specific: However, if the request is incorrect, or an error is triggered on the server, the error is returned as an object with the property \"error”. For example: {/* ToDo: Update URLs later. */} The properties of the error object are JsonRpcError, and JsonRpcErrorData. Objects are documented in the API Reference. Authentication is performed to obtain a session token (credentials). This token then confirms your identity for subsequent API operations. If the session expires, a new Authentication request must be made to get a new token. This approach encourages efficient use of Authentication requests, as shown in the Authentication example below. Below you can see an example making an authentication request to \"my.geotab.com” that completes successfully, and then uses session to get a single device: { const xhr = new XMLHttpRequest(); const rpcData = JSON.stringify({ \"method\": method, \"params\": data }); xhr.addEventListener(\"readystatechange\", function() { if (this.readyState === 4) { let jsonRpcResponse = JSON.parse(this.responseText); if (jsonRpcResponse.error) { reject(new Error(\\`\\${jsonRpcResponse.error.data.type}: \\${jsonRpcResponse.error.message}\\`)); } else { resolve(jsonRpcResponse.result); } } }); xhr.open(\"POST\", \\`https://\\${host}/apiv1\\`); xhr.setRequestHeader(\"content-type\", \"application/json\"); xhr.setRequestHeader(\"cache-control\", \"no-cache\"); xhr.send(rpcData); });} (async () => { const authenticateHost = \"my.geotab.com\"; // Authenticate to get a token let loginResult = await call( authenticateHost, \"Authenticate\", { \"userName\": \"[user@email.com]\", \"password\": \"[password]\", \"database\": \"[database]\" } ); console.log(loginResult); // Use the correct host when making subsequent calls (for legacy compatibility) let callHost = loginResult.path === \"ThisServer\" ? authenticateHost : loginResult.path; // Call to get one device let devices = await call( callHost, \"Get\", { \"typeName\": \"Device\", \"resultsLimit\": 1, \"credentials\": loginResult.credentials } ); console.log(devices);})();`} /> Database, user and password must be set for successful authentiation. Example 1: Authenticate With Valid Credentials In this example, an authentication request is made to my.geotab.com to log in to the database named database. The Authenticate method is requested using the credentials provided. The response from the server contains two important properties — path and credentials. The path will either contain the URL of a server, or the string value ThisServer. Since the database is on my.geotab.com, it returns{\" \"} ThisServer. This means that the path is correct. The credentials object contains the username, database and session ID. This object is required for all subsequent requests to the server. Since the authentication method confirmed the path is correct, other methods can be used as well. For example, you can mak a request to Get{\" \"} devices from my.geotab.com. Pass the credentials object with the call to Get Device. The Get result is returned with one device. Example 2: Requests With Missing Databases Or With Expiring Credentials The examples above demonstrate how to authenticate to get a token and make a call to Get devices. However, there are two additional scenarios to consider: The credentials provided to Authenticate method are invalid. The token has eventually expired. In these scenarios, the API request will fail returning the JSON-RPC error similar to below: If the error contains an object with type InvalidUserException, the authentication failed or the authentication process must be repeated to obtain a fresh token. The MyGeotab API supports brotli, gzip and deflate compression. To use either of these compression methods, include the HTTP header for \"Accept-Encoding”. For example: Accept-Encoding: brotli, gzip, deflate If you are using an API client (.Net, JavaScript, Nodejs, etc.), the header is enabled automatically. At Geotab, we work hard to create an open and flexible API that encourages creativity and innovation. We do this by providing tools to create powerful applications, integrations, and Add-ins, while maintaining overall system health and quality. Result and rate limits are intended to encourage API developers to use appropriate APIs for their use cases, and to safeguard against unbounded requests. Rate Limits Authenticate No more than 10 requests-per-minute are permitted for a user. Both successful and unsuccessful Authentication requests count towards the limit. Credentials with a password instead of, or combined with a session ID, must be authenticated. This ensures that each request where credentials are provided, are counted towards the user's authentication limits. GetFeed The GetFeed request has two common use cases: Receiving a constant feed of near real-time data reported by devices (GPS), or calculated by MyGeotab (Trips History). Generating large aggregate reports during an off-peak interval. For constant polling, we recommend polling for data at 30-second intervals. However, we understand that 30 seconds may be too infrequent for the rate of data generated by some vehicles, so we created rate limits. A rate limit of 1 request-per-second is applied to GetFeed requests for each supported entity type. CreateDatabase Typically used by Integrators, CreateDatabase provides a way to dynamically provision customer databases. Limits of 15 requests per minute, 100 requests per hour, and 800 requests per day are applied. OverLimitException When a rate limit is exceeded, an OverLimitException error is returned. A header (Retry-After) is also set with time remaining for the limit to reset. Header Example {`Retry-After: 58`} Example Headers If a rate limit is applied to an API, with a successful JSON-RPC response, headers are set with rate limit information: X-Rate-Limit-Limit: the rate limit period (eg. 1s, 1m, 12h, 1d) X-Rate-Limit-Remaining: number of request remaining X-Rate-Limit-Reset: UTC date time (ISO 8601) when the limit resets Example Result Limits GetFeed GetFeed is limited to 50,000 records returned in a single request. For legacy compatibility, GetFeed does not generate an exception when the limit provided is over 50,000. Rather, it implicitly limits results to 50,000 records. Get The entities listed below have Get limits of 50,000 results: AnnotationLog DVIRLog TrailerAttachment IoxAddOn CustomData BinaryData Other entities will have Get limits of 50,000 results in the future, along with a new parameter for pagination when the number of results exceed such limits. For easier transition to the future format, it's recommended that you pass in a 50,000 resultsLimit in the {`Get`} call, along with your own way to paginate (e.g. using timestamp). OverLimitException To ensure your application doesn't think it has every result that matches the search criteria, when in reality there are more, an error result ( OverLimitException) may be returned in these scenarios: If an API call is made with no results limit, one will be implicitly applied to the request on the server side. If the results are of the limit, an error result will be returned. If a request is made with a result limit higher than the imposed limit. A multicall child request limit is exceeded. No error will be returned if the provided rate limit matches the imposed limit, and the results match that limit. Example When exchanging dates as parameters to API methods, you must ensure that they are formatted properly as an{\" \"} ISO 8601 {\" \"} string (format yyyy-MM-ddTHH:mm:ss.fffZ). In addition, all dates will have to first be converted to{\" \"} UTC {\" \"} in order to ensure time zone information and daylight savings times are accounted for correctly. As a general rule, MyGeotab uses the metric system for values such as speed (km/h) and distance (m). For example, if you queried the odometer reading for a vehicle, the value would be returned in meters or if you retrieved the current speed of a vehicle it would be in km/h. It does not matter in which region in the world the vehicle or user of MyGeotab system is located — we always return the values in metric.A simple conversion can be applied to these values should you wish to work in imperial units or other customized units instead. Please note that MyGeotab also records various other status data (e.g. engine data) from the vehicle and these values can be in various units of measure. The units of measure are not provided by Geotab in all cases. Refer to the applicable{\" \"} SAE {\" \"} standard of the specific code for the associated unit of measure. All objects in the MyGeotab system are called entities. Entities have an ID property that is used to uniquely identify that object in the database. The ID is an opaque string value that uniquely identifies the entity and no assumption about the format or length of this ID value should be made when comparing or storing the values. An ID is used to uniquely reference entities in the API. IDs are represented by opaque strings. Generally the contents of the IDs are not significant for the user. Building logic around the value of the string should be avoided — unless it is a system ID (see the examples below). Example 3 In this example, a vehicle in the system and its ID value will be examined. Here is a partial JSON representation of a device object: Note the \"id” property with value \"b0a46”. This is the unique identifier for the device (vehicle) with description \"007 - Aston Martin”. To find Trips for this vehicle all of the properties of the device do not have to be passed to the Get method. Instead, only the ID property of the device object is required. Below is an example of a valid parameter object (TripSearch) for passing into Get method. The deviceSearch with the ID property set to the value \"b0a46” (as indicated in the example above) is passed. Calling the Get method with the parameter defined above will return all trips for the vehicle \"007 - Aston Martin”. Example 4 There are certain IDs that are predefined for system entities. For example the group that has been defined as the root group of all user groups, and called the CompanyGroup, will have an ID of \"CompanyGroupId” rather than other characters (such as \"b0a46” above). For example: If the system entities do not have any properties then they are specified as strings with their ID's name. For example the source \"Obd” will be identified as \"SourceObdId”. The results of a call to our API will only contain literal values and the identities of contained objects — not the actual fully populated child objects. This provides a predictable system that efficiently serializes objects to JSON and back. Additional lookups of the nested objects will be required to retrieve additional properties of the objects. For example, an engine status data record has a device property. If 1000 engine status data records are retrieved for a device, the status data's device property will only contain the ID of the device. An additional retrieval for the devices object will be required to obtain the status data records. This approach has several benefits: Saves bytes over the wire Reduces request time Avoids redundant copies of entities More flexible since the child objects may not always be required In the example below it can be seen how, by creating a dictionary of devices where the key is the device ID and the value is the device object, devices can be easily \"stitched” into the status data records: statusDatas[i].device = deviceLookup[statusDatas[i].device.id]; Depending on the process, for some entities like diagnostics, it may be desirable to maintain a local cache from which the status/fault data can be populated. In this case it will be necessary to refresh the cache when the cache is missing the required entity making an API call. This will allow the API to get the required entity and add it to the local cache. An example of maintaining a diagnostic cache would occur when consuming a feed of data from the API. An example of this process is included in both the{\" \"} .Net {\" \"} and{\" \"} JavaScript DataFeed {\" \"} examples. PropertySelector is a new optional parameter that can be used with the Get and GetFeed methods to selectively include or exclude specific properties for entity type requested. This provides a mechanism to reduce the amount of data sent over the wire and can significantly reduce call times. Supported Types A limited set of objects have support for use with property selector in the beta version. These objects tend to have many properties and would provide the most benefit to reducing size over the wire. Property Description Fields An array of string, consisting of the properties for a given Entity type for which we want to include/exclude in the entities of the result set. Refer to the reference page for all the properties supported for a given Entity. Note that the properties of an inheriting class will also be supported. (For example, Go9 is child of Device, so the properties defined for{\" \"} Go9 can be supplied to Fields.) IsIncluded A boolean, which if true, will include the properties of a given Entity type defined in{\" \"} Fields for the entities of the result set. Otherwise, if this boolean is false, the properties defined in{\" \"} Fields will be excluded. Examples A simple{\" \"} example {\" \"} of this can be illustrated by using the property selector with Device. The Device object can have many properties which may not be useful to all use-cases. For example, if I have an add-in to display a list of 500 devices by name. We only want our{\" \"} Device objects to have the properties Name and Id, so we set our PropertySelctor object like so: Javascript Request Response In our example, making this call using the property selector results in the total JSON size over the wire of 5.4 kB and time of 45 ms. Making the same call, without property selector (returning all properties) results in 41.8 kB of JSON sent over the wire and a round trip time of 320 ms. using property selector device count size time false 500 41.8 kB 320 ms true 500 5.4 kB 45 ms Improvement -36.4 kB -275 ms C# Example >( \"Get\", typeof(Device), new { propertySelector = new PropertySelector { Fields = new List { nameof(Device.Name), nameof(Device.Id) }, IsIncluded = true }, resultsLimit = 500 });`} /> List Of Supported Entities Below is a list of entities that support the PropertySelector functionality. Entity Supported in Release Notes Device 8.0 The following properties are not supported: {`deviceFlags`}, {`isAuxInverted`},{\" \"} {`deviceType`}, {`productId`},{\" \"} {`autogroups`}, {`auxWarningSpeed`},{\" \"} {`enableAuxWarning`} User 8.0 isEULAAccepted and acceptedEULA are tied to each other, so if either property is set to be returned based on the PropertySelector logic, both properties will be returned. Group 8.0 N/A Rule 8.0 N/A LogRecord 8.0 dateTime must be included. Trip 9.0 N/A TextMessage 10.0 N/A IoxAddOn 10.0 N/A IoxAddOnStatus 10.0 N/A PropertySelector FAQ Can I combine property selector and search? Yes. PropertySelector and Search work independently of each other and can be used together in the same request. A MultiCall is a way to make several API calls against a server with a single HTTP request. This eliminates potentially expensive round trip costs. Why use a MultiCall? Making an HTTP request over a network has overhead. This can be in the form of Network overhead, the round trip time to send and receive data over the network and HTTP overhead, the HTTP request and response headers. A MultiCall can be used to reduce amount of overhead in situations where many small requests need to be made to a server. For example, if we make a request to get the count of devices. The request would be constructed in a format similar to: Response: Let's assume that it takes 100 milliseconds for this call round trip (the time from sending request to receiving the response), including 40 milliseconds to send the request, 20 ms to process the data on the server, and 40 ms for the response to be returned.{\" \"} Google's SPDY research project white paper {\" \"} states that \"typical header sizes of 700-800 bytes is common”. Based on this assumption, we pay a 750 byte cost when making a request. From the example, there would be 80 ms of network overhead and 750 bytes of HTTP overhead, this is accepted as the \"cost of doing business” when making a request over a network. Taking the previous assumptions, what would the overhead be for making 1000 requests for road max speeds? When individual calls are made to the server for 1000 addresses; the base (minimum) HTTP and Network overhead is required for each of these calls. This would result in 80 seconds (80,000 milliseconds) of network overhead and 0.72 MB (750,000 bytes) in headers just going to and from the server. It can be clearly seen that a great deal of overhead can be generated by making small but repeated requests. By using a MultiCall, the network and HTTP overhead remains at the cost of a single request. This brings the overhead back down to our original 80 milliseconds and 750 bytes. The server processes each request and returns an Array of results when complete. The above illustration is an extreme example to demonstrate the benefits of using a MultiCall. A MultiCall can (and should) be used to make short running calls of 2 or more requests more efficient than individual calls. Basic Implementation Making a MultiCall is simple, use the method \"ExecuteMultiCall” with the parameter \"calls” of JSON type Array. Each call should be formatted as an Object with property \"method” of type string with the method name as its value and a property \"params” of type Object with the method parameters as its properties. The parent \"params” object will also need to contain the user credentials if they are required for at least one of the child methods being called. It is not necessary to include credentials with each child call. Response: Errors In a MultiCall, each request is run on the server synchronously. If one fails, the error results are returned immediately and unreached calls are not run. The error results includes the index of the call in the array that the exception occurred. To illustrate, let's assume an array of calls (api.multicall([call-a, call-b, call-c])) where call-b is formatted incorrectly. Below is an example of the error result. The requestIndex property contains the index of the call that failed. Alternatively, a successful MultiCall would look similar to: API Client Support {/* This has an id because there's a link to this section in the Using in Javascript page */} {/* ToDo: Update the link later on before finalizing SDK site */} All of the API clients have native support for making multi-calls. Below are examples of making multi-calls using the Javascript and .Net wrappers: JavaScript API multi-call example: .Net nuget package multi-call example: )}, new object[] { \"Get\", typeof(Source), new { search = new SourceSearch { Id = KnownId.SourceGeotabGoId } }, typeof(List)}, new object[] { \"Get\", typeof(Controller), typeof(List)},}; var results = api.MultiCall(calls); var diagnostics = (List)results[0];var sources = (List)results[1];var controllers = (List)results[2];`} /> MultiCall FAQ Can I use a search in a multicall? Yes, it is possible to use a search in a multicall. When shouldn't I use a multicall? If you need to make a few requests that are long running and return a large amount of data, it may be preferable to make the requests singularly instead of running one multicall request that continues for a very long time before completion. When the connection is held open for a long period of time, you become increasingly susceptible to network interference that can terminate the request. Manipulating data (Add, Set, Remove) via a multicall is not recommended. A multicall is not transactional. Therefore, if call 1 of 3 to Add succeeds and call 2 of 3 fails, call 3 of 3 will not be executed and call 1 would not be rolled back. How many request can I put in a multicall? For optimal performance, we advise limiting to 100 nested requests. This is relevant when processing requests large response sizes, for instance, Getover an extended period. Similarly, using chunking to manage high-volume requests improves process control and optimizes response management. That being said, the system does not enforce a hard limit on the number of requests in a multicall at this point. What if the call doesn't return a result? The index in the array of results will have a null value.","link":"/myGeotab/guides/concepts","breadCrumb":["MYG","Guides","Concepts"],"category":"guide"},{"id":28,"title":"Data Feed","headers":["Lightweight incremental poll","Dealing with volume","Searching","Caching to improve performance","Active vs calculated","Invalidated data","Trips","Exception events","HOS and DVIR feeds","Next steps","FAQ"],"headerIds":["lightweight-incremental-poll","dealing-with-volume","searching","caching-to-improve-performance","active-vs-calculated","invalidated-data","trips","exception-events","hos-and-dvir-feeds","next=steps","faq"],"content":"The data feed is the primary method used to synchronize data from the telematics system to another system using the API. The GetFeed method can be polled at intervals to get new and updated data from the system. The feed API works with a token that is passed on every request and sent back with the payload on every response. This allows Geotab to track \"up to which point in time\" we have already sent the receiver data. It also allows the receiver to stop and seamlessly resume the data feed. The feed API is designed to be lightweight and scalable. There is virtually no cost on Geotab's side for a poll request that yields no data. For example, a poll request when the round trip has no GPS coordinates will return no payload data. The requests themselves, the amount of processing time taken, and the amount of data returned via the internet are all extremely small. Here is a small trace showing {\"<\"} 100 bytes for an empty poll request with a response time of 19ms. The last request contains a payload with 2 GPS coordinates.  The polling frequency is dictated by the requirements of the integration. It could be as infrequent as once a day or as frequent as every few seconds. In each request the caller can specify the maximum number of data points that can be returned in a request. This allows the caller to have control over the maximum size of the responses. This value can be adjusted down from the default of 50,000 — with fewer data points yielding a faster response time. When the limit is reached, the response will be returned with the payload and a token which can be used to specify the point in time from which the next request should start. The request-response approach also allows for incremental processing. For example, if there were a large backlog of data, the caller would be able to process the chunks of data at its own rate until the backlog of data has been cleared. The API can be consumed by small and large customers alike. Larger customers can consume tens of millions of records per day via the AP The data feed was designed to be an efficient means of getting a continuous feed of new data from a given token. When a feed is first started it is possible to provide search criteria with a \"from date\" argument. This specifies the token that will be used to start the feed. This will guarantee that the feed will start at a point that will include any data that is at or after the “from date” argument, but may also include data timestamped before the “from date” argument. For example when performing a \"TripSearch\" and setting \"IncludeOverlappedTrips\" to True. While \"from date\" is supported, \"to date\" is not. The feed is not designed to return data within discrete dates. If you wish to obtain data in a particular date range, then use the standard Get methods associated with the entity search objects. If a version is specified, then the argument \"from date\" is ignored. Do not pass a search to any feed unless it specifically is mentioned in the GetFeed method documentation. It may be required to populate nested entities of data retrieved via the feed. Entities that are static or semi-static will respond well to caching. For example, status data and diagnostics are separate entities in the system. Status data references a diagnostic. Status data returned by the feed will only have the ID property of the diagnostic populated. If the diagnostic is required by your process then you must get the diagnostic in a separate API call and populate it in the status data record. This is a good example of where caching can be implemented to improve efficiency, as diagnostic data rarely changes. A cache of diagnostics can be held in memory, refreshed at some interval of your choosing (24 hours, 12 hours, etc.) and may vary depending on the entity type being cached. Entities that may respond well to caching include Unit of Measure, Diagnostic, Source, Device and User. There are two types of data that can be retrieved using a data feed: active data and calculated data. Active data are records that are received from a source, usually a Go device or user input. They are not created based off of other data. These records are static; once received, they are typically not updated and will not be removed by the system. For example, as new GPS (LogRecord) data arrives from a device, it is stored by the system. Calculated data are records generated automatically by the system, usually in response to active data that has recently been received. These records are dynamic; an existing calculated data record can be edited and removed by the system automatically, based on new active data that was received. This processing happens in real-time as new active data is received by the system. For example, as new GPS and engine data arrives from a device, it is processed to create new ExceptionEvents or edit/remove existing ExceptionEvents. Active Data Feeds AnnotationLog Audit CustomData DVIRLog DebugData Device Diagnostic DriverChange DutyStatusLog FaultData FillUp FuelUsed IoxAddOn LogRecord Route Rule ShipmentLog StatusData TextMessage Trailer TrailerAttachment User Zone Calculated Data Feeds ExceptionEvent FuelTaxDetail Trip As calculated data is processed in real time, the state of the data can change causing it to become invalidated. There are a few reasons why calculated data can become invalid or need to be updated by the system. A trip or exception is in progress The system receives new data that invalidates previous data Manual reprocessing was triggered Trips are calculated data. As new data arrives for a trip currently in progress, the older data for the trip is dropped from the database. The dropped data is then replaced with the newer, more current trip data. The updated trip data will have a different trip ID than the previous record of the trip. Thus the “unique trip ID” cannot be used to match an updated trip to an earlier state. The unique “key” (used to associate the earlier “version” of the trip in progress to the updated trip) consists of the deviceId and the trip's stop date. Most of the time, a trip which is in progress will have its stop date continuously updated until the trip has actually ceased (ignition off). An old trip will be replaced with a new trip if: the trips' deviceId are the same AND the start dates are the same AND the stop dates are different AND the new trip's stop duration is Like trips, exception events are calculated data. As the system receives updated device data, that data is processed and evaluated against the Rules set up in the system. Exception events that are in progress will be updated by the system and will retain the same unique id. Exception events can be invalidated and dropped from the database when a manual process is triggered. Reprocessed exception events will have a new unique id. The HOS and DVIR related objects under the “Active data feeds” (DutyStatusLog, DVIRLog, AnnotationLog, ShipmentLog) are likely to be edited on a frequent basis. An example is a “DutyStatusLog” that was created (Add) at the beginning of the day with an “ON” duty status, and then edited (Set) to add the “verifyDateTime” at the end of the day. Each time one of these data records is manipulated, it will retain its original unique GUID “Id” but will receive an incremented “version”. This way you can match new feed records to existing data you obtained from an earlier feed request. Once you have a basic understanding of how the Data Feed works you can read more about the GetFeed method and it's parameters in the{\" \"} API Reference or try out the{\" \"} JavaScript and{\" \"} .NET {\" \"} data feed examples. Why do I have to poll data, can't you push it to me? A push-based approach would require Geotab to connect to another organization and this invariably means firewall traversal is required. To accomplish this, network administrators will need to be involved and will be required to maintain the process. This is very often a cumbersome process and sometimes disallowed due to security risks. Geotab wants to provide a{\" \"} zero configuration solution. The poll-based approach avoids these issues because all traffic is initiated from within your network, secured via SSL. No certificates need to be installed, no firewalls configured, and no other onerous security requirements are necessary. There are definitely advantages and disadvantages to both approaches. However, in our experience, we have found the polling based approach is scalable, solves practical network problems, requires zero configuration, and meets the needs of our customers.","link":"/myGeotab/guides/dataFeed","breadCrumb":["MYG","Guides","Data Feed"],"category":"guide"},{"id":29,"title":"Getting Started","headers":["Steps to get started","Plug in a Geotab GO device","Register a new database","What's next?"],"headerIds":["steps-to-get-started","plug-in-a-geotab-go-device","register-a-new-database","whats-next"],"content":"The Geotab API (Application Program Interface) is fully available to MyGeotab customers. Geotab provides helper libraries for C# and JavaScript; however, any language or application capable of making HTTP (HyperText Transfer Protocol) requests can access its full functionality. Only valid MyGeotab user credentials are required; special API keys or tokens are not necessary. Nonetheless, we recommend that the API be accessed with a dedicated user. Note: The examples and source code presented in the MyGeotab SDK (Software Development Kit) require a modern browser. We recommend using the latest versions of Chrome, Firefox, Internet Explorer or Safari.  Geotab Support Documentation To register, browse to{\" \"} https://my.geotab.com/registration.html You can now sign in to my.geotab.com and access your database. Spend some time working through this guide and familiarize yourself with the key components of the application Add your GO device serial number to this database so you can collect some GPS, Engine and other useful data Concepts— Be sure to read through this before building your application Using in JavaScript Using in .NET Using in Java Support Alert {\" \"} — Be sure to read through this before building your application API Reference— The reference documentation that explains what each API call does and documents the parameters and results for each call API Runner {\" \"} — An easy way to “play” with the API. Click on the “Runner” link from the API Reference. It is a tool that can be used to make method calls to a MyGeotab server and see what the results look like {\" \"} Note: Remember you are not in a sandbox — you are executing API commands against a real database. For example, removing a Device via the API will really delete that device from the database! JavaScript or .NET Code samples. The JavaScript sample are “live” and can be run against your database hosted on my.geotab.com. The .NET examples are downloadable and can be compiled and run against your MyGeotab server. For additional support{\" \"} use the SDK forums . A number of solutions have already been provided in the forums. They are monitored by Geotab staff and other users of the SDK.","link":"/myGeotab/guides/gettingStarted","breadCrumb":["MYG","Guides","Getting Started"],"category":"guide"},{"id":30,"title":"GO Device logging","headers":["Logging accurately","Technical Details"],"headerIds":["logging-accurately","technical-details"],"content":"GO devices use intelligent patented logging algorithms to decide when to record speed, position, and other engine information. The device is constantly monitoring various inputs, for example: second-by-second GPS data, hundreds of accelerometer readings per second, and engine diagnostic inputs. The device monitors the data and determines the appropriate time to store a value.   Various data loggers exist on the market today that use a simple time- or distance-based logging algorithm. These approaches, though simple, have significant drawbacks: Important high or low values for speed (or other metrics) could be missed. Positions during cornering are missed (producing inaccurate mileage or poor display on map). Increased data costs by logging redundant information (for example, recording data for a vehicle that is not moving or moving in a straight line at a constant speed). The main concept behind GO device logging is to produce an accurate representation of the original data by logging the essential points on a graph and discarding redundant points. We sometimes refer to this as curve-based logging. This is best illustrated by example:    In this graph, the actual trip is represented by the blue curve. The red dots represent a simple time-based sampling where a speed value is recorded at regularly spaced time intervals. Notice how some high points and low points are missed by this approach. Also notice that, even when the speed does not change, the time-based approach continues reading the same value. The green dots represent a more accurate record of the data by establishing the ideal way to reproduce the data with the fewest number of data points. This is the basic principle that underpins the intelligent logging of the GO device. Position and Speed The GO device monitors both position and speed at the same time, using the approach discussed above, to log the data. By doing so, the speed profile can be very accurately reproduced and the location of the device determined. This also means the trip will be logged properly around corners (yielding a very accurate mileage calculation). Engine Diagnostics The GO device also monitors key engine diagnostic values and applies the approach above to log these values (data such as RPM curve, fuel level and many other parameters) in an optimized manner that allows an accurate reproduction of events without the drawbacks associated with time- or distance-based logging. Note: The intelligent logging approach means the rate at which the data is logged will vary; we cannot specify a fixed logging rate such as “x times per hour” because the logging rate depends on the driving behaviour of the vehicle. The GO device will log as as many times as required to accurately represent the data being recorded while minimizing redundant data. The methodology used to determine the optimal time to log GPS points is a curve-based algorithm that utilizes the Ramer-Douglas-Peucker (RDP) algorithm. The purpose of the RDP algorithm is to create a simplified curve compared to the original data. This is done by removing trivial and redundant data points, and keeping only the relevant data points within the allowable error limit. The curve-based algorithm is used to determine which of the second-by-second GPS points need to be saved and transmitted to MyGeotab. The curve logging algorithm allows the GO device to keep only the points that are necessary in order to provide an accurate representation of the events logged. Accuracy is dictated by the predetermined allowable curve error values. When the algorithm runs on the set of data points, it starts with the first and last points in the data set and automatically marks these as to-be-saved. It then considers the points between the first and last points; the data points will be continually divided until a line segment within the allowable error limit is obtained; this point will then be marked as to-be-saved. The algorithm will then run again for any points between the first point and the new point as well as any points between the new point and the last point. The curve-based algorithm is run first on Latitude vs. Longitude and then on Speed vs. Time. The curve algorithm is run on speed values between the to-be-saved points predetermined by running the curve on position. Based on the curve reduction method and the chosen allowed error values, the requirement is that the data between two saved GPS points will be acceptably linear in both position and speed. GPS Logging The curve algorithm is run on the data in the following cases: The curve buffer becomes full. The actual position of the GO device differed excessively from the predicted position of the GO device. Another event triggered the running of the curve. Below is a list of parameters that utilize the curve algorithm for data logging. Engine Data Logging Curve Logging On Engine Data Where appropriate engine data is logged using the curve-based algorithm. The following is a list of the engine data now logged using the curve-based logic: Battery Temperature Brake Lining Remaining Brake Temperature Cab Interior Temperature Charge State Coolant Level Coolant Temperature Cruise High Speed Limit Engine Cooling Fan Speed Engine Oil Level Engine Oil Life Remaining Engine Oil Pressure Engine Oil Temperature Engine Speed Fuel Alcohol Composition Fuel Filter Life Remaining Fuel Level Maximum Rpad Speed Limit Outside Temperature Starter Brush Life Remaining Starter Current Tire Pressure Transmission Oil Level Transmission Oil Temperature Washer Fluid Level Vehicles will not necessarily return all of the above information; the list is based on all the supported engine protocols. Total Fuel Used “Total fuel used (since telematics device install)” is generic status data. No matter how fuel information is received from a particular vehicle, be it OBD2, J1708, J1939 or another diagnostic standard, a generic Total Fuel Used record will be saved after ignition off. An additional record, “Total fuel used while idling (since telematics device install)”, which is the fuel used while road speed is 0, is also saved on ignition off. “Total fuel used (since telematics device install)” (KnownId{\" \"} {/* TODO: Need to replace this with routing to KnownId page*/} DiagnosticDeviceTotalFuelId) and “Total fuel used while idling (since telematics device install)” DiagnosticDeviceTotalIdleFuelId are the diagnostics used to track fuel consumption. Seat Belt And Odometer Seat belt and odometer requests are proprietary on most passenger cars. It is Geotab's goal to support seat belt and odometer across all the major vehicle manufacturers. If you are unable to obtain seatbelt or odometer requests for your vehicle, please contact Geotab Support. You can query the percentage of seat belt, odometer and other engine based data is supported for different vehicle types via MyAdmin. Seat belt use is logged on status change: a value of 1 represents the seat belt unbuckled, while a value of 0 represents the seat belt buckled. Odometer is logged both on ignition on and ignition off and every hour. Engine Hours It is often important in fleet tracking to look at a vehicle's engine hours. While Geotab strives to support this data on as many vehicles as possible, it is sometimes not possible. As a workaround, Geotab provides two types of engine hours StatusData. It is important to distinguish between the two in order to utilize them appropriately. DiagnosticEngineHoursId: This is the engine hours provided by the ECU in the vehicle as read by the GoDevice. This is reported every hour and at ignition OFF. DiagnosticEngineHoursAdjustmentId: Records the GPS travel time for vehicles which do not report engine hours from their ECU. An engine hours record can also be manually added which will then report as total GPS travel time added to the manually entered value. When the manual engine hours entry is updated, the total GPS travel time used in the calculation is reset to zero before continuing to increment. Add{\"<\"}StatusData{\">\"} {\"<\"}DiagnosticEngineHoursAdjustmentId{\">\"} is used to add manual engine hours entries. Get{\"<\"}StatusData{\">\"} {\"<\"}DiagnosticEngineHoursAdjustmentId{\">\"} returns a calculated engine hours value based on GPS Travel time and the last reported engine hours value (either reported by the GoDevice or manually entered). Odometer It is often important in fleet management to track a vehicle's odometer. While Geotab strives to report data as frequently and on as many vehicles as possible, this is not always possible. As a workaround, Geotab provides three types of Odometer StatusData. It is important to distinguish between the three in order to utilize them appropriately. Odometer Status Data: DiagnosticOdometerAdjustmentId: This is calculated 2 ways based on whether the vehicle is reporting ECM Odometer or not. ECM Based Odometer: Calculated as the ECM odometer reading, plus the GPS distance recorded since ECM odometer was last reported. GPS Based Odometer: When no ECM odometer data is being recorded, Odometer Adjustment will be reported as the GPS odometer reading. Add{\"<\"}StatusData{\">\"} {\"<\"}DiagnosticOdometerAdjustmentId{\">\"} is used to add manual Odometer entries. Get{\"<\"}StatusData{\">\"} {\"<\"}DiagnosticOdometerAdjustmentId{\">\"} Is used as shown below: If an individual device Id is provided, this returns a calculated Odometer value based on the last known DiagnosticOdometerId or Diagnostic OdometerAdjustmentId + GPS Distance. If no device Id is specified, this returns all DiagnosticOdometerAdjustmentId records in the date range (if provided). DiagnosticRawOdometerId: This is the raw value of odometer as reported by the vehicles ECU. When possible, this is reported every Ignition ON, Ignition OFF, and every 2km in between. DiagnosticOdometerId: This is a corrected odometer reading based on the raw odometer value and the odometer manipulators. It is calculated as Odometer = [Raw Odometer * Odometer Factor] + Odometer Offset. Odometer Manipulators: Note: If applied, these manipulators will only affect future DiagnosticOdometerId records. They cannot correct existing records. Odometer Factor: Used as a multiplier to correct raw odometer. As default this is set to 1 and can only be changed via the API. This variable is rarely used. Odometer Offset: This value gets added to Raw Odometer before it is saved as a DiagnosticOdometerId record. It can be set directly via the API, or MyGeotab can calculate it automatically if an odometer value is entered on the Vehicle Edit page.","link":"/myGeotab/guides/goDeviceLogging","breadCrumb":["MYG","Guides","GO Device logging"],"category":"guide"},{"id":31,"title":"Media File - Beta","headers":["Object Model","Supported File Types","Security","API","Limits"],"headerIds":["object-model","supported-file-types","security","api","limits"],"content":"The media file API provides a persistent storage mechanism for binary media files and meta data. There are two components of a media file: The MediaFile entity which describes the binary media. This is similar to other generic entity types in the API and follows the generic entity method pattern (Add, Get, Set,{\" \"} Remove, GetFeed). The binary data of the media file. This the the actual file, for example a jpeg image. The binary files are interacted with using bespoke methods{\" \"} DownloadMediaFile and UploadMediaFile. MediaFile Property Type Description id string The unique identifier. version string Entity version. Read-only. name* string File name. Must have extension. Max 128 characters. All lower case. Required. Unique. mediaType string Describes the type of media. Read- only. Video, Image status string Describes the processing status of the file. Read-only. NoFile, Processing,{\" \"} Ready solutionId* string The unique identifier of the solution. Required. fromDate ISO UTC date time string The from date of the media. Default[UTC now] toDate ISO UTC date time string The from date of the media. Default[fromDate] device object[Device] The device associated to the media. driver object[Driver] The driver associated to the media. metaData object Free JSON field. Max 10,000 character JSON limit. Property names cannot start with \"geotab\". thumbnails array[MediaFile] The list of other media files serving as the thumbnails for this media file. Max 5 thumbnails. tags array[Tag] The list of tags used to classify the media. Max 10 tags. *Required when adding Solution Id A SolutionId must be created before the Storage API methods can be used within your solution. This encoded GUID is used to register and identify which solution some data is associated with. SolutionId is a mandatory parameter when calling MediaFile Add, optionally with Get. This allows each solutions' data to be isolated from the data used by other solutions. This allows multiple solutions to each have their own collection of MediaFile objects in the same database without the collections mixing. To generate your own SolutionId, please use following{\" \"} example . SolutionId and AddInId are interchangeable. If you have an add-in or integration which uses both AddInData and MediaFile you are encouraged to use a single SolutionId/AddInId. MediaFileSearch Property Type Description Id object[Id] Search for a single MediaFile by Id. deviceSearch object[DeviceSearch] Search for MediaFile records relating to this DeviceSearch Id. Available DeviceSearch options are: Id and{\" \"} Groups. driverSearch object[DriverSearch] Search for MediaFile records relating to this DriverSearch Id. Available DeviceSearch options are: Id. fromDate ISO UTC date time string Search for MediaFile records that were logged at this date or after. toDate ISO UTC date time string Search for MediaFile records that were logged at this date or before. Tag Property Type Description Id string GUID backed unique identifier. Version string Entity version. Read-only. Name* string File name. Must have extension. Max 1024 characters. All lower case. Required. Unique. *Required when adding Thumbnails A media file can reference a list of up to 5 other media files which serve as the thumbnail for it via the MediaFile.Thumbnails collection. For example a video media file can reference a jpeg file which serves as it's thumbnail. Tags Generic Tags can be linked to media files. Tags can be used to categorizing \"like\" media. Searching for media by Tag is not yet implemented. Type Extension Content-Type Video mp4 video/mp4 Image jpeg image/jpeg Image png image/png Image gif image/gif Image webp image/webp Credentials Credentials are required for all MediaFile and Tag related requests. Security Clearances There are two security clearances applying to media files. By default only administrator clearance will be able to modify files, while clearances derived from view only will be able to view files. SecurityIdentifier: ViewMedia, ManageMedia. Scope Scope is evaluated by the scope of the requesting user to the linked entity(s) (Device and/or Driver ) of the media file. A media file with no linked entity will be visible to any user in the database regardless of scope (requiring ViewMedia{\" \"} clearance). Method Parameters Returns Notes Add[MediaFile] entity:object[MediaFile] string[Id] File is added via separate API. Status = NoFile. Set[MediaFile] entity:object[MediaFile] void Updates MediaFile entity, not file. Remove[MediaFile] entity:object[MediaFile] void Removes file and MediaFile entity. Get[MediaFile] resultsLimit:long,search:object[MediaFileSearch] array[MediaFile] Gets only MediaFile entity. GetFeed[MediaFile] resultsLimit:long,fromVersion:long object[FeedResult] Gets a feed of only media file entity. DownloadMediaFile mediaFile:object[MediaFile] stream[File] Content type determined by file extension. Range headers supported. UploadMediaFile mediaFile:object[MediaFIle],stream void Media file entity must already be added. Content-Type “multipart/form-data”. Not “application/json” Add Adding a media file requires two steps: First, adding the MediaFile entity using the generic Add method. The result of adding is the unique identifier (Id) of the added MediaFile. When the media file has been added but there is no binary uploaded the MediaFile.Status will be NoFile. Second, uploading the MediaFile binary using the UploadMediaFile API specifying the{\" \"} MediaFile it relates to by Id in the JSON-RPC request. After a file is uploaded the{\" \"} MediaFile.Status will transition to Processing then Ready . Processing state is available but currently unused. Get Like Add, Get requires two steps: First, search for MediaFile using MediaFileSearch to provide search arguments. Second, download the binary using the DownloadMediaFile method providing the Id of the media file. Result Limit A maximum of 10,000 MediaFile objects will be returned from Get:MediaFile and/or GetFeed:MediaFile requests. Rate Limit :MediaFile 1000 requests per minute, per user GetFeed:MediaFile, Add:MediaFile, Set:MediaFile, Remove:MediaFile 60 requests per minute, per user DownloadMediaFile 240 file download requests per minute, per user UploadMediaFile 60 file upload requests per minute, per user 10,000 file uploads per day, per user Size Limit Image files (.png, .jpg, .gif, .webp) are limited to 10MB. Video files (.mp4) are limited to 50MB. In MyGeotab v6.0 file size limits were increased. Images from 2MB to 10MB and of videos from 10MB to 50MB.","link":"/myGeotab/guides/mgMediaFiles","breadCrumb":["MYG","Guides","Media File - Beta"],"category":"guide"},{"id":32,"title":"Using MyGeotab URLs","headers":["Link to a page","Standalone pages","Passing parameters to a page","List of pages and accepted parameters","Credentials","Getting the session id using the API","Security using the session id","Embedding MyGeotab inside an IFrame"],"headerIds":["link-to-page","standalone-pages","passing-parameters","list-of-pages","credentials","custom-devices","security-session-id","embedding-myg-in-iframe"],"content":"This guide explains how to format a URL (Uniform Resource Locator) to obtain access to a specific page/feature in MyGeotab. This can be used to link to MyGeotab from an Internet application, sending an email notification, third-party applications and other customized functions. To create a link to a page, the following URL structure is used: {`https:////#,`} The portions of the examples noted with {`<`} and {`>`} (e.g. {``}) indicate where the user will enter information specific to their requirements. Item Description serverName The name of the server the database is on. For example, my.geotab.com databaseName The name of the database. This is typically the company name used during registration. If there are spaces in the name, they are replaced with underscore characters (_) page The MyGeotab web application page name parameters Additional arguments to apply to the request. For example, {`currentSortMode:deviceName`} will sort the devices on the device list page by name. Note: each additional parameter is separated by a comma Example Browse to your database using this URL format {`https:////#devices`} Note: If you are not yet logged in, you will be prompted for your credentials. Standalone pages are used to get a my.geotab.com page without the header and side menu. This is useful when specific functionality is required, for example adding a new vehicle to the system. To create a link to a page, the following URL structure is used: {`https:////geotab/checkmate/ui/,`} If you are not yet logged in, you will be prompted for your credentials. Parameters are added at the end of the URL and each is separated by a comma. They work the same for both the normal and standalone page types. It is also important to note when no parameters are requested, the page will load with the default settings. The parameter and its value are always separated by a colon (\":\"). Example These links will navigate to the map pages showing the live position of a device with id `b21`, and with the group `b1234` highlighted. {`https:////#map,highlightGroup:b1234,liveVehicleIds:!(b21)`}     {`https:////geotab/checkmate/ui/map.html#highlightGroup:b1234,liveVehicleIds:!(b21)`} Page: Devices The list of devices in the system. Default: list of all devices sorted by name. Parameter Description Values sortMode Sorts the list of devices in a specific way byType — sort by devicebyName — sort by name groupSelection Divides the device list into subheadings, which are children groups of the selected parent {``} — parent group name that the device belongs to Example {`https:////#devices,groupSelection:someGroup`}     {`https:////#devices,sortMode:byName`}     {`https:////#devices,sortMode:byType`} Page: Device Edit an individual device. Default: no default page, you must have an id parameter. Parameter Description Values id Goes to a device's edit page {``} Example {`https:////#device,id:`} Page: DeviceSerialNo Add a new device. Default: add new device page. No parameters required. Example {`https:////#deviceSerialNo`} Page: Map The map viewer page. Default: shows the map with your default map settings. Parameter Description Values liveVehicleIds Used to show the live location of a device by its id {``} planRoutes Show a route on the map {``} highlightGroup Will highlight all devices in that group on the map display {``} Example {`https:////#map,liveVehicleIds:!(b12,b65,b3)`}     {`https:////#map,planRoutes:!(b2,b3,b1)`} Page: TripsHistory The detailed vehicle trip history page. Default: will request you to select settings from the drop down menus. You can define the settings using the parameters. Parameter Description Values dateRange Sets the range of dates for the trips {`(interval:)`}— values: Today,Yesterday,This Week, Last Week,This Month,Last Month, {`(interval:custom,startDate: ,endDate:)`} entityType Show activity for drivers or devices Device — list device activity, Driver — list driver activity selectedEntities Vehicles to list information for !({``}) or {`all`} Example {`https:////#tripsHistory,dateRange:(interval:),entityType:Device,selectedEntities:!()`}     {`https:////#tripsHistory,dateRange:(interval:') ,entityType:`} Page: Zones The zone list page. Default: list of all zones by name. Parameter Description Values sortOrder The list order {`1`} — list alphabetically, {`-1`} — Invert the list sortMode Choose how the sort the list {`zoneName`}— sorts by name, {`zoneType`}— sorts by type, {`zoneGroup`}— sorts by group Example {`https:////#zones,sortOrder:-1,sortMode:zoneGroup`}     {`https:////#zones,sortMode:zoneName`}     {`https:////#zones,sortMode:zoneType`} Page: Zone The zone edit page. Default: No default available. Needs parameters. Parameter Description Values id Goes to edit page for the selected zone {``} Example {`https:////#zone,id:`} Page: Notifications The notification list page. Default: full list of user notifications listed in order of most recent time. Parameter Description Values sortOrder The list order {`1`} — list the most recent time first {`-1`} — invert the list sortMode Selects the sort mode {`machineName`} — sorts by machine showDismissed:!t Shows all dismissed messages None Example {`https:////#notifications,sortOrder:-1,sortMode:machineSort,showDismissed:!t`} Page: Users The user list page. Default: list of all current users. Parameter Description Values sortOrder The list order {`1`} — list the most recent time first {`-1`} — invert the list Example {`https:////#users,sortOrder:-1`} Page: User The user edit page. Default: goes to add a new user page. Parameter Description Values id The user’s id. Will link to the edit page for that user {``} Example {`https:////#user,id:`} Page: Options The user preferences page. Default: edit user preferences page, no parameters required. Example {`https:////#options`} Links that include username and database It is possible to insert username and database credentials into a URL. Note that the user will be required to be logged in to utilize these types of links. MyGeotab Page Example {`https:////?('userName':'','database':)#`} Standalone Page Example {`https:////geotab/checkmate/ui/#credentials:(database:,userName:'')`} We do not support passing the password credential through the URL because it is unsafe. Authentication  Trusted domains only Due to the risk of ClickJacking, MyGeotab will instruct the browser to prevent MyGeotab from loading inside a frame that came from an arbitrary domain. Customers wishing to utilize this feature must meet the minimum security requirements. Please contact your reseller for more details. Info for resellers If your customer wish to embed MyGeotab pages inside an iFrame, you need to request it through MyAdmin. Please, create a ticket specifying the URL of the MyGeotab database, business justification and URL on which it will be integrated. Geotab's support team will initiate the process to get the requested domains approved. This process can take some time as the domains need to be reviewed by Geotab's security team before being added to the approved list by the development team.","link":"/myGeotab/guides/myGeotabUrls","breadCrumb":["MYG","Guides","Using MyGeotab URLs"],"category":"guide"},{"id":33,"title":"Connect to Power BI","headers":["Getting started"],"headerIds":["getting-started"],"content":"Microsoft Power BI provides data visualization and analytics tools used to create interactive dashboards and reports. Users can connect Power BI to the MyGeotab SDK to use real-time Geotab data and gain meaningful insights into their business. To connect Power BI to the MyGeotab SDK, please refer to{\" \"} Power BI Geotab Connection with Adapter To connect Power BI to the MyGeotab SDK using the Power Query M formula language, please refer to{\" \"} Geotab API integration for Power BI","link":"/myGeotab/guides/powerBI","breadCrumb":["MYG","Guides","Power BI"],"category":"guide"},{"id":34,"title":"Using Custom Telematics Devices","headers":["Getting Started","Device Management","Custom Telematics Device Serial Numbers","Sending Data"],"headerIds":["getting-started","device-management","automating-tasks","sending-data"],"content":"Geotab provides the ability to integrate non-GO device telematics devices into the platform. These devices are defined as any telematics device that is not manufactured or sold by Geotab but is used in conjunction with Geotab's fleet management application. Custom Telematics Devices and MyGeotab      Authenticate {/* TODO: Need to replace this with routing to Authenticate page*/} (an example is given in{\" \"} What is the Authenticate MyAdmin API method) ProvisionDeviceToAccount {/* TODO: Need to replace this with routing to ProvisionDeviceToAccount page*/} (an example is given in{\" \"} What are the ProvisionDevice/ProvisionDeviceToAccount MyAdmin API method ) ProvisionDevice {/* TODO: Need to replace this with routing to ProvisionDevice_1 page*/} (an example is given in{\" \"} What are the ProvisionDevice/ProvisionDeviceToAccount MyAdmin API method ) UpdateDeviceContracts {\" \"} {/* TODO: Need to replace this with routing to UpdateDeviceContracts page*/} TerminateDeviceBilling {\" \"} {/* TODO: Need to replace this with routing to TerminateDeviceBilling page*/} Product ID CustomDevice CustomVehicleDevice Data Intake Gateway","link":"/myGeotab/guides/usingCustomTelematicsDevices","breadCrumb":["MYG","Guides","Using Custom Telematics Devices"],"category":"guide"},{"id":35,"title":"Using GO Devices In Your Software","headers":["Overview","Device hierarchy","API to add vehicles","API to extract data"],"headerIds":["overview","device-hierarchy","api-add-vehicles","api-extract-data"],"content":"Geotab offers an option where the GO device hardware can be used without using the MyGeotab fleet management software. The rich telematics data that is captured by Geotab's hardware can be utilized in a customized software solution. This document covers the necessary steps to set up a customized solution. Note that the same API is used to retrieve the data from Geotab's hosting solution and is identical to the regular MyGeotab configuration.     Geotab has a robust API that allows third-party developers to create their own applications that use data from Geotab hardware. A partner using Geotab hardware with their own software must use the API to add their Geotab devices to the database, as discussed above. Adding a single device C# API (\"Add\", typeof (Device), new {entity = device});`} /> JavaScript API { newDevice.id = result;}, err => { alert(err);});`} /> HTTP GET request The above code samples show a sample call to add a single device to a database using the C# API, JavaScript API and an HTTP request. Please refer to the API documentation for more information. Adding multiple devices Both the C# and JavaScript examples contain a comprehensive demonstration of how to add multiple devices to a database. This can be used as a starting point for additional development. Enable in-vehicle features To enable or disable vehicle features, the appropriate properties of the Device/GoDevice object must be set. For example, to enable beeping before adding the device to MyGeotab, the C# example above would be changed to: (\"Add\", typeof (Device), new {entity = device});`} /> Please note that GO devices use a byte value to track parameter changes. If an in-vehicle feature like a speeding alert was enabled, increment the parameterVersion property by 1. If a device has already been added to MyGeotab it can have features enabled or disabled by first obtaining the device parameters, changing the desired properties, and then calling the 'Set' method instead of 'Add'. The API documentation has a number of examples on how to Get, change, and Set a device. ","link":"/myGeotab/guides/usingGoDevices","breadCrumb":["MYG","Guides","Using GO Devices"],"category":"guide"},{"id":36,"title":"Using The Data Connector","headers":["Overview","Endpoint","Table Schema"],"headerIds":["overview","endpoint","table-schema"],"content":"This guide describes the general flow for ETL users to consume{\" \"} Geotab Data Connector . OData Connector implemented OData protocol V4, or you may consider it just as a RESTful service. Before making your first call, it is strongly recommended to skip the general entry and make the call directly to{\" \"} OData Connector. If you are not sure what the URL to call is, please contact the support team. General Entry Feel free to skip this section if you plan to make calls directly to OData Connector. If you have to make a call to the general entry (https://data-connector.geotab.com), make sure you are ready to handle the 302 response and make another call to the returned URL. Sample general entry response: GET /odata/v4/svc/VehicleKpi_Daily?%24search=this_year&%24top=1 HTTP/1.1> Host: data-connector.geotab.com> User-Agent: insomnia/2022.6.0> Authorization: Basic {credential_base64_encoded}> Accept: */* * TLSv1.3 (IN), TLS handshake, Newsession Ticket (4):* Mark bundle as not supporting multiuse < HTTP/1.1 302 < Location: https://odata-connector-1.geotab.com/odata/v4/svc/VehicleKpi_Daily?%24search=this_year&%24top=1< Content-Language: en-US< Content-Length: 0< Date: Tue, 07 Feb 2023 16:32:57 GMT`} /> If you are making calls to the general entry with postman or insomnia, the 400 error code is expected since postman or insomnia redirect requests WITHOUT the auth header. OData Connector Given the right url, you may test the service connection by making calls to the service root: https://odata-connector-1.geotab.com/odata/v4/svc/ No credential is required for this service root. Curl Sample request: --url https://odata-connector-1.geotab.com/odata/v4/svc/`} /> Sample response: Make sure to attach one of the above table names after the service root and attach your base64 encoded credentials in the following format:{\" \"} {\"/:\"} e.g. abccompany/geotab-data-connector@geotab.com:password Sample request: --url https://odata-connector-1.geotab.com/odata/v4/svc/VehicleKpi_Daily \\\\> --header 'Authorization: Basic {credential_base64_encoded}'`} /> Sample response: You can also specify a date range as the query option, for more information about the query option, see{\" \"} here . Python The following example shows how to consume OData Connector with Python, feel free to use any programming language, library or framework. Dependencies: Setup credential and query options: Get data from latest vehicle metadata and visualization: Get data from vehicle KPI table with date range: Please refer to{\" \"} Geotab Data Connector - Data Schema and Dictionary {\" \"} for current available data and details about table schema.","link":"/myGeotab/guides/usingTheDataConnector","breadCrumb":["MYG","Guides","Using The Geotab Data Connector"],"category":"guide"},{"id":37,"title":"Introduction","headers":["Accessing the device's data","Importing, exporting and synchronizing","Automating tasks","Working with Add-Ins","Integrating with MyGeotab","Integrating custom telematics tracking devices into MyGeotab","Technical software toolkit"],"headerIds":["device-data","import-export","automating-tasks","working-with-addins","integrating-with-myg","custom-devices","software-toolkit"],"content":"The MyGeotab SDK (Software Development Kit) is a powerful set of tools for automating tasks and working with the data in MyGeotab. Within these documents you will find information on how to develop JavaScript and C# applications, build and integrate Add-Ins and use MyGeotab with third-party systems. Various working examples are included in this SDK for use as a starting point with your own code e.g.: Display vehicle trips on third-party map (for example{\" \"} Leaflet {\" \"} or{\" \"} ArcGIS API for JavaScript ) Integrate an embedded MyGeotab frame in your web application (real time map, vehicle listing and more) Create your own web interface to import and export Geotab data Keep up to date with Geotab's technical updates by subscribing to our{\" \"} technical bulletins . The Geotab Data Feed API is a scalable, efficient and secure method to access all the device's data. There are many different types of data that can be requested from the API. For example: LogRecords (GPS and speed) StatusData (readings of vehicle measurements e.g. oil temperature or accelerometer) FaultData (fault codes reported by the engine) See the full list of supported data feed types here {/*TODO: is this right?*/} here for .Net here for Java Import your customer list from a{\" \"} CRM {\" \"} (Customer Relationship Management) system Download your vehicle maintenance records into a maintenance system (DVIR) Keep your routes up to date based on the day's deliveries Synchronize your vehicle groups based on the vehicle's role in the company Track Hours of Service (HOS) for regulations compliance .Net examples  Java examples When a new pick-up arrives, automate the dispatching by sending a text message to the vehicle's Garmin through an attached GO device Synchronize your customer's location with the closest vehicle when a new work order is created Ready availability of Add-Ins to instantly integrate into your MyGeotab and Geotab Drive. Visit the{\" \"} Geotab Marketplace {\" \"} and the Developing Add-Ins SDK page to see the available Add-Ins Versatility to create your own Add-In to customize a page or button to suit your needs You can integrate an embedded version of MyGeotab into your own web application. This is perfect for providing a website to your customers with insight as to where their deliveries are and when they will arrive. You have control of which features appear on the embedded MyGeotab to create a seamless integration between your software and ours. Receiving an authentication token from MyGeotab for a valid username/password Accepting the end user agreement on behalf of the user (this has legal implications) Updating a user's password Adding and removing a user  Custom telematics devices can have their data added into the MyGeotab database. The Geotab API is used to provision and upload the devices data. Additionally, data from these devices can be used in conjunction with data collected by Geotab GO devices. Contact Geotab support to have your custom telematics device added (each device type will receive a unique prefix code) and contact your reseller to handle billing. Note: There may be differences in how devices from custom telematics manufacturers record the data; frequency of data collection and accuracy of the device record may vary. The rich information contained in the MyGeotab reports may not be fully available. Testing of these tracking device will be required to properly integrate the data into MyGeotab. The toolkit provides helpful integration resources and context which are in addition to the existing documentation and make it easier for partners to get up and running. Please refer to{\" \"} Geotab Integrations: Software Technical Toolkit {\" \"} for further details.","link":"/myGeotab/introduction","breadCrumb":["MYG","Introduction"],"category":"guide"},{"id":38,"title":"Release Notes","headers":["11.0","10.0","9.0","8.0","7.0","6.0","5.7.2104","5.7.2103","5.7.2102","5.7.2101","5.7.2004","5.7.2003","5.7.2002","5.7.2001","5.7.1904","5.7.1903","5.7.1902","5.7.1901","5.7.1804.1","5.7.1804","5.7.1803","5.7.1802","5.7.1801","5.7.1712","5.7.1711","5.7.1709","5.7.1707","5.7.1706","5.7.1705","5.7.1704","5.7.1703","5.7.1702","5.7.1701","5.7.1612","5.7.1611","5.7.1610","5.7.1609","5.7.1608","5.7.1607","5.7.1606","5.7.1605","5.7.1604","5.7.1602","5.7.1601","5.7.1512","5.7.1511","5.7.1509","5.7.1508","5.7.1505","5.7.1504","5.7.1502"],"headerIds":["11.0","10.0","9.0","8.0","7.0","6.0","2104","2103","2102","2101","2004","2003","2002","2001","1904","1903","1902","1901","1804Dot1","1804","1803","1802","1801","1712","1711","1709","1707","1706","1705","1704","1703","1702","1701","1612","1611","1610","1609","1608","1607","1606","1605","1604","1602","1601","1512","1511","1509","1508","1505","1504","1502"],"content":"Get And GetFeed For FuelUsed And FillUp Get and GetFeed for FuelUsed is now available. The query will return fuel consumption for each MyGeotab trip — corresponding to each trip's ending date and time. Get and GetFeed for FillUp is now available. The query will return fill-ups detected by MyGeotab or matching fuel transaction records, if available. Each fill-up will also be matched to a MyGeotab trip — corresponding to the trip's ending date and time. New Transaction Provider Car IQ is now available as a fuel card provider. Added New MessageContentTypes ColdChainSetpointSetContent and ColdChainFaultClearContent have been added. New ConditionType Property isValueThreshold has been added. New MediaFileSearch Options MediaFile entries can now be searched by the solutionId property. MediaFile entries can now be searched by using the TagSearch object. New TextMessageSearch Options mimeTypes and channelNumbers search options have been added New Property For DutyStatusAvailabilityPermalink A new property has been added for the DutyStatusAvailability object that details the duration of the driving break. Note: This new property is available for USA rulesets only. Note: This new property is available for USA rulesets only. Added TachographDataFile Object Added the TachographDataFile object that represents a tachograph data file. New CaptchaAnswer Properties Added the greCaptchaToken and greCaptchaAction properties when using google enterprise recaptcha. PropertySelector Fixes Fixed the property selector not working without the search object for the following entities: Trip User Group Add-In Configuration Updates Via SystemSettings Add-in updates via the customerPages are no longer supported. Nuget Package A fix has been issued for the nuget package where the name property for stock groups was not returned. SDK Updates API Runner (SDK) The following improvements are added: Added loading spinner to indicate to users that the login request is being processed. Added a keypress handler for the login form that allows the cursor to move to the next field, and added functionality for an enter key press event to submit the form when inputting information in the last field. Fixed an error message occurring in the main .js:scrollSidebar. Fixed an issue that caused multiple click handlers to be added to the login button. SecurityIdentifier Added the ImpersonateGpsTextMessage security identifier. When enabled, the security identifier does not validate the identity of the sender. Added the ResetPassword security identifier that allows a user to reset another user's passwords. Mg-Api-Js We've corrected the following errors: Fixed UnhandledRejection exceptions. Improved exception messages to include the type from the JSON-RPC error. Fixed InvalidUserException retry authentication. Updated CallBackError to be invoked as the last operation in the promise field. GetFeed{\"<\"}FuelTaxDetail{\">\"} Fixed issues with results sorting that led to missing results. Nuget Enabled brotli compression in Nuget package API.cs requests. Many ObjectModel classes are marked as \"sealed”. Marking a class as \"sealed” prevents tampering of important classes that can compromise security or impact performance. !IMPORTANT: Updating your application to version 10.0 may not work if an ObjectModel class is inherited. TextMessage Added PropertySelector (Beta) support for the TextMessage type. IoxAddOn Added PropertySelector (Beta) support for the IoxAddOn type. IoxAddOnStatus Added PropertySelector (Beta) support for the IoxAddOnStatus type. DriverChange Updated the description of DriverChange DateTime to notify users that the DateTime must not be in the future when adding a DriverChange through API. DriverWhiteListContent DriverWhiteListContent is replaced by DriverAuthListContent Prior to the 10.0 release, DriverWhiteListContent and DriverAuthListContent were both available to allow users to adjust to the transition. Condition And ConditionType Added the Group exception rule condition. This separates conditions in a single rule when different groups require different conditions. Geotab Developers Added a section to the{\" \"} Developing Add-ins {\" \"} page suggesting to use the generator-addin repository. SDK Samples Added JavaScript samples to refresh the user interface. SDK Add-In Samples Added Add-In samples for the AddInData API to the{\" \"} Geotab/sdk-addin-samples {\" \"} Github repository. Custom Security Identifiers For Add-Ins Custom security identifiers for MyGeotab Add-ins are now available. Identifiers can be defined in the configuration.json file of Add-ins, which will then add them to the list of permissions available when editing clearances. These definitions can support multiple languages. Administrator clearance will remain non-editable and have all custom clearances enabled by default. All other default/system clearance levels only allow editing of custom security identifiers, while keeping the system defined default identifiers non-editable. * NOTE: By default, once the enableViewSecurityId property in the configuration.json for an Add-in is set to True, a View \"Add-in name” add-in identifier is created that must be enabled for users to be able to view the Add-in. More granular control needs to be set within the Add-in code for any custom identifiers added to the configuration.json. IP Rate LimitsPermalink Added new rate limits for API requests for endpoints that do not require authentication. See{\" \"} this announcement {\" \"} for more information. Updates DatabaseExists Removed the DatabaseExists API that was originally used for database registration purposes. If the database name exists, CreateDatabase{\" \"} throws a RegistrationException. RouteSearch Removed the RouteSearchGroups property and replaced it with the ServiceGroups property. PropertySelector Added the optional PropertySelector parameter that is used with the Get and{\" \"} GetFeed methods to include or exclude specific properties for entity types requested. Detailed information can be found on the{\" \"} Geotab Developers {\" \"} site. DriverWhiteListContent / DriverAuthListContent Removed the DriverWhiteListContent object and replaced it with the DriverAuthListContent object. Group Improved system group objects to be returned with an English Name field. DeviceShareStatus Added RequestPending as an acceptable value of DeviceShareStatus. This value indicates when an outgoing device share request has been created by a user on the source database, and is waiting for confirmation it has been created successfully. SecurityIdentifier Added the following security identifiers: ResetPassword EditStockRules ContinuousConnectClearance ViewShipments ManageShipments ManageTachographInspection ViewTachographInspection ManageTachographCompanyCards ViewTachographCompanyCards TachographDownloadAndUploadFiles ViewTachographRemoteDownloadData ViewTachographDrivingTimeData ViewTachographInfringementData SendColdChainCommand Special Note About Trailer And Device We have migrated all Trailers to be Devices in all customer databases. As a result, you will see the following changes: GroupAssetTypeId, GroupTrailerId, and GroupVehicleId{\" \"} built-in groups are added under CompanyGroup. A GroupVehicleId built-in group is added to all Devices. Calling Add Trailer and Add Device with the GroupTrailerId built-in group now performs the same action. Both create a Device in the system that is in the GroupTrailerId group. Trailer APIs have been marked as obsolete but will continue to be supported (for now). Calling Get Device now returns devices that are in the xGroupTrailerId built-in group as part of the response. If the Customer wants only vehicles to be returned when calling Get Device, and not trailers, they should specify groupSearch:{\" \"} {'{\"id”:”GroupVehicleId”}'}. Calling Add Trailer with the GroupTrailerId or GroupVehicleId built-in groups will throw an error. ! IMPORTANT: Calling Set Device and removing the GroupVehicleId or GroupTrailerId{\" \"} built-in groups will prevent the vehicle or trailer from being shown on the relevant selection screens on the Drive App. Calling Set Device and switching the group from{\" \"} GroupTrailerId built-in group to GroupVehicleId built-in group or vice versa will not be allowed. This is a temporary restriction in the 8.0 release, and we intend to remove this check in a future release. See{\" \"} this slide deck {\" \"} to understand more about why this change was made, and how this may impact you. Special Note About EV Powertrain Groups This new built-in group structure automatically classifies electric vehicles (EV) based on their unique powertrain types: Plug-in Hybrid (PHEV), Battery Electric Vehicle (BEV), or Fuel Cell Electric Vehicle (FCEV).{\" \"} See MyGeotab Version 8.0 SDK Announcement - New built-in groups for EV powertrain identification for additional details. Updates AddInData Removed the obsolete alpha Data property. Audit Fix: The Audit API is inconsistent in what it returns. Most ways of getting audit (Get - from ID or search, GetFeed) do not return a populated User property. However, the GetAll (Get with no search) returns records with the user fully populated. This is not consistent with the API philosophy. A nested entity will only have its ID populated. User will now never be returned in the Audit object (only userName). Device Fix: Searching for CustomDevice type could also return CustomVehicleDevice devices in some cases. It has been fixed to return only devices of CustomDevice type. DutyStatusAvailability Added IsAdverseDrivingApplied and IsRailroadExemptionAvailable. DutyStatusLogType Added RailroadExemption. DVIRLog RepairStatus / RepairUser / RepairDate cannot be changed once set. A repair cannot be completed without the RepairUser, RepairDate, and{\" \"} RepairStatus. GroupRelations Improved description of GroupRelations in{\" \"} API Reference . Group Added the following system groups: GroupAssetTypeId GroupVehicleId GroupTrailerId PowertrainAndFuelTypeId GroupElectricHybridPluginId GroupBatteryElectricVehicleId GroupPluginHybridElectricVehicleId GroupFuelCellElectricVehicleId GroupInternalCombustionEngineId GroupBiodieselId GroupCompressedNaturalGasId GroupDieselId GroupEthanolId GroupGasolinePetrolId GroupLiquifiedNaturalGasId GroupPropaneLiquifiedPetroleumGasId GroupManuallyClassifiedPowertrainId HosRuleSet Added America7DayRailroad and America8DayRailroad. KnownIoxAddOnTypes Added NFC, Bluetooth, and UReader add-on types. Nuget Package Nuget package uses HttpClient.VersionPolicy RequestVersionOrHigher. Allowing client to use HTTP/2 and above. HttpClient default is HTTP/1.1. SecurityIdentifier Added EVBatteryHealthReport. Trailer Marked obsolete, but can still be used for this release. TrailerAttachment Marked obsolete, but can still be used for this release. User Added IsAdverseDrivingEnabled. Zone When adding and setting zones, points are validated to be latitude and longitude bounds. Valid Latitude -90 to 90. Valid Longitude -180 to 180. ZoneSearch Viewport property which was made obsolete in v5.7.2004 will be removed and no longer supported in v9.0. Please switch your application to use searchArea and BoundingBox objects as soon as possible. Security Updates In an effort to increase application and API security, exception types that expose database provider or platform-specific error messages have been removed and are now represented as one of the exceptions below. Most exceptions and error messages have not changed. Exception types that were previously documented remain unchanged; however, some new exception types include non-specific, generalized messages to avoid sharing information about the underlying infrastructure. The following common exceptions are still supported. ArgumentException ArgumentNullException ArgumentOutOfRangeException CaptchaException DatabaseMaintenanceException DbUnavailableException DuplicateException ExpiredPasswordException GenericException new GroupRelationViolatedException InvalidApiOperationException new (formerly InvalidOperationException) InvalidCastException InvalidMyAdminUserException InvalidPermissionsException InvalidUserException JsonSerializerException MissingMemberException MissingMethodException PasswordPolicyViolationException Password Policies User passwords will now be validated against a list of common passwords. If it is a common password, a PasswordPolicyViolationException is returned. User passwords will now be validated against username, first name, and last name. If it contains a username, first name, last name, a{\" \"} PasswordPolicyViolationException is returned. This method can no longer be disabled. User Policies The maximum number of active sessions for a user on a single database has been lowered to 100. Active sessions are a rolling list sorted by date and time. When the number of active sessions reaches 100, a new session is added, and the oldest session is removed from the list (expired). General Updates Added ModifyGroupFilter and ViewGroupFilter to{\" \"} SecurityIdentifier. Added CaliforniaPropertyShortHaulWithRest, CanadaOil,{\" \"} CanadaNorthOf60Oil, CanadaOilTeam, and{\" \"} CanadaNorthOf60OilTeam properties. Added support for fuel transaction provider, WexCanada. Minor bug fixes and package updates. Coming Soon The AddInData legacy property Data will be removed in the coming 9.0 release. Please update your integration requests to use the Details property instead JSONP support will be removed from the API in the coming 8.0 release, and should no longer be used. Changed the software version naming convention to use three parts (e.g. 6.0.0) from four parts (e.g. 5.7.2104.0). To learn more,{\" \"} click here . Added WifiHotspot capability, with Interface to configure hotspot settings on telematics devices. The MyAdmin SDK is now available from the SDK. All pages are in the process of being converted to Markdown format. HOS Added CanadaNorthOf60CycleOneTeam and CanadaNorthOf60CycleTwoTeam to the rulesets. Limits Increased media file size limits to 50 MB for video and 10 MB for images. NuGet Fixed an issue in which the NuGet package API.SessionId property generates an{\" \"} InvalidOperationException, if accessed before it is assigned. The MyGeotab NuGet package no longer includes a reference to Newtonsoft.json. JSON Serializer Change In 5.7.2103 Post-release update: it was recently uncovered within our development team that as of MyGeotab release 5.7.2103, the JSON Serializer responsible for parsing API calls has changed to no longer allow single quote (') usage within the call parameters. Integrators should now solely use double quotes (\") for this purpose. The expected error result for single quote usage with this change is as follows: The new Serializer logic only accepts property names and string values in double quotes because that format is required by the{\" \"} RFC8259 {\" \"} specification and is the only format considered to be valid JSON. New Stock Groups Available GroupDriverActivityGroupId GroupPersonalGroupId GroupBusinessGroupId Device FuelTankCapacity will now throw an ArgumentOutOfRangeException if the value is less than 0. The DevicePlans property will be removed from the object model in a future version. DevicePlans does not encapsulate billing information, so please use the DevicePlanBillingInfo property from this version forward. Added the DevicePlanBillingInfo property to replace the DevicePlans property.{\" \"} DevicePlanBillingInfo contains more billing information than DevicePlans. DeviceStatusInfoSearch Fixed a bug that omitted the closestAssetLimit property when applying closestAssetLimit and{\" \"} resultsLimit together. UserHosRuleSetSearch Fixed bug that applied the wrong date when searching for UserHosRuleSet using both fromDate and{\" \"} userSearch.fromDate. FuelTransaction Added the ProviderProductDescription property. This property requests the non-generic product description as described by the fuel card provider. DutyStatusViolationType Added EwdRest, EwdWork, and EwdWorkExemption. Errors Removed provider-specific details from exception messages when a relation violation exception occurs. The exception types returned have not changed. Defect Added IsHidden and IsRequired properties. IsHidden is a boolean value indicating whether a defect is hidden in the UI. Used to determine if \"other” should be shown or not. IsRequired is a boolean value indicating whether a defect must be signed off. Used to determine if the part must be explicitly marked as having defect(s) or not. JSON Serializer Change The JSON Serializer responsible for parsing API calls has changed to no longer allow single quote (') usage within the call parameters. Integrators should now solely use double quotes (\") for this purpose. The expected error result for single quote usage with this change is as follows: The new Serializer logic only accepts property names and string values in double quotes because that format is required by the{\" \"} RFC8259 {\" \"} specification and is the only format considered to be valid JSON. Add/Set FuelTransactionPermalink Fuel transactions must be unique when comparing all fields (excluding sourceData) against existing transactions. CompanyDetails Added jurisdiction property. CreateDatabase The CreateDatabase API now requires user-selected jurisdiction. The jurisdiction is the place of residency for Customer data, maintenance hours, and other information (e.g.U.S., EU). This was previously inferred from the selected timezone. To maintain backwards compatibility, timezone can still be used to infer jurisdiction. However, all users are encouraged to provide a jurisdiction as part of the CompanyDetails provided to the CreateDatabase API. CustomVehicleDevice Added fuelTankCapacity property. DiagnosticType Added LevcFault. Drive Add-In Photos A new API was added to Drive add-ins to access the device camera to take a photo or select an exiting photo from the mobile device using{\" \"} api.mobile.camera.takePicture(). DriverRegulation Added CurrentDutyStatus representing the latest DutyStatusLogType affecting availability or violations. DutyStatusViolationType Added EwdRest, EwdWork, and EwdWorkExemption (formerly{\" \"} Work and WorkExemption ). DVIRLogSearch Added LogTypes property for searching by list of DVIRLogType. ExceptionEvent Exception events can be deleted when new data arrives from a device that, when evaluated against the same rule conditions, invalidates the previous state of the exception. For example, a speeding exception is generated for a street with a 40mph speed limit beside a highway. As more GPS data arrives, it becomes clear the vehicle is on the highway, not the service road, so the exception is invalidated. This is a problem for users who continuously request ExceptionEvent data because they are unaware when an exception is invalidated, and deleted at a later date. To resolve this issue, two new properties have been added to ExceptionEvent; lastModifiedDate and{\" \"} state. These properties determine if the exception event is invalidated instead of deleted. This means that when a new GetFeed request is made, the user sees the updated record and can adjust their records accordingly. Invalidated exceptions will no longer be removed immediately. NOTE: Invalidated exceptions will not be returned by default. You must pass the search parameter includeInvalidated in the request to Get or GetFeed to return invalidated exception events. The state of these exceptions will be Invalid . ExceptionEventSearch Added includeInvalidated property. ExceptionEventState New object representing the state of the exception event. Possible states are Valid and Invalid. Generator Add-In Generator-addin {\" \"} updated to mock drive add-in camera API features. Group Group objects in some instances had color and children properties partially populated when nested in another object (ex device.groups). This is fixed, so they are no longer populated when groups are nested in group linked entities. HosRuleSet Added CaliforniaPropertyShortHaul and CaliforniaPropertyShortHaulWithRest. Jurisdiction New enumeration representing the Jurisdiction of a database. MediaType Added Application media file type. This is to support PDF file types in MediaFiles. RadioDownloader, RadioData And Related Objects Are Removed All Radio Downloader related objects are removed as Geotab deprecates all RF functionality. SecurityIdentifier Added ViewDeviceDataPrivacyChangeData and EditDeviceDataPrivacyChangeData Added{\" \"} ViewSharedDevice Added AdministerPropertySet,{\" \"} ViewPropertySet, AdministerProperty, and ViewProperty{\" \"} Added ViewActiveInsights Added IgnoreHOSLogs Added{\" \"} ViewShareableLink, CreateShareableLink, and{\" \"} DeleteShareableLink TripSearch Added SearchArea property to allow searching for trips within a rectangular BoundingBox geographic area. Data Intake Gateway (DIG) DIG is our new platform for integrating custom telematics data into MyGeotab. To learn more,{\" \"} click here . APIv1 JSON Serialization To reduce the duration of process-intensive requests with large JSON payloads, the MyGeotab JSON-RPC API now uses System.Text.Json instead of Newtonsoft.JSON to serialize JSON data sent using the API. This change includes backward compatibility with Newtonsoft.JSON, with the following exception: Numbers with decimals will no longer be serialized using the decimal followed by a zero, if it is a whole number. Nuget Package The Nuget Package now targets .NET Standard 2.0,.NET Standard 2.1 and .NET 5.0. To improve serialization and deserialization performance, the Geotab.Checkmate.Objectmodel Nuget Package version 5.7.2102 replaced the JSON serialization library from Newtonsoft.JSON, with System.Text.Json. Due to the performance improvement with System.Text.Json, the existing rate limit OverLimitException may be surpassed when calling the GetFeed API in a tight loop. SDK Site SDK site adjusted for AODA compliance. Generator Add-In New Geotab Drive Add-in features start/stop, hook and notifications added to generator-addin. General SDK Updates DeviceSearch Keywords property expanded to include EngineVehicleIdentificationNumber, VehicleIdentificationNumber{\" \"} and SerialNumber properties. DeviceShare, DeviceShareSearch, DeviceShareType, DeviceShareSearch Beta support for DeviceShare functionality added. This object is used for Extendable Services billing purposes. DutyStatusLogType Added Work, Rest, and WorkExemption properties. ExceptionRuleBaseType Route Completion displays the completion status of custom routes and roads to help users maintain compliance with service level agreements. A route is completed based on the rule and conditions set by the user. Route completion exceptions represent servicing activity for a set of previously defined routes, within a service group. A new RouteCompletion category is used to classify a rule in the Route Completion Report. Route completion rules are returned with unfiltered requests to the Get<Rule> API, or with the category filter UserExceptionRules. They can also be searched by RouteCompletion. FaultState Added FaultStates. This allows faults to represent more precise and potentially multiple fault states. In the future, FaultState will be deprecated, though still available for backwards compatibility. FaultStateProvider Complements the FaultStates property of FaultData. Describes the status of a fault. GetFeed To comply with the GetFeed contract and avoid performance loss, fixed a bug that applies both fromDate and fromVersion when both are supplied in the API request. When fromVersion is supplied, fromVersion will be ignored. This fix may return more records when both fromDate and fromVersion are supplied with before the given dateTime is returned. Also, fixed a bug where toVersion is returned as 0, when a search returns no results. Now, when no results are returned, ToVersion is returned as the latest Feed version. HosRuleSet Added StandardHoursSoloExemptionHours. RoutePlanItem Added PassCount. The expected number of passes through the Zone. RouteSearch Added Groups search option to allow searches for Route Completion routes (RouteType.Service) that are members of GroupSearch(s). Only returns routes that are members of a service group hierarchy. RouteType Added Service route type. SecurityIdentifier Added RouteCompletionReport. UserSearch Added UserSearchType property to address IsDriver search limitation for Driver or Drivers, and Users. UserSearch allows searching for drivers and users, users who are not drivers, and only users who are drivers. IsDriver will be deprecated but remain backwards compatible. UserSearchType Added values to the UserSearch, UserSearchType properties. Map Add-In Map Add-ins are now fully supported, and no longer in Feature Preview. Click here to learn more about Map Add-ins Storage API Storage APIs are now fully supported, and no longer in Feature Preview. Click here to learn more about Storage APIs General SDK Updates DeviceStatusInfo The dates of GPS, status and fault records are compared and uses the latest recorded data point as the DateTime. AddInData The Set method will now allow modifying a value with no groups assigned. CreateDatabase Added a rate limit to the CreateDatabase method: 15/1m, 100/1h, 800/1d. Device Added support for Untracked Assets. This allows adding devices that do not have a serial number. DutyStatusLog Added the IsTransitioning property indicating whether an HOS log is in transition after the first driver accepts it. Added the IsHidden property. DutyStatusLogType Added CanadaCycleOne, CanadaCycleTwo,{\" \"} OperatingZoneCanadaSouthOf60, OperatingZoneCanadaNorthOf60,{\" \"} OperatingZoneAmerica and INT_CoDriver. DutyStatusViolationSearch The DutyStatusViolationSearch method can now search by user company or driver groups. DVIRLog Updated the documentation for Canada-specific fields on DVIRLogs (LoadHeight, LoadWidth, and{\" \"} Odometer) to better describe how they are populated. FaultState Added Inactive, PendingOff, ActiveOff,{\" \"} InactiveOff, and Cleared. Get:DutyStatusLog Fixed bug getting latest log for all users Get:StatusData Users can now extrapolate the status date for diagnostics using the unit of measure None when Get is used with search (device, diagnostic, from and to date). GetFeed:DeviceStatusInfo Added GetFeed for DeviceStatusInfo. MessageContentType Added MimeContent to MessageContentType. MimeContent Fixed documentation of maximum size. RuleSearch Fixed a bug getting zone stop rules. SDK Runner Fixed a UI bug rendering JSON, causing it to fail on empty object. Sdk-Addin-Samples:Proximity Removed ResultsLimit of 1000 for the Get<Device> request. Get<Device> request now accepts wildcard searches. Added a Run, Select All and Deselect All button. Updated warning messages if an input is missing or invalid when a user clicks Run. Updated minor UI aesthetics. Sdk-Map-Addin-Samples Added a new sample illustrating tooltip which displays the odometer, fuel level, and battery charge level (if applicable) of a vehicle. SecurityIdentifier Added ViewDeviceShare, ViewDeviceShare, InstallRecord,{\" \"} ViewDeviceShare, ViewDeviceShare, ViewUserDeviceLink, and{\" \"} ViewUserDeviceLink. VersionInformation Added the ServerId property, a unique identifier for a server/cluster. New Media File API Geotab is happy to announce a new set of APIs related to Media Files. This new API can be used to store images or video clips related to a device or driver. MediaFile: MediaFile is a new type used to store images or video clips related to a device or driver. More information about media files can be found{\" \"} here . MediaType: The type of Media. Status: The status of an uploaded file. MediaFileSearch: The object used to specify the arguments when searching for MediaFile. This will return the data describing a file, not the actual file. Tag: A named tag to provide context to an entity. DownloadMediaFile: Download a file for the given MediaFile. The Content type is determined by the file extension. Range headers are supported. UploadMediaFile: Upload a file for the corresponding MediaFile using multipart/form-data POST request. SecurityIdentifier: Added ViewMedia and ManageMedia. General SDK Updates BinaryDataType Added ThirdPartyData type to allow flexible length binary data format records to be stored. Methods GetCountOf method now accounts for user scope. It previously did not account for user scope, which was a bug. ZoneSearch Viewport is obsolete and no longer officially supported. It is replaced with SearchArea property. This will be better represented by the type BoundingBox. Providing a bounding box is simpler to use because map libraries provide viewport/map bounds in this way already. Backwards compatibility will be maintained with the Viewport property, though no longer documented. BoundingBox Added BoundingBox which represents a geographic area defined by the top-left and bottom-right coordinates. DiagnosticSearch Added searching by diagnostic name. FaultDataSearch Added searching by Diagnostic Code, Diagnostic Name, Diagnostic Source Name, Diagnostic Source Id, FaultState and Controller Id. Generator-Addin Added groups filter to{\" \"} generator-addin . HOSRuleSet Added: America7DaySleeper, America7DayBigSleeper,{\" \"} America8DaySleeper, America8DayBigSleeper,{\" \"} OilTransport7DaySleeper, OilTransport7DayBigSleeper,{\" \"} OilTransport8DaySleeper, OilTransport8DayBigSleeper,{\" \"} America7DayNo34hSleeper, America8DayNo34hSleeper,{\" \"} AmericaNoRestRequirement7DaySleeper, AmericaNoRestRequirement7DayBigSleeper,{\" \"} AmericaNoRestRequirement8DaySleeper, AmericaNoRestRequirement8DayBigSleeper,{\" \"} OilWell7DaySleeper, OilWell7DayBigSleeper,{\" \"} OilWell8DaySleeper, OilWell8DayBigSleeper,{\" \"} OilTransportNoRestRequirement7DaySleeper, OilTransportNoRestRequirement7DayBigSleeper,{\" \"} OilTransportNoRestRequirement8DaySleeper, OilTransportNoRestRequirement8DayBigSleeper,{\" \"} OilWellNoRestRequirement7DaySleeper, OilWellNoRestRequirement7DayBigSleeper,{\" \"} OilWellNoRestRequirement8DaySleeper, OilWellNoRestRequirement8DayBigSleeper,{\" \"} AlaskaProperty7DaySleeper, AlaskaProperty8DaySleeper Removed BETA Attribute On The Following AnnotationLog AnnotationLogSearch ApplicationVersionInformation DefectRemark DefectSeverity DutyStatusAvailability DutyStatusAvailabilitySearch DutyStatusLog DutyStatusLogSearch DutyStatusLogType DutyStatusMalfunctionTypes DutyStatusOrigin DutyStatusState DutyStatusViolation DutyStatusViolationSearch DutyStatusViolationType DVIRDefect DVIRDefectSearch DVIRLog DVIRLogSearch DVIRLogType DtcClass DtcSeverity ElectricEnergyEconomyUnit ElectricEnergyUnit HosRuleSet InvalidMyAdminUserException RepairStatusType ShipmentLog ShipmentLogSearch TextMessageContentType Trailer TrailerAttachment TrailerAttachmentSearch TrailerSearch VersionInformation GetVersionInformation GetFeed:Audit GetFeed:Device GetFeed:Diagnostic GetFeed:DriverChange GetFeed:Route GetFeed:Rule GetFeed:TextMessage GetFeed:TrailerAttachment GetFeed:Driver GetFeed:Zone Java SDK (Feature Preview) We work hard to create fast and flexible tools that make sense for your business, and your feedback is an essential part of that process. With this in mind, we are previewing our new Java SDK, and we want you to tell us how we did! So go ahead - test the kit, join our Community Developer Discussions to help us improve our product, and get to know our users. The Java SDK offers an easy way to integrate MyGeotab into Java software. All communication with Geotab services is accomplished using HTTPS with serialized data in JSON format. The Java library provides Java objects representing MyGeotab entities and automatically handles their JSON serialization and deserialization. The Java SDK is available as a Maven Dependency Library from the Maven Central Repository and includes documentation with information and usage samples for your new kit. You can find Java-based API usage samples at https://github.com/Geotab/sdk-java-samples Samples include: Get Logs for a given vehicle between a range of dates. Send Text Messages to and from a GO device Import Groups includes a console example that is also a Group import tool. The sample enables a one-time import of groups to a database from a CSV file. Import Devices includes console example that imports devices from a CSV file. Import Users includes a console example that imports users from a CSV file. Get Data Feed includes an example for retrieving GPS, StatusData and FaultData as a feed, and for exporting to CSV file. Supported Methods include: Authenticate Get Add Set Remove GetFeed (LogRecord, StatusData, FaultData, Trip) GetCountOf Supported Objects include: Id Entity EntityWithVersion NameEntity NameEntityWithVersion LoginResult Credentials Coordinate Color Controller ControllerSearch Device (all types) DeviceSearch Diagnostic DiagnosticSearch DataDiagnostic DiagnosticType EngineType EngineTypeSearch FailureMode FailureModeSearch FaultData FaultDataSearch FlashCode Group GroupSearch IoxAddOn IoxAddOnSearch LogRecord LogRecordSearch ParameterGroup ParameterGroupSearch Source SourceSearch StatusData StatusDataSearch TextMessage TextMessageSearch TextMessageContentType Trip TripSearch UnitOfMeasure UnitOfMeasureSearch User Driver UserSearch WorkTime WorkTimeDetail WorkTimeHolidayGroupId WorkTimeSearch DefectSeverity DeviceType DiagnosticType DtcClass DtcSeverity ElectricEnergyEconomyUnit FaultLampState FaultResetMode FaultState FuelEconomyUnit GoogleMapStyle GoTalkLanguage HosOption HosRuleSet MessageContentType OpenStreetMapStyle SecurityIdentifier SecurityFilter ZoneDisplayMode MapView FeedResult DbUnavailableException DuplicateException GroupRelationViolatedException InvalidMyAdminUserException InvalidUserException OverLimitException RegistrationException JsonRpcError JsonRpcErrorData General Improvements JSON serialization improvements have been made to increase the efficiency of API calls. This is especially noticeable on API calls with large response payload. For example, calling{\" \"} GetFeed of StatusData with full payload (50,000 results), the average end to end time decreased from 1800 ms to 800 ms. TextMessage And TextMessageSearch TextMessage - Added Recipient. This property is used to send a text message to a user. TextMessageSearch - Added searching by IsDelivered,{\" \"} IsRead, UserSearch. IsDelivered, when set to true, returns all text messages that were delivered to the recipient/device. IsRead, when set to true, returns all text messages that were read by the recipient/device. UserSearch searches TextMessages from a user, and users in the specified CompanyGroups{\" \"} or DriverGroups. TextMessageSearch - Added searching by ContentTypes and{\" \"} IsDirectionToVehicle. ContentTypes searches for TextMessages based on their MessageContentType. IsDirectionToVehicle, when set to true, will return all text messages that were sent to the device. If set to false, it will return all text messages that were not sent to the device. SecurityIdentifier SecurityIdentifier - PerformanceReport has been removed. Exception Messages Some exception messages contained escaped Unicode characters. We have fixed these to exclude escaped characters. See the example message change below: The method \\u0022NotAMethod\\u0022 could not be found. Verify the method name and ensure all method parameters are included The method 'NotAMethod' could not be found. Verify the method name and ensure all method parameters are included This fix applies to messages of exception types MissingMethodException, AmbiguousMatchException,{\" \"} MissingMemberException and JsonSerializationException. DiagnosticType DiagnosticType - Added GmcccFault and{\" \"} BrpFault KnownId KnownId - Added ControllerGmcccFaultId,{\" \"} SourceGmcccId, SourceGmcccObsoleteId,{\" \"} ControllerBrpFaultId, SourceBrpId,{\" \"} SourceBrpObsoleteId KnownId - Added NoExceptionEventId, NoRuleId Device Device - Added AutoHos. This property is a toggle that represents automatic generation of DutyStatusLogs for a GoDevice and/or a CustomVehicleDevice. DutyStatusViolation DutyStatusViolation - Added HoursLimit and{\" \"} DaysLimit. These properties show the maximum or minimum hours and/or days limit for duty status violations. DutyStatusViolation - Deprecated Reason property. This will be removed in a future version. The data in the Reason property string is now provided as DaysLimit and{\" \"} HoursLimit for better programmatic access. UserSearch UserSearch - Added searching by LicenseNumber,{\" \"} EmployeeNumber, HosRuleSet and UserAuthenticationType . GetFeed DebugData GetFeed: DebugData - Fixed sort order issue leading to possible missed records. FuelTransaction FuelTransaction - Added Device and{\" \"} Driver. These properties add fuel transactions for a device or user, rather than a loose match by VIN, etc. If left null, the application will attempt to match the fuel transaction to a device and driver at time of an Add or a Set. If no match is found, the fuel transaction's{\" \"} Device and Driver properties defaults to NoDevice and UnknownDriver. DVIRLog DVIRLog - Added AuthorityName,{\" \"} AuthorityAddress, Odometer, LoadHeight,{\" \"} LoadWidth and IsInspectedByDriver. These properties support Canadian DVIR inspections. AuthorityName and AuthorityAddress are automatically populated based on what the user's corresponding fields are at the time. Odometer currently only applies to the entered{\" \"} Hubometer value for Trailer DVIRs. ConditionType ConditionType - Added IsValueLessThanPercent and{\" \"} IsValueMoreThanPercent. These properties are used to create a percentage threshold for speeding violations, rather than an exact speed value under/over the current posted road speed. WebServerInvoker (Nuget Only) This method has been changed to use generics instead of passing type in, and returning an object, that needs to be cast. For example,{\" \"} var version = (string)(await invoker.InvokeAsync(\"GetVersion\", typeof(string))); is now{\" \"} var version = await invoker.InvokeAsync{`<`}string{`>`}(\"GetVersion\"); While not an officially supported component, it's possible WebServerInvoker is being used by some integrations. For this reason we thought it worth mentioning this change. NuGet ! IMPORTANT: A bug has been identified with Geotab.Checkmate.Objectmodel NuGet packages older than version 5.7.2002, which can lead to serialization errors when a previous version received a new device plan value. Please update to the latest NuGet package to establish compatibility. Map Add-In Users can now create a Map Add-In without using the view panel on the right. For quick tasks such as adding icons or text to the Map, simply use the \"noView\":true parameter in your configuration file. You can now hide Vehicle State and Groups information from the tooltip when hovering or selecting vehicles on the Map. See the example below. Interpolation Get: StatusData, LogRecord{\" \"} - In the v5.7.2001 release and earlier, we interpolate between points when using StatusData and{\" \"} LogRecord API. When a date is requested that is less than or greater than the data, we return the first/last value with the date of the time requested. To minimize confusion, we now return the first/last value with the correct dateTime. Users User - Added the IsExemptHOSEnabled property to indicate whether the user is allowed to use HOS Personal Conveyance. User - Added CompanyName, CompanyAddress, and{\" \"} CarrierNumber properties to store company and carrier information. User - Added CountryCode, PhoneNumber, and{\" \"} PhoneNumberExtension properties to assign a phone number to a selected user. Drivers Driver - Added LicenseProvince and{\" \"} LicenseNumber properties. DriverRegulation - Added RestBreakNeeded,{\" \"} OffDutyNeeded, DaySummaries, WorkdaySummaries and{\" \"} CycleSummaries properties to DriverRegulation. DutyStatusLog DutyStatusLog - Added DeferralStatus, and{\" \"} DeferralMinutes properties to define the duty status deferral and deferral minutes. DutyStatusLogType - Added the PC_Exempted property to indicate the status of a driver. DVIRLog DVIRLog - Added LogType and DefectList{\" \"} properties. DVIRLogType - Most DVIRs are performed as either Pre or Post-trip inspections. To include middle-of-the day scenarios such as discovering new defects, or performing additional inspections, we have added a new Intrip inspection type. Rules RecipientType - Added HosEnabled and{\" \"} HosDisabled to RecipientType to automate HosEnabled/HosDisabled duty status logs using rule notifications. For example, when an exception event occurs, add an HosEnabled or HosDisabled duty status log at the same time as the event for an unidentified driver. ConditionType - Added NoPreDVIRCheck and{\" \"} NoPostDVIRCheck to ConditionType when no Pre or Post-trip DVIR is performed between work days. ConditionType - Added SpeedLimitAsMeasurement property to the{\" \"} ConditionType to create rules that only apply to posted road speeds that are greater than, or less than a specified value. For example, it may be more important to alert the driver when the vehicle is travelling less than 10mph, or greater than 10mph on a highway, than it is on a city street. ConditionType - The NoDVIRCheck{\" \"} ConditionType is obsolete and will be removed in a future version. Please use NoPreDVIRCheck and NoPostDVIRCheck. Zones Zone - Added the ZoneTypes property for enumeration of zone types for a given zone. Devices GO9 - Added the ObdAlertEnabled property to allow users to enable/disable OBD alerts on their vehicles. GoDevice - Added the ParameterVersionOnDevice property to track the current parameter version on the device. The current ParameterVersion property communicates the parameter version to the device; however, parameter updates are not always immediate. Device - To prevent mismatches based on system clock settings, we have prevented{\" \"} ActiveFrom from being greater than ActiveTo when adding a device. Generator-Addin Version 3.0 We have modernized the Add-In scaffolding, development and packaging tool to use more current techniques and features: Now using webpack. Now using Puppeteer for browser testing. UI now shows a collapsible navbar. Can now toggle multi-language support. Can now toggle blur and focus events to simulate leaving and re-visiting the Add-In page. For more information visit GitHub:{\" \"} https://github.com/Geotab/generator-addin Mg-Api-Js Version 2.0 This major release merges the API wrappers mg-api-js (previously browser only version) and mg-api-node (previously Nodejs only version) into a single project: Uses single js library for nodejs or browser. Supports Async promises and legacy callback behavior. Simplifies authentication process, no more hard-to-understand callbacks. Optional lower-level control over http response. For more information visit GitHub:{\" \"} https://github.com/Geotab/mg-api-js Other SDK Updates BinaryDataSearch - Search by DeviceSearch.Groups property using{\" \"} BinaryDataSearch. SecurityIdentifier - Added SystemSettings value to{\" \"} SecurityIdentifier. Removed the DiagnosticCategory object from the SDK reference page. This is a legacy object that is no longer in use. Updated the ExternalDeviceShutdownDelay documentation to clarify values in minutes rather than seconds. Added a sample for getting fuel tax details using the API runner. Feature preview items now marked as Beta in SDK reference. Added a hardware Add-On Data Types section to the SDK. AddInData (Feature Preview) - Remove requirement of AddInDataId for search by Id. AuditSearch, DeviceSearch,{\" \"} ShipmentLogSearch, UserSearch,{\" \"} ZoneSearch - Added new search by list of Keywords. This allows searching \"or” across multiple wildcard searchable string fields of an object in one request. For example, searching for device with keywords will search for matches against{\" \"} Comment, LicensePlate, Name,{\" \"} SerialNumber and VehicleIdentificationNumber matching the provided keywords. Keywords strings support wildcard character (% ). BinaryData (nuget only) - Fix issue deserializing enum values known to the server but unknown to older nuget package. Calculated Engine Hours Search - As mentioned in 5.7.1904 What's New, DiagnosticEngineHoursAdjustmentId is now interpolated using trips and DiagnosticIgnitionId values when a search includes a from/toDate value(s) to provide exact values by default. CompanyDetails - Add documentation describing field length limits. Added more specific error messages relating to max field lengths from CreateDatabase method. Device - HardwareId is no longer returned as part of Device object. For more information regarding this change, please refer to this{\" \"} community post . DVIRDefect - Providing RepairUser and{\" \"} RepairDateTime are no longer supported for unrepaired DVIRDefect. DVIRLog - DefectList must be provided with{\" \"} DVIRLog. GetFeed - Fixed corner case where it was possible to miss data in feed due to concurrency issue. GetFeed StatusData - Fix, providing a search to GetFeed{\" \"} StatusData containing a DiagnosticSearch which has no results within the provided limit of records will now return a feed version advanced by the results limit or remaining records when less then results limit. Get Diagnostic - Fix issue searching by{\" \"} DiagnosticType.ProprietaryFault or DiagnosticType.LegacyFault causing error result. GoCurve - Added IsIoxConnectionEnabled. (Adds to{\" \"} GO4v3, GO5, GO6,{\" \"} GO7, GO8, GO9) Group (nuget only) - Removed left and right{\" \"} parameters from constructor and Group.Get method. GroupRelations - Added AddInDatas property. When{\" \"} Group linked AddInData (Feature Preview) is blocking a{\" \"} Group remove, a list blocking AddInData Ids will be returned in the GroupRelations property of GroupRelationViolatedException. HosRuleSet - Added WashingtonIntrastate7Day,{\" \"} WashingtonIntrastate8Day, NoneCanada,{\" \"} HosRuleSetCanadaNorthOf60CycleOne, HosRuleSetCanadaNorthOf60CycleTwo SecurityIdentifier - Added ViewGroups,{\" \"} AdministerWiFiHotspotSettings, ViewWiFiHotspotSettings TextMessage - Proper support of active from/to dates. *Messages that have not been sent by active to date will not be sent. TextMessageSearch - ParentTextMessageId (long) is obsolete. Usage should be replaced with ParentMessageId (Id). User - Added MaxPCDistancePerDay UserSearch - Added \"negatable” search of FistName,{\" \"} LastName and Name properties. If the first character of this search property is ‘!', then the API will know to negate the search logic. For example: field = \"!John%\", is equivalent to:{\" \"} WHERE NOT LIKE 'John%'. AddInData (Feature Preview) - Groups are now optional for AddInData objects, currently in Feature preview. Previously, groups were a required property for the AddInData object. This limited the potential usage of AddInData as there are situations where data should be available to all users regardless of scope, and some users were not able to access data when they belonged to groups outside the data's scope. Removing this restriction means any user is now allowed to get an AddInData object if no group is specified for the object. API.cs (nuget only) - Now implements IApi interface. This allows for simpler unit testing of integration code using mocks. BinaryDataType - Added SoftwareVersionFull Calculated Engine Hours Search - With a custom setting (ENABLEENGINEHOURSINTERPOLATION) applied to your database, DiagnosticEngineHoursAdjustmentId will now be interpolated using trips and DiagnosticIgnitionId values when a search includes a from/toDate value(s) to provide exact values. To apply this custom setting to your database, please reach out to Geotab support. This will become the default behavior in v5.7.2001. DatabaseExists fixed to include databases existing in other federations. FuelTransactionProductType - Added Hydrogen and{\" \"} DieselExhaustFluid. FuelTransactionProvider - Added GFN. HosRuleSet - Added HosRuleSetCanadaCycleOneTeam and{\" \"} HosRuleSetCanadaCycleTwoTeam. LoginResult - Removed unsupported legacy property SecurityToken. This property duplicated the supported property Credentials. It was previously maintained for compatibility with MyGeotab Web Server 5.6.1 which is no longer supported. Rule - Fix, don't allow adding Rules without Conditions. SecurityIdentifier - Added ViewGroups. DutyStatusLog: Added EditRequestedByUser. DutyStatusLog: Locations will not be included with DutyStatusLog by default. To include locations must use{\" \"} dutyStatusLogSearch.IncludeLocations: true. DutyStatusLogType: Added HosEnabled,{\" \"} HosDisabled. DVIRLog: Added RepairDate. IoxAddOn: Added DateTime representing when the channel was set to the given value. Serialization: ISO date time at zero hour will now have full ISO time ex 1986-01-01 ->{\" \"} 1986-01-01T00:00:00.000Z. HosRuleSet: Added AmericaShortHaul14hrWorkday,{\" \"} AmericaShortHaul8Day14hrWorkday, OilTransportShortHaul14hrWorkday,{\" \"} OilTransportShortHaul8Day14hrWorkday, CaliforniaFlammableLiquidWithRestRequirement,{\" \"} CaliforniaSchoolPupilWithRestRequirement, CaliforniaFarmProductWithRestRequirement,{\" \"} OilTransportCaliforniaProperty, OilWellCaliforniaProperty,{\" \"} AmericaSalespersonNonCdlShortHaul User: Active from/to: The user property ActiveTo will automatically be set to max date (2050-01-01) to denote that it is active. To account for differences in Client machine time vs Server machine time, we are allowing users to set the value of{\" \"} ActiveTo to a max window of 24 hours in the future (i.e. Current Time + 24 hours). In this situation we are considering it to be historical. CustomData: Incomplete custom data is no longer returned via GetFeed API. GetFeed: Added feeds for entities that could generate more than 50,000 records in a single request. Please take note of the limits on results. Audit - 50,000 record limit Device - 5,000 record limit Diagnostic - 50,000 record limit DriverChange - 50,000 record limit Route - 10,000 record limit Rule - 10,000 record limit TextMessage - 50,000 record limit Trailer - 50,000 record limit User - 5,000 record limit Zone - 10,000 record limit ApplicationVersionInformation: Added beta support BinaryDataType: Added SoftwareVersionSection1,{\" \"} SoftwareVersionSection2, SoftwareVersionSection3 DefectRemark: Added beta support DefectSeverity: Added Unregulated Device: Adding a device will now force the ActiveTo property to max date. Setting a device's ActiveTo property to a future date, but not max date, will force the value to max date. DeviceType: Added GO9 DiagnosticType: Added ProprietaryFault,{\" \"} LegacyFault DriverRegulation: Added beta support DtcClass: Added beta support DtcSeverity: Added beta support DutyStatusAvailability: Added properties CycleRest,{\" \"} DutySinceCycleRest, Is16HourExemptionAvailable,{\" \"} IsAdverseDrivingExemptionAvailable, IsOffDutyDeferralExemptionAvailable DutyStatusAvailabilityDuration: Removed from documentation, will be obsoleted in future DutyStatusViolationType: Added CycleRest and{\" \"} DutySinceCycleRest DVIRDefect: Added beta support ElectricEnergyUnit: Added beta support ElectricEnergyEconomyUnit: Added beta support FaultData: Added ClassCode, Severity{\" \"} and SourceAddress properties GO9: Added support GroupSearch: Added search by Reference HosRuleSet: Added CaliforniaFlammableLiquid,{\" \"} CaliforniaSchoolPupil, CaliforniaFarmProduct,{\" \"} OilTransportCalifornia8day, OilWellCalifornia8day KnownId: Added UnitOfMeasureLitersPerTonneId,{\" \"} DiagnosticStateOfChargeId, DiagnosticTotalLifetimeBatteryEnergyInDuringACChargingId,{\" \"} DiagnosticTotalLifetimeBatteryEnergyInDuringDCChargingId,{\" \"} DiagnosticTotalLifetimeOnBoardChargerEnergyOutDuringACChargingId,{\" \"} DiagnosticTotalLifetimeOnBoardChargerEnergyInDuringACChargingInId,{\" \"} DiagnosticOnBoardChargerAcInputVoltageId, DiagnosticElectricVehicleChargingStateId,{\" \"} DiagnosticElectricVehicleBatteryPowerId, DiagnosticOnBoardChargerACInputPowerId,{\" \"} DiagnosticOnBoardChargerDCOutputPowerId,{\" \"} DiagnosticElectricEnergyInId,DiagnosticElectricEnergyOutId,{\" \"} HosRuleSetCaliforniaFlammableLiquid, HosRuleSetCaliforniaSchoolPupil,{\" \"} HosRuleSetCaliforniaFarmProduct, HosRuleSetOilTransportCalifornia8day,{\" \"} HosRuleSetOilWellCalifornia8day, ControllerProprietaryFaultId,{\" \"} ControllerLegacyFaultId, SourceProprietaryId,{\" \"} SourceLegacyId, DiagnosticBluetoothNitricOxideConcentrationId,{\" \"} DiagnosticBluetoothNitrogenDioxideConcentrationId,{\" \"} DiagnosticBluetoothCarbonMonoxideConcentrationId, DiagnosticBluetoothAmmoniaConcentrationId,{\" \"} DiagnosticBluetoothMethaneConcentrationId, DiagnosticBluetoothEthanolConcentrationId,{\" \"} DiagnosticBluetoothHydrogenConcentrationId, DiagnosticBluetoothCarbonDioxideConcentrationId MimeContent: Added ChannelNumber property RepairStatusType: Added beta support SecurityIdentifier: Added InspectDVIR,{\" \"} CertifyDVIR - Removed DailyUsageReport User: Added ElectricEnergyEconomyUnit and{\" \"} isEmailReportEnabled properties User: Fixed bug where isDriver property would be included with{\" \"} id in nested driver entities. This property is removed from nested entities. It will remain in non-nested users. VersionInformation: Server is obsolete and replaced with more detailed{\" \"} Application property (see ApplicationVersionInformation) .Net nuget package: Group constructor with only ID has been removed. Result And Rate Limits For an in-depth description of the result in rate limit changes in 5.7.1902 and future releases see{\" \"} this blog post Concepts section updated to reflect new result and rate limits. Result Limits: Maximum result limit of 50,000 has been added to generic Get (including Get{\" \"} using search) requests of entity types: AnnotationLog, DVIRLog, TrailerAttachment, IoxAddOn, CustomData, BinaryData. Results limits will be added to more entity types in future releases. Rate Limits: Rate limits of 1 RPS (request-per-second) has been added to all GetFeed APIs. Sun-setting support for SendEmail API. No longer available in API documentation. Device: Active from/to: The device property ActiveTo will automatically be set to max date (2050-01-01) to denote that it is active. To account for differences in Client machine time vs Server machine time, we are allowing users to set the value of ActiveTo to a max window of 24 hours in the future (i.e. Current Time + 24 hours). In this situation we are considering it to be historical. DVIRLog: Added Location property. SecurityIdentifier: Added ViewBusinessIntelligence,{\" \"} ActiveTrackingClearance. SecurityRole: Added EmailSent, SkipHosVerify,{\" \"} SkipHosClaimUnassigned, SkipDvirInspect. API.cs (.Net only): Fix bug, Windows 10 using IIS Express possible hanging synchronous requests using nuget package 5.7.1803\\5.7.1804. Add/Set Device:{\" \"} ParameterVersion will auto increment server side when device parameters property changed. Server must see that{\" \"} ParameterVersion has incremented to send parameters to an installed GO device (ex device beeping instructions). Previously,{\" \"} ParameterVersion required manual increment. API.cs (.Net only): Fix bug, in certain senario changing Timeout property could abort the action on timeout and not cancel underlying request. CustomVehicleDevice: Support of vehicle specific custom devices which provide vehicle specific properties and functionality. Custom device product ID must be of CustomVehicleDevice type. Contact your reseller for more information. Improved support for calculated odometer and raw odometer with third-party diagnostic KnownId DiagnosticThirdPartyOdometerId{\" \"} and OdometerAdjustmentId Improved support for calculated engine hours with third-party diagnostic KnownId DiagnosticThirdPartyEngineRunTimeId and{\" \"} EngineHoursAdjustmentId VehicleIdentificationNumber property moved from CustomDevice to CustomVehicleDevice Added LicencePlate and LicenceState properties DutyStatusAvailability: Added BETA support for Recap and{\" \"} CycleAvailabilities properties DutyStatusAvailability: Replaced Availabilities list with separate properties: Driving, Cycle, Rest,{\" \"} Duty, Workday DeviceType: Added CustomVehicleDevice. DriverChange: DriverChange object Id property is no longer backed by integer type. It is now backed by GUID type. When update 1804 is applied to the database, all previous numeric entity Id's will be invalidated and assigned a new GUID Id's. This could pose an issue if your integration stores driver change Id and you then reference the DriverChange by that Id. Note: JSON representation of Id was previously string and remains string type. DutyStatusLogType: Added ExemptionOffDutyDeferral. DutyStatusViolationType: Added DailyDriving,{\" \"} DailyRest, DailyDuty, DailyOff. KnownId: Added DiagnosticThirdPartyEngineRunTimeId,{\" \"} DiagnosticThirdPartyOdometerId. GetFeed LogRecord: Fixed bug with inconstant results limit. SecurityIdentifier: Added DirectSupportAdmin,{\" \"} UserLoginStatusRead, UserLoginStatusSet. SecurityIdentifier: Values AlarmSoundList,{\" \"} Tracking, CreateNewSqlDatabase,{\" \"} EngineControllerList, PurgeSettings,{\" \"} SendImmobilizationInstruction are obsolete and will be removed in version 1806+. SecurityRole: Added SupportTicketInsert,{\" \"} TrainingTicketInsert, SupportTicketSet,{\" \"} TrainingTicketSetUser, LoginFailure, UserLockout,{\" \"} UserUnlocked, ShipmentLogInsert, ShipmentLogSet,{\" \"} ShipmentLogRemove, TrailerAttachmentInsert,{\" \"} TrailerAttachmentSet, TrailerAttachmentRemove. ZoneSearch: Added FromDate and ToDate{\" \"} search properties providing ability to filter zones by their active dates. API.cs (.Net only): There is a known issue on Windows 10 using IIS Express with possible hanging synchronous requests using nuget package 5.7.1803\\5.7.1804. This issue is solved in 5.7.1804.1 or greater. SecurityRole: Added CertificateSet permission DriverChangeSearch: Added property Type indicating the DriverChangeType to search for exclusively. API.cs (.Net only): There is a known issue on Windows 10 using IIS Express with possible hanging synchronous requests using nuget package 5.7.1803\\5.7.1804. This issue is solved in 5.7.1804.1 or greater. DutyStatusLog: Added properties Odometer,{\" \"} EngineHours, EventRecordStatus, EventCode,{\" \"} EventType DutyStatusLogType: Added SituationalDrivingClear FuelTaxDetail: Added properties HourlyIsOdometerInterpolated,{\" \"} IsEnterOdometerInterpolated, IsExitOdometerInterpolated FuelTaxDetail: Obsolete IsClusterOdometer - Superseded by the IsEnterOdometerInterpolated, HourlyIsOdometerInterpolated, and IsExitOdometerInterpolated properties. Will be removed in future version. FuelTaxDetailSearch: Added properties IncludeBoundaries,{\" \"} IncludeHourlyData SecurityIdentifier: Added ViewTripTypeChangeData,{\" \"} EditTripTypeChangeData Notice An issue was discovered which could cause integrations using the Geotab.Checkmate.Objectmodel nuget package v5.7.1801 and lower to encounter a serialization failure when a new DiagnosticType is introduced. The issue has been addressed in nuget package v 5.7.1802 . To ensure compatibility, it is strongly recommended that all integrations referencing the nuget package v5.7.1801 and lower update to version v5.7.1802 as soon as possible. (this issue is only relevant to .Net nuget package users) KnownId - Removed: UnitOfMeasureLitersPer100KilometersId. Diagnostics associated with this unit of measure now use{\" \"} UnitOfMeasureKilometersPerLiterId. This will not affect any previously recorded data. KnownId - Added: DiagnosticGpsLogReasonId, DiagnosticEngineRoadSpeedId ConditionType - Added: DVIRDefect - Currently works with Devices not Trailers SecurityIdentifier - Added: DriverIdentificationClearance, AccelerometerDataClearance,{\" \"} ServicePlansClearance, AuxiliaryClearance,{\" \"} EngineStatusDataClearance, ResellerControlClearance,{\" \"} GoTalkClearance, StatusGroupsClearance,{\" \"} ProductGuideClearance, FeaturePreviewClearance,{\" \"} NewsNotificationsClearance, ManageAddinsClearance,{\" \"} DeviceCurrentStatusClearance Notice In early 2018 the following legacy properties will be removed: Authenticate: userLogin parameter. This was kept around for compatibility with legacy (5.6.* and lower) integrations. It has not been publicly exposed or documented since version 5.6 of MyGeotab. It is planned to be removed as a valid parameter in version 5.7.1803. The{\" \"} userName parameter is the standard supported property that should be used. LoginResult: securityToken property. LoginResult is the object returned by the Authenticate method. It's property{\" \"} securityToken was kept around for compatibility with legacy (5.6.* and lower) integrations. It has not been publicly exposed or documented since version 5.6 of MyGeotab. It is planned to be removed as a valid parameter in version 5.7.1803. The property credentials is the standard supported property that shares the same value. API.cs (.Net only) - Fix: When password and session id are supplied to constructor, session id will be used until no longer valid. Previously, session id would only be used if password was not supplied. FuelTaxDetail - Added properties: ”IsEnterOdometerInterpolated”, \"IsExitOdometerInterpolated”, \"HourlyIsOdometerInterpolated” User - Removed property: \"MenuCollapsedNotified” GetAddresses - Added: \"hosAddresses” parameter to optionally search for ELD compliant address UnitOfMeasure - Added: Kilowatt hours (\"UnitOfMeasureKiloWattHoursId”) SecurityIdentifier - Added \"ViewBinaryData”, \"ManageAddInData”, \"ViewAddInData” HosRuleSet - Added \"CarrierExemption” .Net SDK samples updated to target netcoreapp2.0 .Net nuget package now supports framework: netstandard2.0 (removed support for net46) API.cs (.Net only) - Added cancellation token parameter to AuthenticateAsync and CallAsync methods. DutyStatusLog - Added \"Malfunction” property - The DutyStatusMalfunctionType of the DutyStatusLog record. As a flag it can be both a diagnostic and malfunction state which is used to mark status based records (e.g. \"D”, \"SB”) as having a diagnostic or malfunction present at time of recording. DutyStatusLog - Added \"Sequence” property - The sequence number, which is used to generate the sequence ID. DutyStatusLogType - Added \"EnginePowerup”, \"EngineShutdown”, \"EnginePowerupPC”, \"EngineShutdownPC”, \"PowerCompliance”, \"EngineSyncCompliance”, \"TimingCompliance”, \"PositioningCompliance”, \"DataRecordingCompliance”, \"DataTransferCompliance”, \"OtherCompliance”, \"MissingElementCompliance”, \"UnidentifiedDrivingCompliance”, \"INT_PC”, \"INT_D”. Controller - Added short integer \"CodeId” property, which will replace the \"Code” property. New \"AnyController” for J1708 engine diagnostics to allow replacing those engine diagnostics identical except for the controller with one diagnostic. J1708 engine diagnostics for 58 separate SIDs were updated. CustomDevice - Added \"VehicleIdentificationNumber” property. FuelTaxDetail - Added \"Driver” property. DriverChangeSearch - Added \"IncludeOverlappedChanges” property - A value indicating whether to include the last driver change before the from date or the most recent driver change (if the from date is not provided). InvalidUserException - Message changed from to \"Incorrect MyGeotab login credentials…” to \"Incorrect login credentials…”. New Objects DutyStatusMalfunctionType - Added - Malfunction or Diagnostic type of the DutyStatusLog. DutyStatusState - Added - The record status of DutyStatusLog. Web Request Notifications: fix {\"{\"}zoneId{\"}\"} and {\"{\"}zoneComment{\"}\"} tokens would not get populated unless {\"{\"}zone{\"}\"} or {\"{\"} address{\"}\"} were also included. Documentation: API Reference updated to include default value and max length of object properties in their descriptions. Default values are automatically used when adding an entity and those properties have no value assigned (are null). For example, adding a Group with color = null, will add group with default color \"Blue”. If a property has no default value, it is required when calling \"Add”. Set operations now retain the value of missing (null) properties. A positive effect of this change is that is remedies a long existing issue that could occur when a server is a newer version (ex 5.7.1704) than client nuget package (ex 5.7.1701) which is making requests to it. The issue could arise when a new Enum value was added and exists only in the server's code base, not client client nuget package. When the unknown Enum was received by the client, it could not be deserialized into an Enum value and would throw an exception. Starting in nuget package version 5.7.1707.x, the unknown Enum value will be deserialiezed to null. This means the object can round trip” on \"Set” because the server will now (starting at version 5.7.1707) fill in the null value with the existing saved value of the property. Added: JsonRpcError, JsonRpcErrorData - to better align JSON-RPC errors with the JSON-RPC 2.0 specification. Non-standard (now legacy) error properties have been deprecated. This should not affect nuget package users as the API.cs object serialized the JSON-RPC error results as Exceptions which are thrown. This may affect users consuming the raw JSON-RPC result of requests. It's recommended to update usages to the official, standardized, properties as outlined in the API Reference. Of note: the new objects exposes \"requestIndex” property which is the index at which a \"multicall” failed. Added: User/Driver objects now have property \"IsDriver” to clearly indicate when a user is a driver. This also makes it easier to save a user who is no longer a driver, set the property to false and save. Added: FuelTaxDetail - A new entity which provides API access to calculated fuel tax data. In the past this data was only available via the IFTA Report in MyGeotab where it was calculated on the fly. Fuel tax details are now processed using live data and stored in the database and they can be access using the API via Get and GetFeed methods. Full documentation coming soon. DatabaseId has been removed from .net package as per the{\" \"} December 2016 post DutyStatusLogType: Added: \"Authority”{\" \"} requires update of .net nuget package to ensure compatibility FuelTransaction: Added: \"ExternalReference” FuelTransactionSearch: Added: \"ExternalReference” and \"Provider” User: Added: \"AuthorityName” and \"AuthorityAddress” GetFeed of Trip now includes stop point (woohoo!) *requires server running 5.7.1706.x API Clients {\" \"} section added to SDK documentation Geotab.Reflection package no longer a dependency of Geotab.Checkmate.Objectmodel nuget package GO8: Added preliminary support for GO8 devices{\" \"} requires update of .net nuget package to correctly read/write GO8 devices IoxAddOn: Added preliminary support for IoxAddOn, IoxAddOnSearch, SerialIoxContent,KnownIoxAddOnType, IoxOutputContent, MimeContent TextMessageSearch: Added search by: \"ParentTextMessageId” DutyStatusLog - Added property: State DutyStatusLogSearch - Added search by device groups API.cs is now compatible with System.Net.Http v4.3.1 Fix, API.cs proxy support. New constructor that accepts HttpMessageHandler, deprecated constructor that accepts IWebProxy and Proxy property Fix, content type of API response headers changed from \"text/html” to \"application/json” DevicePlan: Added: D2GODriverChallengeStandard{\" \"} requires update of .net nuget package to ensure compatibility HosRuleSet.cs Added: America7DayNo34h, America8DayNo34h, AmericaShortHaulNo34h, AmericaShortHaul8DayNo34h, BrazilShortHaul{\" \"} requires update of .net nuget package to ensure compatibility SecurityRole.cs Added: ReassignData{\" \"} requires update of .net nuget package to ensure compatibility TimeZoneId: it was possible to add a user or device with \"Unknown” time zone ID. This was only possible using the API and \"Unknown” is not returned via the GetTimeZones method or a valid Olson time zone. The ability to add users and devices with \"Unknown” as been removed and all users and devices with this time zone ID have been changed to \"Etc/GMT” FuelTransactionProvider: Added - \"Voyager”, \"UltramarCST” SecurityIdentifier: Added - \"PurchaseMarketplacePaidItems”{\" \"} requires update of .net nuget package to ensure compatibility SecurityRole: Added: \"TripTypeChangeInsert”, \"TripTypeChangeRemove”, \"CustomReportSendError”{\" \"} requires update of .net nuget package to ensure compatibility Fix: nuget package issue making API requests from Azure WebJob Fix: TimeZoneInfoAdjustmentRule serialization (result of GetDaylightSavingRules) Added \"Hardware” section to SDK Nuget: Replace usage of Microsoft.Net.Http with System.Net.Http (WebRequest => HttpClient) DiagnosticSearch: Added DiagnosticType property to search by the type of diagnostic. Ex, only GoFault diagnostics. Added \"ExpiredPasswordException” object. This exception can be thrown if a user makes a request while their ChangePassword flag is true. The user must change their password before they are able to successfully make further requests SecurityRole: Added \"ReportHosAvailability”{\" \"} requires update of .net nuget package to ensure compatibility If you are using the .net nuget package and plan to use the new \"HOS Only” device plan you must update to nuget package version 5.7.1701 or greater to ensure compatibility. Id refactoring - The ID object has been refactored in the .NET SDK. See{\" \"} this forum post {\" \"} for details. Updated description of GoCurveAuxiliary (GO4v3, GO6, GO7) properties: ImmobilizeUnit: With ImmobilizeUnit being true, it is used to define the delay before the driver identification reminder is sent out if the driver key has not been not swiped. The maximum value of this property is 255. When it is less or equal to 180, it indicates the number of seconds of the delay. When it is greater than 180, the delay increases 30 seconds for every increment of one of this property. For example, 180 indicates 180 seconds, 181 indicates 210 seconds, and 182 indicates 240 seconds. ImmobilizeArming: A value mainly used for enable or disable driver identification reminder. If it is used in conjunction with vehicle relay circuits, it can force the driver to swipe the driver key before starting the vehicle. Authentication rate limiting being phased in. See this{\" \"} Blog Post {\" \"} for more details. Added \"Rate Limiting” section to SDK Concepts. KnownId - Added: \"DiagnosticDieselExhaustFluidId”, ”DiagnosticDieselParticulateFilterLampId”, \"DiagnosticPowerTakeoffEngagedId”, \"DiagnosticPowerTakeoffTotalFuelUsedId” KnownId - Removed: \"DiagnosticBluetoothBeaconOutOfRangeId” Trailer - Added \"Groups” property. Trailers can now be added to groups. TrailerSearch - Added property groups. Search for Trailers that are members of these GroupSearch(s) one of it's children or one of it's parents. *SecurityIdentifier - Added: \"RepairDVIR” KnownId - Added: \"DiagnosticDieselExhaustFluidId”, \"DiagnosticDieselParticulateFilterLampId”, \"DiagnosticPowerTakeoffEngagedId”, \"DiagnosticPowerTakeoffTotalFuelUsedId” HosRuleSet - Added: \"Florida7Day”, \"Florida8Day”, \"FloridaShortHaul7Day”, \"FloridaShortHaul8Day” New Objects OverLimitException: Thrown when a user has exceeded the query limit of an API (currently only applies to authentication). Previously, if a user reached this limit, an InvalidUserException would have been thrown. KnownId - \"DiagnosticRamFailure” name fixed to be \"DiagnosticRamFailureId” MessageContentType - Added: \"DriverWhiteList” DutyStatusLogType - Added: \"PC” (Personal conveyance driver status), \"YM” (Yard move driver status), \"WT” (Wait time oil well driver status). FuelTransaction - Added \"ProductType” property. FuelTransactionProvider - Added \"WexLegacy”, \"Fuelman” and \"Comdata”. GoDevice - Added \"GoTalkLanguage” property. User - Added \"IsYardMoveEnabled” and \"IsPersonalConveyanceEnabled” properties. HosRuleSet - Added \"OilWell7Day”, \"OilWell7DayBig”, \"OilWell8Day”, \"OilWell8DayBig”, \"AmericaTexas”, \"AmericaTexasShortHaul”, \"OilTransportTexas”, \"OilWellTexas”, \"AmericaShortHaul8Day”, \"AmericaShortHaulPassenger8Day”, \"OilTransportShortHaul8Day”, \"AmericaTexasShortHaul8Day” KnownId - Added \"DiagnosticSystemAlertId” TimeZoneInfo - Adjusted to support recently updated Windows times zones and the latest version of{\" \"} IANA/Windows {\" \"} mapped time zones.{\" \"} Click here for more info New Objects DriverWhiteListContent GoTalkLanguage FuelTransactionProductType For detailed information on new features please review the API Reference. *.Net users will require a dll update Performance and maintenance enhancements. DiagnosticTypes - Added \"GoFault” FuelTransactionProvider - Added \"WexCustomer”, \"Drive” and \"FuelTracker” SecurityIdentifier - Added \"EventOccurrenceList”,”ViewCertificates”,”ManageCertificates” HosRuleSet - Added \"AmericaSalesperson” .Net: MachineSettings - Fix to work with ASP.Net Web API projects .Net: DataToComponenet - Updated \"Equals” method to compare payloads for equality .Net: DutyStatusOrigin - removed unused \"Serializable” attribute .Net - Changes in API.cs to use HttpClient instead of HttpWebRequest in order to support .Net core in the future. dll requires .Net Framework version v4.6+ New APIs GetDirections OptimizeWaypoints New Objects Directions Leg Step Waypoint *.Net users will require a dll update Added new Units of Measure (km/L, kg/km, L/lane km, L/ton and g/m^2) ** .Net users will require a dll update* For security reasons, TLS 1.2 is being enforced on all servers. To fix the integration, please update to at least .NET 4.5 and use the{\" \"} latest nuget package . For more information, please visit the{\" \"} forum discussion . Driver has a new property: viewDriversOwnDataOnly. When set to true, a driver gains the ability to view their own driving data. ** .Net users will require a dll update* TextToSpeechContent has been renamed to GoTalkContent and RelayContent has been renamed to IoxOutputContent ** .Net users will require a dll update* New recipient types added that will send even if there is a delay in data. (BeepTenTimesRapidlyAllowDelay, BeepThreeTimesAllowDelay, BeepThreeTimesRapidlyAllowDelay , TextToSpeechAllowDelay) ** .Net users will require a dll update* Access to third party messages via API. ** .Net users will require a dll update* New Objects IoxAddOn KnownIoxAddOnType IoxAddOnSearch IoxOutputContent GoTalkContent Fixed operator overloading for Id object in .Net dll (id1 == id2 is the same as id1.Equals(id2)) -{\" \"} *If you are using dll version 5.7.1508-1511 this will require a dll update. New addin: Trips Streetview added to{\" \"} GitHub Added new security clearances for: ViewMarketplacePaidItems: Allow user to see paid Marketplace items DeviceAdminDeleteUnplugReplace: Access to removing vehicle, unpluging device, and replacing device. *If you are using dll version 5.7.1508-1510 this will require a dll update. New SDK. Featuring the new{\" \"} SDK Runner , new methods and objects ( click here to see the preview items ) Code snippets in the reference documentation. Now you can see working examples of the methods as they are used in the runner. .Net users will require a .DLL update to access the latest features. New Methods CreateDatabase DatabaseExists GenerateCaptcha GetVersionInformation New Objects AnnotationLog AnnotationLogSearch CaptchaAnswer CaptchaException Color CompanyDetails DVIRLog DVIRLogSearch DiagnosticCategory DistributionList DuplicateException DutyStatusAvailability DutyStatusAvailabilityDuration DutyStatusAvailablitySearch DutyStatusLog DutyStatusLogSearch DutyStatusLogType DutyStatusViolation DutyStatusViolationSearch DutyStatusViolationType EntityWithVersion FuelEconomyUnit FuelEvent FuelTransaction FuelTransactionProvider HosRuleSet IncludeGroups InvalidMyAdminUserException MapView NameEntity NameEntityWithVersion RadioDownloaderSearch Recipient RecipientType RegistrationException Search ShipmentLog ShipmentLogSearch TextMessageContentType Trailer TrailerAttachment TrailerAttachmentSearch TrailerSearch VersionInformation VolumeUnit Deprecated BingMapStyle EngineType EngineTypeSearch StatusDataRequestContent DriverChangeSearch received new search points including: DeviceSearch, DriverSearch, FromDate and ToDate. Checkout the API Reference{\" \"} for more details DistributionList is now supported by the API. Checkout the API Reference for more details. Some related objects are still pending support (Notification, NotificationTemplate, BinaryData) Add-In examples {\" \"} have been added to SDK documentation When searching for Zones you can now specify a traversal method of the group tree. You can choose to include just the specified element, just the ancestors, just the descendants, or both ancestors and descendants. See the ZoneSearch object in the API Reference for more details Fix documentation for object properties Added KnownIds: DiagnosticDeviceTotalIdleFuel Added FuelTransaction API (Beta) HOS/DVIR objects supported in API. Key objects are AnnotationLog, DVIRLog, DutyStatusAvailability, DutyStatusLog, DutyStatusViolation, and ShipmentLog. Check out the{\" \"} API Reference for more details Added Groups property to StatusDataSearch. This allows searching for status data for devices in the supplied groups. This does not return interpolated results Added from/to date search to UserSearch object. Checkout the API Reference for more details API Reference, objects now show properties from inherited classes. For example GoDevice extends Device and will show properties of GoDevice and Device in the documentation Geotab Announces New{\" \"} DEV Channel {\" \"} for Developers New condition types added - .Net will require dll update Add KnownId for DiagnosticDeviceTotalIdleFuelId - .Net will require dll update Get all zones now populating points correctly ( see forum post ) Fixed TimeZoneInfo isDaylightSavingsSupported always false using .Net API client Units of measure have been converted to use Known Id's ( see forum post ) Adding, setting and removing of some entities has been disabled via the API. Exception Event, Trip, Status Data, Fault Data, Log Record with exceptions for adding odometer and engine hours adjustments and dismissing faults Clearer documentation of date and long values in API Reference Data Feed section added to Guides portion of SDK ( see document )","link":"/myGeotab/releaseNotes","breadCrumb":["MYG","Release Notes"],"category":"guide"}]